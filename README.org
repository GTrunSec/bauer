#+TITLE: bauer: an Emacs+Nix IDE
#+AUTHOR: Matthew Bauer
#+EMAIL: mjbauer95@gmail.com
#+LANGUAGE: en
#+OPTIONS: c:nil d:t e:t f:t H:2 p:nil ':t *:t -:t ::t <:t \n:nil ^:t |:t
#+OPTIONS: arch:nil author:t broken-links:nil
#+OPTIONS: creator:nil date:nil email:nil inline:nil num:3 pri:t
#+OPTIONS: prop:nil stat:t tags:nil tasks:nil tex:t timestamp:t title:t toc:t
#+BABEL: :cache yes
#+LATEX_HEADER: \usepackage{parskip}
#+LATEX_HEADER: \usepackage{inconsolata}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+LATEX_HEADER: \usepackage{alltt}
#+LATEX_HEADER: \usepackage{upquote}
#+TAGS: noexport notangle
#+INFOJS_OPT: view:showall toc:t ltoc:t mouse:underline path:http://orgmode.org/org-info.js

* About

  This is @[[https://matthewbauer.us][matthewbauer]]’s Emacs config. This file generates an Emacs
  configuration. It can be considered an ‘[[https://www.gnu.org/s/emacs/][Emacs]]+[[https://nixos.org][Nix]]’ IDE. That is, the Emacs
  configuration is /integrated/ with hardcoded Nix store paths. This provides
  a kind of functional Emacs configuration.

* Usage
  :PROPERTIES:
  :header-args: :tangle no
  :END:

** Install/upgrade

   Run this from your shell:

   #+BEGIN_SRC shell
curl https://raw.githubusercontent.com/matthewbauer/bauer/master/bootstrap.sh | sh
   #+END_SRC

   Alternatively, you can accomplish the same thing from Emacs by downloading
   [[https://raw.githubusercontent.com/matthewbauer/bauer/master/lisp/installer.el][installer.el]], loading it (M-x load-file<RET>) and running ‘install’ (M-x
   install<RET>).

** Develop

   #+BEGIN_SRC shell
git clone https://github.com/matthewbauer/bauer
cd bauer
nix-build
./result/run
   #+END_SRC

** w/o Nix

   You can use ~bauer~ without Nix. This just gives you the unintegrated Emacs
   configuration. To get started, run the following.

   #+BEGIN_SRC shell
mkdir -p ~/.emacs.d
git clone https://github.com/matthewbauer/bauer ~/.emacs.d/bauer
   #+END_SRC

   Then, add the following to your Emacs init file [[~/.emacs.d/init.el]]:

   #+BEGIN_SRC emacs-lisp
(unless (locate-library "site-paths")
  (defvar bauer-dir (expand-file-name "bauer" user-emacs-directory))
  (add-to-list 'load-path (expand-file-name "lisp" bauer-dir))
  (org-babel-load-file (expand-file-name "README.org" bauer-dir)))
   #+END_SRC

* Header

   I want lexical scoping for the init-file, which can be specified in the
   header. The first line of the configuration is as follows:

   #+BEGIN_SRC emacs-lisp
;;; -*- lexical-binding: t -*-
   #+END_SRC

* Verify Emacs version ≥ 25

  Emacs 24 is unsupported currently. This will check to make sure Emacs 25+ is
  available.

   #+BEGIN_SRC emacs-lisp
(unless (>= emacs-major-version 25)
  (error "Need Emacs 25+ to work properly"))
   #+END_SRC

* Speed tweaks

** TODO set file-name-handler-alist to nil
  :PROPERTIES:
  :header-args: :tangle no
  :END:

   Supposedly, this speeds up initialization. It’s disabled for now.

   #+BEGIN_SRC emacs-lisp
(file-name-handler-alist nil)
   #+END_SRC

** Temporarily increase GC Cons Threshold

   #+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold 80000000)
   #+END_SRC

*** Reset after init

    #+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook
          (lambda () (setq gc-cons-threshold
                           (car (get 'gc-cons-threshold 'standard-value)))))
    #+END_SRC

*** GC on focus-out

    Garbage collect when window focus is lost.

    #+BEGIN_SRC emacs-lisp
(add-hook 'focus-out-hook 'garbage-collect)
    #+END_SRC

* Use y or n instead of yes or no

  Shortens confirmation to y or n.

   #+BEGIN_SRC emacs-lisp
(fset 'yes-or-no-p 'y-or-n-p)
   #+END_SRC

* Setup installer

  Provides installation and upgrading functionality. See [[./lisp/installer.el]] for
  documentation.

  #+BEGIN_SRC emacs-lisp
(require 'installer nil t)
  #+END_SRC

* Autoloads
  These autoloads are needed for some reason.

  #+BEGIN_SRC emacs-lisp
(autoload 'tramp-tramp-file-p "tramp")
  #+END_SRC
* Custom config

  Use [[./lisp/set-defaults.el]] file. This should maintain compatiblity with custom.el.

  #+BEGIN_SRC emacs-lisp
(require 'set-defaults)
  #+END_SRC

  Pull in generated paths from [[./site-paths.el]]. This will work fine if you do not
  have this file available.

  #+BEGIN_SRC emacs-lisp
(require 'site-paths nil t)
  #+END_SRC

** Set environment

   #+BEGIN_SRC emacs-lisp
(set-envs
 '("NIX_REMOTE" "daemon")
 '("EDITOR" "emacsclient -nw")
 '("LANG" "en_US.UTF-8")
 '("LC_ALL" "en_US.UTF-8")
 '("PAGER" "cat")
 '("NODE_NO_READLINE" "1")
 )
   #+END_SRC

** Set defaults
   These are some *better* defaults for Emacs. They shouldn’t require any
   packages to be installed to work (those go in use-package).

   #+BEGIN_SRC emacs-lisp
(set-defaults
 '(TeX-auto-save t)
 '(TeX-engine 'xetex)
 '(ad-redefinition-action 'accept)
 '(auto-compile-display-buffer nil)
 '(auto-compile-mode-line-counter t)
 '(auto-compile-source-recreate-deletes-dest t)
 '(auto-compile-toggle-deletes-nonlib-dest t)
 '(auto-compile-update-autoloads t)
 '(apropos-do-all t)
 '(async-shell-command-buffer 'new-buffer)
 '(auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
 '(auth-source-save-behavior t)
 '(auto-revert-check-vc-info t)
 '(auto-revert-verbose nil)
 '(auto-save-visited-file-name t)
 '(backward-delete-char-untabify-method 'hungry)
 '(backup-by-copying t)
 '(backup-directory-alist `((".*" . ,temporary-file-directory)))
 '(bm-buffer-persistence t)
 '(bm-restore-repository-on-load t)
 '(bm-cycle-all-buffers t)
 '(bookmark-save-flag t)
 '(c-syntactic-indentation nil)
 '(comint-process-echoes t)
 '(comint-input-ignoredups t)
 '(comint-prompt-read-only t)
 '(comint-scroll-show-maximum-output nil)
 '(company-auto-complete (lambda () (and (company-tooltip-visible-p)
                                         (company-explicit-action-p))))
 '(company-frontends '(company-pseudo-tooltip-unless-just-one-frontend
                       company-preview-frontend
                       company-echo-metadata-frontend))
 '(company-continue-commands
   '(not save-buffer
         save-some-buffers
         save-buffers-kill-terminal
         save-buffers-kill-emacs
         comint-previous-matching-input-from-input
         comint-next-matching-input-from-input))
 '(company-require-match nil)
 '(company-selection-wrap-around t)
 '(compilation-always-kill t)
 '(compilation-ask-about-save nil)
 '(compilation-auto-jump-to-first-error nil)
 '(compilation-environment '("TERM=xterm-256color"))
 '(compilation-scroll-output nil)
 '(compilation-skip-threshold 2)
 '(completions-format 'vertical)
 '(completion-cycle-threshold 5)
 '(counsel-find-file-at-point t)
 '(counsel-mode-override-describe-bindings t)
 '(create-lockfiles nil)
 '(cursor-in-non-selected-windows nil)
 '(custom-safe-themes t)
 '(custom-buffer-done-kill t)
 '(custom-file (expand-file-name "settings.el" user-emacs-directory))
 '(custom-search-field nil)
 '(create-lockfiles nil)
 '(checkdoc-spellcheck-documentation-flag t)
 '(debug-on-signal t)
 '(delete-old-versions t)
 '(delete-by-moving-to-trash t)
 '(dired-auto-revert-buffer t)
 '(dired-hide-details-hide-symlink-targets nil)
 '(dired-dwim-target t)
 '(dired-listing-switches "-alhv")
 '(dired-omit-verbose nil)
 '(dired-omit-files "^\\.")
 '(dired-recursive-copies 'always)
 '(dired-recursive-deletes 'always)
 '(dired-subtree-line-prefix " ")
 '(dtrt-indent-verbosity 0)
 '(disabled-command-function nil)
 '(display-buffer-alist
   (\`(((\,(rx bos (or "*Flycheck errors*"
                       "*Backtrace"
                       "*Warnings"
                       "*compilation"
                       "*Help"
                       "*less-css-compilation"
                       "*Packages"
                       "*magit-process"
                       "*SQL"
                       "*tldr")))
        (display-buffer-reuse-window display-buffer-in-side-window)
        (side . bottom)
        (reusable-frames . visible)
        (window-height . 0.33))
       ("." nil
        (reusable-frames . visible)))))
 '(display-buffer-reuse-frames t)
 '(dumb-jump-quiet t)
 '(echo-keystrokes 0)
 '(enable-recursive-minibuffers t)
 '(erc-autoaway-idle-seconds 600)
 '(erc-autoaway-use-emacs-idle t)
 '(erc-autojoin-timing 'ident)
 '(erc-fill-prefix "          ")
 '(erc-insert-timestamp-function 'erc-insert-timestamp-left)
 '(erc-interpret-mirc-color t)
 '(erc-kill-buffer-on-part t)
 '(erc-kill-queries-on-quit t)
 '(erc-kill-server-buffer-on-quit t)
 '(erc-prompt (lambda nil (concat "[" (buffer-name) "]")))
 '(erc-prompt-for-nickserv-password nil)
 '(erc-prompt-for-password nil)
 '(erc-query-display 'buffer)
 '(erc-server-coding-system '(utf-8 . utf-8))
 '(erc-timestamp-format "%H:%M ")
 '(erc-timestamp-only-if-changed-flag nil)
 '(erc-try-new-nick-p nil)
 '(eshell-banner-message "")
 '(eshell-buffer-shorthand t)
 '(eshell-cd-on-directory t)
 '(eshell-cmpl-autolist t)
 '(eshell-cmpl-cycle-completions nil)
 '(eshell-cmpl-cycle-cutoff-length 2)
 '(eshell-cmpl-ignore-case t)
 '(eshell-cp-interactive-query t)
 '(eshell-cp-overwrite-files nil)
 '(eshell-default-target-is-dot t)
 '(eshell-destroy-buffer-when-process-dies t)
 '(eshell-highlight-prompt t)
 '(eshell-hist-ignoredups t)
 '(eshell-history-size 10000)
 '(eshell-list-files-after-cd t)
 '(eshell-ln-interactive-query t)
 '(eshell-mv-interactive-query t)
 '(eshell-output-filter-functions '(eshell-handle-ansi-color
                                    eshell-handle-control-codes
                                    eshell-watch-for-password-prompt
                                    eshell-truncate-buffer))
 '(eshell-plain-echo-behavior nil)
 '(eshell-review-quick-commands t)
 '(eshell-rebind-keys-alist
   '(([(control 97)] . eshell-bol)
     ([home] . eshell-bol)
     ([(control 100)] . eshell-delchar-or-maybe-eof)
     ([backspace] . eshell-delete-backward-char)
     ([delete] . eshell-delete-backward-char)
     ([(control 119)] . backward-kill-word)
     ([(control 117)] . eshell-kill-input)
     ([tab] . completion-at-point)))
 '(eshell-rm-interactive-query t)
 '(eshell-prompt-function
   (lambda () (concat
               (when (tramp-tramp-file-p default-directory)
                 (concat
                  (tramp-file-name-user
                   (tramp-dissect-file-name default-directory))
                  "@"
                  (tramp-file-name-real-host (tramp-dissect-file-name
                                              default-directory))
                  " "))
               (let ((dir (eshell/pwd)))
                 (if (string= dir (getenv "HOME")) "~"
                   (let ((dirname (file-name-nondirectory dir)))
                     (if (string= dirname "") "/" dirname))))
               (if (= (user-uid) 0) " # " " $ "))))
 '(eshell-visual-commands
   '("vi" "screen" "top" "less" "more" "lynx" "ncftp" "pine" "tin" "trn" "elm"
     "nano" "nethack" "telnet" "emacs" "emacsclient" "htop" "w3m" "links" "lynx"
     "elinks" "irrsi" "mutt" "finch" "newsbeuter" "pianobar"))
 '(eldoc-eval-preferred-function 'pp-eval-expression)
 '(eval-expression-debug-on-error t)
 '(eval-expression-print-length 20)
 '(eval-expression-print-level nil)
 '(explicit-shell-args '("-c" "export EMACS= INSIDE_EMACS=; stty echo; shell"))
 '(expand-region-contract-fast-key "j")
 '(fased-completing-read-function 'nil)
 '(fill-column 80)
 '(flycheck-check-syntax-automatically '(save
                                         idle-change
                                         mode-enabled
                                         new-line))
 '(flycheck-display-errors-function
   'flycheck-display-error-messages-unless-error-list)
 '(flycheck-idle-change-delay 0.001)
 '(flycheck-standard-error-navigation nil)
 '(flycheck-global-modes '(not erc-mode
                               message-mode
                               git-commit-mode
                               view-mode
                               outline-mode
                               text-mode
                               org-mode))
 '(flyspell-abbrev-p nil)
 '(flyspell-auto-correct nil)
 '(flyspell-highlight-properties nil)
 '(flyspell-incorrect-hook nil)
 '(flyspell-issue-welcome-flag nil)
 '(frame-title-format '(:eval
                        (if (buffer-file-name)
                            (abbreviate-file-name (buffer-file-name))
                          "%b")))
 '(global-auto-revert-non-file-buffers t)
 '(highlight-nonselected-windows nil)
 '(hideshowvis-ignore-same-line nil)
 '(history-delete-duplicates t)
 '(history-length 20000)
 '(hippie-expand-verbose nil)
 '(iedit-toggle-key-default nil)
 '(imenu-auto-rescan t)
 '(indicate-empty-lines t)
 '(indent-tabs-mode nil)
 '(inhibit-startup-screen t)
 '(inhibit-startup-echo-area-message t)
 '(initial-major-mode 'fundamental-mode)
 '(initial-scratch-message "")
 '(ispell-extra-args '("--sug-mode=ultra"))
 '(ispell-silently-savep t)
 '(ispell-quietly t)
 '(ivy-count-format "\"\"")
 '(ivy-display-style nil)
 '(ivy-minibuffer-faces nil)
 '(ivy-use-virtual-buffers t)
 '(ivy-fixed-height-minibuffer t)
 '(jit-lock-defer-time 0.01)
 '(js2-mode-show-parse-errors nil)
 '(js2-mode-show-strict-warnings nil)
 '(js2-strict-missing-semi-warning nil)
 '(kill-do-not-save-duplicates t)
 '(kill-whole-line t)
 '(load-prefer-newer t)
 '(mac-allow-anti-aliasing t)
 '(mac-command-key-is-meta t)
 '(mac-command-modifier 'meta)
 '(mac-option-key-is-meta nil)
 '(mac-option-modifier 'super)
 '(mac-right-option-modifier nil)
 '(mac-frame-tabbing t)
 '(mac-system-move-file-to-trash-use-finder t)
 '(magit-log-auto-more t)
 '(magit-clone-set-remote\.pushDefault t)
 '(magit-diff-options nil)
 '(magit-display-buffer-function 'magit-display-buffer-fullframe-status-v1)
 '(magit-ediff-dwim-show-on-hunks t)
 '(magit-fetch-arguments nil)
 '(magit-highlight-trailing-whitespace nil)
 '(magit-highlight-whitespace nil)
 '(magit-no-confirm t)
 '(magit-process-connection-type nil)
 '(magit-process-find-password-functions '(magit-process-password-auth-source))
 '(magit-process-popup-time 15)
 '(magit-push-always-verify nil)
 '(magit-save-repository-buffers 'dontask)
 '(magit-stage-all-confirm nil)
 '(magit-unstage-all-confirm nil)
 '(make-backup-files nil)
 '(mmm-global-mode 'buffers-with-submode-classes)
 '(mmm-submode-decoration-level 2)
 '(minibuffer-prompt-properties '(read-only t
                                            cursor-intangible t
                                            face minibuffer-prompt))
 '(mwim-beginning-of-line-function 'beginning-of-line)
 '(mwim-end-of-line-function 'end-of-line)
 '(neo-theme 'arrow)
 '(neo-fixed-size nil)
 '(next-error-recenter t)
 '(notmuch-show-logo nil)
 '(nrepl-log-messages t)
 '(nsm-save-host-names t)
 '(ns-function-modifier 'hyper)
 '(ns-pop-up-frames nil)
 '(org-blank-before-new-entry '((heading) (plain-list-item)))
 '(org-src-tab-acts-natively t)
 '(org-return-follows-link t)
 '(org-special-ctrl-a/e t)
 '(org-src-preserve-indentation t)
 '(org-support-shift-select t)
 '(org-src-fontify-natively t)
 '(parens-require-spaces t)
 '(package-archives '(("melpa-stable" . "http://stable.melpa.org/packages/")
                      ("melpa" . "https://melpa.org/packages/")
                      ("org" . "http://orgmode.org/elpa/")
                      ("gnu" . "https://elpa.gnu.org/packages/")
                      ))
 '(package-enable-at-startup nil)
 '(proof-splash-enable nil)
 '(projectile-globally-ignored-files '(".DS_Store" "TAGS"))
 '(projectile-enable-caching t)
 '(projectile-mode-line
   '(:eval (if (and (projectile-project-p)
                    (not (file-remote-p default-directory)))
               (format " Projectile[%s]" (projectile-project-name)) "")))
 '(projectile-ignored-project-function 'file-remote-p)
 '(projectile-switch-project-action 'projectile-dired)
 '(projectile-do-log nil)
 '(projectile-verbose nil)
 '(reb-re-syntax 'string)
 '(require-final-newline t)
 '(resize-mini-windows t)
 '(ring-bell-function 'ignore)
 '(rtags-completions-enabled t)
 '(rtags-imenu-syntax-highlighting 10)
 '(ruby-insert-encoding-magic-comment nil)
 '(sh-guess-basic-offset t)
 '(same-window-buffer-names
   '("*eshell*" "*shell*" "*mail*" "*inferior-lisp*" "*ielm*" "*scheme*"))
 '(save-abbrevs 'silently)
 '(save-interprogram-paste-before-kill t)
 '(savehist-additional-variables '(search-ring
                                   regexp-search-ring
                                   kill-ring
                                   comint-input-ring))
 '(savehist-autosave-interval 60)
 '(auto-window-vscroll nil)
 '(hscroll-margin 5)
 '(hscroll-step 5)
 '(scroll-preserve-screen-position 'always)
 '(send-mail-function 'smtpmail-send-it)
 '(sentence-end-double-space nil)
 '(set-mark-command-repeat-pop t)
 '(shell-completion-execonly nil)
 '(shell-input-autoexpand nil)
 '(sp-autoskip-closing-pair 'always)
 '(sp-hybrid-kill-entire-symbol nil)
 '(truncate-lines nil)
 '(tab-always-indent 'complete)
 '(term-input-autoexpand t)
 '(term-input-ignoredups t)
 '(term-input-ring-file-name t)
 '(tramp-default-proxies-alist '(((regexp-quote (system-name)) nil nil)
                                 (nil "\\`root\\'" "/ssh:%h:")
                                 (".*" "\\`root\\'" "/ssh:%h:")))
 '(tramp-default-user nil)
 '(text-quoting-style 'quote)
 '(tls-checktrust t)
 '(undo-limit 800000)
 '(uniquify-after-kill-buffer-p t)
 '(uniquify-buffer-name-style 'forward)
 '(uniquify-ignore-buffers-re "^\\*")
 '(uniquify-separator "/")
 '(use-dialog-box nil)
 '(use-file-dialog nil)
 '(version-control t)
 '(vc-allow-async-revert t)
 '(vc-command-messages nil)
 '(vc-git-diff-switches '("-w" "-U3"))
 '(vc-follow-symlinks nil)
 '(vc-ignore-dir-regexp
   "\\(\\(\\`\\(?:[\\/][\\/][^\\/]+[\\/]\\|/\\(?:net\\|afs\\|\\.\\.\\.\\)/\\)\\'\\)\\|\\(\\`/[^/|:][^/|]*:\\)\\)\\|\\(\\`/[^/|:][^/|]*:\\)")
 '(view-read-only t)
 '(view-inhibit-help-message t)
 '(visible-bell nil)
 '(visible-cursor nil)
 '(woman-imenu t)
 '(whitespace-line-column 80)
 '(whitespace-auto-cleanup t)
 '(whitespace-rescan-timer-time nil)
 '(whitespace-silent t)
 '(whitespace-style '(face
                      trailing
                      lines
                      space-before-tab
                      empty
                      lines-style))
 )
#+END_SRC

** Load custom file
   This file allows users to override above defaults.

   #+BEGIN_SRC emacs-lisp
(load custom-file 'noerror)
   #+END_SRC
* TODO hack browse-url.el to allow customizable open
* TODO add font-lock highlighting for @nethack@-like substitutions
* Setup use-package
  Setup use-package and some extra keywords for use-package-list.el to work
  correctly.

  First, let’s define some variables and autoloads to get rid of complaints from Flycheck.

  #+BEGIN_SRC emacs-lisp
(defvar use-package-enable-imenu-support)
(defvar use-package-expand-minimally)
(defvar use-package-always-defer)
(autoload 'use-package-autoload-keymap "use-package")
  #+END_SRC

  Then, set some use-package global variables.

  #+BEGIN_SRC emacs-lisp
(setq use-package-always-defer t
      use-package-expand-minimally t
      use-package-enable-imenu-support t)
  #+END_SRC

  Require package.el and initialize it if site-paths is not setup (meaning we’re
  outside the Nix expression).

  #+BEGIN_SRC emacs-lisp
(unless (featurep 'site-paths)
  (require 'package)
  (package-initialize)
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package))
  (setq use-package-always-ensure t))
  #+END_SRC

  Actually require use-package,

  #+BEGIN_SRC emacs-lisp
(require 'use-package)
  #+END_SRC

  and some more requires,

  #+BEGIN_SRC emacs-lisp
(require 'use-package-list nil t)
  #+END_SRC

  This is needed to recognize the =:name= keyword. See
  [[./lisp/use-package-list.el]] for documentation.

* Key bindings
  Using bind-key, setup some simple key bindings. None of these should overwrite
  Emacs’ default keybindings.

  #+BEGIN_SRC emacs-lisp
(require 'bind-key)

(bind-key "C-c C-u" 'rename-uniquely)
(bind-key "C-x ~" (lambda () (interactive) (find-file "~")))
(bind-key "C-x /" (lambda () (interactive) (find-file "/")))
(bind-key "C-c C-o" 'browse-url-at-point)
(bind-key "H-l" 'browse-url-at-point)
(bind-key "C-x 5 3" 'iconify-frame)
(bind-key "C-x 5 4" 'toggle-frame-fullscreen)
(bind-key "s-SPC" 'cycle-spacing)
(bind-key "C-c w w" 'whitespace-mode)

(bind-key "<C-return>" 'other-window)
(bind-key "C-z" 'delete-other-windows)
(bind-key "M-g l" 'goto-line)
(bind-key "<C-M-backspace>" 'backward-kill-sexp)
(bind-key "C-x t" 'toggle-truncate-lines)
(bind-key "C-x v H" 'vc-region-history)
(bind-key "C-c SPC" 'just-one-space)
(bind-key "C-c f" 'flush-lines)
(bind-key "C-c o" 'customize-option)
(bind-key "C-c O" 'customize-group)
(bind-key "C-c F" 'customize-face)
(bind-key "C-c q" 'fill-region)
(bind-key "C-c s" 'replace-string)
(bind-key "C-c u" 'rename-uniquely)
(bind-key "C-c z" 'clean-buffer-list)
(bind-key "C-c =" 'count-matches)
(bind-key "C-c ;" 'comment-or-uncomment-region)
(bind-key "C-c n" 'clean-up-buffer-or-region)
(bind-key "C-c d" 'duplicate-current-line-or-region)
(bind-key "M-+" 'text-scale-increase)
(bind-key "M-_" 'text-scale-decrease)

(bind-key "H-c" 'compile)
(bind-key "s-1" 'other-frame)
(bind-key "<s-return>" 'toggle-frame-fullscreen)

(bind-key "s-C-<left>" 'shrink-window-horizontally)
(bind-key "s-C-<right>" 'enlarge-window-horizontally)
(bind-key "s-C-<down>" 'shrink-window)
(bind-key "s-C-<up>" 'enlarge-window)

(require 'iso-transl)
(bind-key "' /" "′" iso-transl-ctl-x-8-map)
(bind-key "\" /" "″" iso-transl-ctl-x-8-map)
(bind-key "\" (" "“" iso-transl-ctl-x-8-map)
(bind-key "\" )" "”" iso-transl-ctl-x-8-map)
(bind-key "' (" "‘" iso-transl-ctl-x-8-map)
(bind-key "' )" "’" iso-transl-ctl-x-8-map)
(bind-key "4 < -" "←" iso-transl-ctl-x-8-map)
(bind-key "4 - >" "→" iso-transl-ctl-x-8-map)
(bind-key "4 b" "←" iso-transl-ctl-x-8-map)
(bind-key "4 f" "→" iso-transl-ctl-x-8-map)
(bind-key "4 p" "↑" iso-transl-ctl-x-8-map)
(bind-key "4 n" "↓" iso-transl-ctl-x-8-map)
(bind-key "<down>" "⇓" iso-transl-ctl-x-8-map)
(bind-key "<S-down>" "↓" iso-transl-ctl-x-8-map)
(bind-key "<left>" "⇐" iso-transl-ctl-x-8-map)
(bind-key "<S-left>" "←" iso-transl-ctl-x-8-map)
(bind-key "<right>" "⇒" iso-transl-ctl-x-8-map)
(bind-key "<S-right>" "→" iso-transl-ctl-x-8-map)
(bind-key "<up>" "⇑" iso-transl-ctl-x-8-map)
(bind-key "<S-up>" "↑" iso-transl-ctl-x-8-map)
(bind-key "," "…" iso-transl-ctl-x-8-map)
  #+END_SRC
* Hooks
  These are hook helps. These utils are needed at init stage and should always
  appear before other use-package declarations.
** add-hooks
  #+BEGIN_SRC emacs-lisp
(use-package add-hooks
  :commands (add-hooks add-hooks-pair))
  #+END_SRC
** hook-helpers
   #+BEGIN_SRC emacs-lisp
(use-package hook-helpers
  :commands (create-hook-helper
             define-hook-helper)
  :functions (make-hook-helper
              add-hook-helper
              hkhlp-normalize-hook-spec
              hkhlp-update-helper))
   #+END_SRC
* Misc stuff

  These are all small modes, hooks, and tweaks that are useful but really can’t
  be put into a package.

** Save buffers when frame focus is lost
   #+BEGIN_SRC emacs-lisp
(create-hook-helper save-on-unfocus ()
  :hooks (focus-out-hook)
  (save-some-buffers t))
   #+END_SRC
** =xterm-mouse-mode=
   Should only be enabled when inside a terminal.

   #+BEGIN_SRC emacs-lisp
(when (not (window-system))
  (xterm-mouse-mode +1))
   #+END_SRC

* Packages

  Alphabetical listing of all packages.

  No packages on the top level should have the :demand keyword. Each package
  should be setup as either commands, hooks, modes, or key bindings. Defer
  timers are allowed but should be used sparingly. Currently, these packages
  need defer timers:

- autorevert (1)
- company (2)
- delsel (2)
- dtrt-indent (3)
- flycheck (3)
- savehist (4)
- save-place (5)
- which-key (3)

  To resort, go to one of the package group headings and type C-c ^ (the
  shortcut for org-sort).

** Essentials

   Some of these are included in Emacs, others aren’t. All of them are necessary
   for using Emacs as a full featured IDE.

*** mb-depth

    #+BEGIN_SRC emacs-lisp
(use-package mb-depth
  :ensure nil
  :commands minibuffer-depth-indicate-mode
  :init (add-hook 'minibuffer-setup-hook 'minibuffer-depth-indicate-mode))
    #+END_SRC

*** ace window
    #+BEGIN_SRC emacs-lisp
(use-package ace-window
  :bind (("M-o" . other-window)
         ([remap next-multiframe-window] . ace-window)))
    #+END_SRC

*** aggressive-indent

    Automatically indent code as you type. Only enabled for Lisp currently.

    #+BEGIN_SRC emacs-lisp
(use-package aggressive-indent
  :commands aggressive-indent-mode
  :init (add-hooks '(((emacs-lisp-mode
                       inferior-emacs-lisp-mode
                       ielm-mode
                       lisp-mode
                       inferior-lisp-mode
                       lisp-interaction-mode
                       slime-repl-mode) . aggressive-indent-mode))))
    #+END_SRC

*** buffer-move

    #+BEGIN_SRC emacs-lisp
(use-package buffer-move
  :bind
  (("<M-S-up>" . buf-move-up)
   ("<M-S-down>" . buf-move-down)
   ("<M-S-left>" . buf-move-left)
   ("<M-S-right>" . buf-move-right)))
    #+END_SRC

*** Company

    #+BEGIN_SRC emacs-lisp
(use-package company
  :demand
  :bind (:map company-active-map
              ("TAB" .
               company-select-next-if-tooltip-visible-or-complete-selection)
              ("<tab>" .
               company-select-next-if-tooltip-visible-or-complete-selection)
              ("S-TAB" . company-select-previous)
              ("<backtab>" . company-select-previous)
              ("C-n" . company-select-next)
              ("C-p" . company-select-previous)
              )
  :commands (company-mode
             global-company-mode
             company-auto-begin
             company-complete-common-or-cycle)
  :config
  (setq company-backends
        '((company-css :with company-dabbrev)
          (company-nxml :with company-dabbrev)
          (company-elisp :with company-capf)
          (company-eshell-history :with company-capf company-files)
          (company-capf :with company-files company-keywords)
          (company-etags company-gtags company-clang company-cmake
                         :with company-dabbrev)
          (company-semantic :with company-dabbrev company-capf)
          (company-abbrev company-dabbrev company-keywords)
          ))
  (global-company-mode 1)
  (add-hook 'minibuffer-setup-hook 'company-mode)
  (add-hook 'minibuffer-setup-hook
            (lambda () (setq-local company-frontends
                                   '(company-preview-frontend))))
  (advice-add 'completion-at-point :override 'company-complete-common-or-cycle))
    #+END_SRC

**** company-anaconda                                              :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled

     #+BEGIN_SRC emacs-lisp
(use-package company-anaconda
  :commands company-anaconda
  :after company
  :config
  (add-to-list 'company-backends 'company-anaconda))
     #+END_SRC

**** company-auctex                                                :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package company-auctex
  :commands (company-auctex-labels
             company-auctex-bibs
             company-auctex-macros
             company-auctex-symbols
             company-auctex-environments)
  :after company
  :config
  (add-to-list 'company-backends 'company-auctex-labels)
  (add-to-list 'company-backends 'company-auctex-bibs)
  (add-to-list 'company-backends
               '(company-auctex-macros
                 company-auctex-symbols
                 company-auctex-environments)))
     #+END_SRC

**** company-eshell-history

     #+BEGIN_SRC emacs-lisp
(use-package company-eshell-history
  :ensure nil
  :commands company-eshell-history
  )
     #+END_SRC

**** company-irony                                                 :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package company-irony
  :after company
  :commands company-irony
  :config (add-to-list 'company-backends 'company-irony))
     #+END_SRC

**** company-jedi                                                  :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package company-jedi
  :after company
  :commands company-statistics-mode
  :init (add-hook 'company-mode-hook 'company-statistics-mode))
     #+END_SRC

**** company-shell                                                 :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package company-shell
  :after company
  :commands company-shell
  :config (add-to-list 'company-backends 'company-shell))
     #+END_SRC

**** company-statistics

     #+BEGIN_SRC emacs-lisp
(use-package company-statistics
  :commands company-statistics-mode
  :init (add-hook 'company-mode-hook 'company-statistics-mode))
     #+END_SRC

**** company-tern                                                  :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package company-tern
  :after company
  :commands company-tern
  :config (add-to-list 'company-backends 'company-tern))
     #+END_SRC

**** company-web                                                   :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package company-web
  :after company
  :commands (company-web-html company-web-slim company-web-jade)
  :config
  (add-to-list 'company-backends 'company-web-html)
  (add-to-list 'company-backends 'company-web-slim)
  (add-to-list 'company-backends 'company-web-jade))
     #+END_SRC

**** readline-complete                                             :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package readline-complete
  :after company
  :config
  (add-to-list 'company-backends 'company-readline)
  (add-hook 'rlc-no-readline-hook (lambda () (company-mode -1))))
     #+END_SRC

*** compile

    #+BEGIN_SRC emacs-lisp
(use-package compile
  :ensure nil
  :bind (("C-c C-c" . compile)
         ("M-O" . show-compilation)
         :map compilation-mode-map
         ("o" . compile-goto-error))
  :preface
  (defun show-compilation ()
    (interactive)
    (let ((compile-buf
           (catch 'found
             (dolist (buf (buffer-list))
               (if (string-match "\\*compilation\\*" (buffer-name buf))
                   (throw 'found buf))))))
      (if compile-buf
          (switch-to-buffer-other-window compile-buf)
        (call-interactively 'compile))))

  :config
  (create-hook-helper compilation-ansi-color-process-output ()
    :hooks (compilation-filter-hook)
    (ansi-color-process-output nil)
    (set (make-local-variable 'comint-last-output-start)
         (point-marker))))
    #+END_SRC

*** Counsel

    #+BEGIN_SRC emacs-lisp
(use-package counsel
  :commands (counsel-descbinds)
  :bind* (([remap execute-extended-command] . counsel-M-x)
          ([remap find-file] . counsel-find-file)
          ([remap describe-function] . counsel-describe-function)
          ([remap describe-variable] . counsel-describe-variable)
          ([remap info-lookup-symbol] . counsel-info-lookup-symbol)
          ([remap isearch-forward] . counsel-grep-or-swiper)
          ("<f1> l" . counsel-find-library)
          ("C-c j" . counsel-git-grep)
          ("C-c k" . counsel-ag)
          ("C-x l" . counsel-locate)
          ("C-M-i" . counsel-imenu)
          ("M-y" . counsel-yank-pop)
          ("C-c i 8" . counsel-unicode-char)
          )
  )
    #+END_SRC

**** counsel-projectile                                            :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package counsel-projectile
  :commands counsel-projectile-on
  :init (add-hook 'projectile-mode-hook 'counsel-projectile-on))
     #+END_SRC

*** diff-hl

    #+BEGIN_SRC emacs-lisp
(use-package diff-hl
  :commands (diff-hl-dir-mode diff-hl-mode diff-hl-magit-post-refresh
                              diff-hl-diff-goto-hunk)
  :bind (:map diff-hl-mode-map
              ("<left-fringe> <mouse-1>" . diff-hl-diff-goto-hunk))
  :init
  (add-hook 'prog-mode-hook 'diff-hl-mode)
  (add-hook 'vc-dir-mode-hook 'diff-hl-mode)
  (add-hook 'dired-mode-hook 'diff-hl-dir-mode)
  (add-hook 'magit-post-refresh-hook 'diff-hl-magit-post-refresh)
  )
    #+END_SRC

*** dired

    #+BEGIN_SRC emacs-lisp
(use-package dired
  :ensure nil
  :bind (("C-c J" . dired-double-jump)
         :map dired-mode-map
         ("C-c C-c" . compile)
         ("r" . browse-url-of-dired-file)
         ("e" . eshell)))
    #+END_SRC

**** dired-collapse                                                :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package dired-collapse
  :after dired
  :commands dired-collapse-mode
  :init (add-hook 'dired-mode-hook 'dired-collapse-mode))
     #+END_SRC

**** dired-column

  #+BEGIN_SRC emacs-lisp
(use-package dired-column
  :ensure nil
  :after dired
  :bind (:map dired-mode-map
              ("o" . dired-column-find-file)))
  #+END_SRC

**** dired-imenu

     #+BEGIN_SRC emacs-lisp
(use-package dired-imenu
  :after dired)
     #+END_SRC

**** dired-subtree

     #+BEGIN_SRC emacs-lisp
(use-package dired-subtree
  :after dired
  :bind (:map dired-mode-map
              ("<tab>" . dired-subtree-toggle)
              ("<backtab>" . dired-subtree-cycle)))
     #+END_SRC

**** dired-x

     #+BEGIN_SRC emacs-lisp
(use-package dired-x
  :ensure nil
  :after dired
  :commands (dired-omit-mode dired-hide-details-mode)
  :init
  (add-hook 'dired-mode-hook 'dired-omit-mode)
  (add-hook 'dired-mode-hook 'dired-hide-details-mode)
  :bind (("s-\\" . dired-jump-other-window)
         :map dired-mode-map
         (")" . dired-omit-mode)))
     #+END_SRC

*** dtrt-indent

    #+BEGIN_SRC emacs-lisp
(use-package dtrt-indent
  :commands dtrt-indent-mode
  :demand
  :config (dtrt-indent-mode 1))
    #+END_SRC

*** eldoc

    Provides some info for the thing at the point.

    #+BEGIN_SRC emacs-lisp
(use-package eldoc
  :ensure nil
  :commands eldoc-mode
  :init
  (add-hooks '(((emacs-lisp-mode
                 eval-expression-minibuffer-setup
                 lisp-mode-interactive-mode
                 typescript-mode) . eldoc-mode))))
    #+END_SRC

*** Emacs shell

    #+BEGIN_SRC emacs-lisp
(use-package eshell
  :ensure nil
  :bind (("C-c M-t" . eshell)
         ("C-c x" . eshell))
  :commands (eshell eshell-command eshell-bol)
  :preface
  (defun eshell-eol ()
    "Goes to the end of line."
    (interactive)
    (end-of-line))
  :init
  (defvar eshell-rebind-keys-alist)
  (add-to-list 'eshell-rebind-keys-alist '([(control 101)] . eshell-eol))
  (setq eshell-modules-list
        '(eshell-alias
          eshell-banner
          eshell-basic
          eshell-cmpl
          eshell-dirs
          eshell-glob
          eshell-hist
          eshell-ls
          eshell-pred
          eshell-prompt
          eshell-rebind
          eshell-script
          eshell-smart
          eshell-term
          eshell-tramp
          eshell-unix
          eshell-xtra)))
    #+END_SRC

**** esh-help

     #+BEGIN_SRC emacs-lisp
(use-package esh-help
  :commands esh-help-eldoc-command
  :init (create-hook-helper esh-help-setup ()
          :hooks (eshell-mode-hook)
          (make-local-variable 'eldoc-documentation-function)
          (setq eldoc-documentation-function 'esh-help-eldoc-command)
          (eldoc-mode)))
     #+END_SRC

**** em-dired

     #+BEGIN_SRC emacs-lisp
(use-package em-dired
  :ensure nil
  :commands (em-dired-mode em-dired-new)
  :init
  (add-hook 'eshell-mode-hook 'em-dired-mode)
  (advice-add 'eshell :before 'em-dired-new))
     #+END_SRC

*** Emacs speaks statistics

    #+BEGIN_SRC emacs-lisp
(use-package ess-site
  :ensure nil
  :name "ess"
  :commands R)
    #+END_SRC

*** esup

    #+BEGIN_SRC emacs-lisp
(use-package esup
  :commands esup)
    #+END_SRC

*** flycheck

    #+BEGIN_SRC emacs-lisp
(use-package flycheck
  :demand
  :commands global-flycheck-mode
  :config (global-flycheck-mode))
    #+END_SRC

**** flycheck-irony

     #+BEGIN_SRC emacs-lisp
(use-package flycheck-irony
  :commands flycheck-irony-setup
  :init (add-hook 'flycheck-mode-hook 'flycheck-irony-setup))
     #+END_SRC

*** flyspell

    #+BEGIN_SRC emacs-lisp
(use-package flyspell
  :ensure nil
  :commands (flyspell-mode flyspell-prog-mode)
  :config
  (setq flyspell-use-meta-tab nil)
  :init
  (add-hook 'text-mode-hook 'flyspell-mode)
  (add-hook 'prog-mode-hook 'flyspell-prog-mode))
    #+END_SRC

*** gnus

    #+BEGIN_SRC emacs-lisp
(use-package gnus
  :ensure nil
  :commands gnus
  :init
  (add-hook 'gnus-group-mode-hook 'gnus-topic-mode)
  (add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode))
    #+END_SRC

*** god-mode

    #+BEGIN_SRC emacs-lisp
(use-package god-mode
  :bind (("<escape>" . god-local-mode)))
    #+END_SRC

*** gud

    #+BEGIN_SRC emacs-lisp
(use-package gud
  :ensure nil
  :commands gud-gdb
  )
    #+END_SRC

*** help

    #+BEGIN_SRC emacs-lisp
(use-package help
  :ensure nil
  :bind (:map help-map
              ("C-v" . find-variable)
              ("C-k" . find-function-on-key)
              ("C-f" . find-function)
              ("C-l" . find-library)
              :map help-mode-map
              ("g" . revert-buffer-no-confirm))
  :preface
  (defun revert-buffer-no-confirm (&optional ignore-auto)
    "Revert current buffer without asking."
    (interactive (list (not current-prefix-arg)))
    (revert-buffer ignore-auto t nil)))
    #+END_SRC

*** helpful

    #+BEGIN_SRC emacs-lisp
(use-package helpful
  :bind (("C-h f" . helpful-callable)
         ("C-h v" . helpful-variable)))
    #+END_SRC

*** info                                                           :noexport:
    :PROPERTIES:
    :header-args: :tangle no
    :END:

    This is currently disabled.

    #+BEGIN_SRC emacs-lisp
(use-package info
  :ensure nil
  :bind ("C-h C-i" . info-lookup-symbol)
  )
    #+END_SRC

*** ivy

    #+BEGIN_SRC emacs-lisp
(use-package ivy
  :diminish ivy-mode
  :bind (("<f6>" . ivy-resume)
         ([remap list-buffers] . ivy-switch-buffer)
         :map ivy-minibuffer-map
         ("<escape>" . abort-recursive-edit))
  :commands ivy-mode
  :init
  (defvar projectile-completion-system)
  (defvar magit-completing-read-function)
  (defvar dumb-jump-selector)
  (defvar rtags-display-result-backend)
  (defvar projector-completion-system)
  (setq projectile-completion-system 'ivy
        magit-completing-read-function 'ivy-completing-read
        dumb-jump-selector 'ivy
        rtags-display-result-backend 'ivy
        projector-completion-system 'ivy)
  :config (ivy-mode 1))
    #+END_SRC

*** jka-compr                                                      :noexport:

    :PROPERTIES:
    :header-args: :tangle no
    :END:

    Add some binary plist decompression. This is currently disabled.

    #+BEGIN_SRC emacs-lisp
(use-package jka-compr
  :builtin
  :demand
  :config
  (add-to-list 'jka-compr-compression-info-list
               ["\\.plist$"
                "converting text XML to binary plist"
                "plutil"
                ("-convert" "binary1" "-o" "-" "-")
                "converting binary plist to text XML"
                "plutil"
                ("-convert" "xml1" "-o" "-" "-")
                nil nil "bplist"])
  (jka-compr-update))
    #+END_SRC

    :PROPERTIES:
    :header-args: :tangle no
    :END:

    Add some binary plist decompression. This is currently disabled.

    #+BEGIN_SRC emacs-lisp
(use-package jka-compr
  :builtin
  :demand
  :config
  (add-to-list 'jka-compr-compression-info-list
               ["\\.plist$"
                "converting text XML to binary plist"
                "plutil"
                ("-convert" "binary1" "-o" "-" "-")
                "converting binary plist to text XML"
                "plutil"
                ("-convert" "xml1" "-o" "-" "-")
                nil nil "bplist"])
  (jka-compr-update))
    #+END_SRC

    :PROPERTIES:
    :header-args: :tangle no
    :END:

    Add some binary plist decompression. This is currently disabled.

    #+BEGIN_SRC emacs-lisp
(use-package jka-compr
  :builtin
  :demand
  :config
  (add-to-list 'jka-compr-compression-info-list
               ["\\.plist$"
                "converting text XML to binary plist"
                "plutil"
                ("-convert" "binary1" "-o" "-" "-")
                "converting binary plist to text XML"
                "plutil"
                ("-convert" "xml1" "-o" "-" "-")
                nil nil "bplist"])
  (jka-compr-update))
    #+END_SRC

    :PROPERTIES:
    :header-args: :tangle no
    :END:

    Add some binary plist decompression. This is currently disabled.

    #+BEGIN_SRC emacs-lisp
(use-package jka-compr
  :builtin
  :demand
  :config
  (add-to-list 'jka-compr-compression-info-list
               ["\\.plist$"
                "converting text XML to binary plist"
                "plutil"
                ("-convert" "binary1" "-o" "-" "-")
                "converting binary plist to text XML"
                "plutil"
                ("-convert" "xml1" "-o" "-" "-")
                nil nil "bplist"])
  (jka-compr-update))
    #+END_SRC

    :PROPERTIES:
    :header-args: :tangle no
    :END:

    Add some binary plist decompression. This is currently disabled.

    #+BEGIN_SRC emacs-lisp
(use-package jka-compr
  :builtin
  :demand
  :config
  (add-to-list 'jka-compr-compression-info-list
               ["\\.plist$"
                "converting text XML to binary plist"
                "plutil"
                ("-convert" "binary1" "-o" "-" "-")
                "converting binary plist to text XML"
                "plutil"
                ("-convert" "xml1" "-o" "-" "-")
                nil nil "bplist"])
  (jka-compr-update))
    #+END_SRC
*** kill-or-bury-alive

    #+BEGIN_SRC emacs-lisp
(use-package kill-or-bury-alive
  :bind (([remap kill-buffer] . kill-or-bury-alive)))
    #+END_SRC

*** magit

    #+BEGIN_SRC emacs-lisp
(use-package magit
  :preface
  (defun magit-dired-other-window ()
    (interactive)
    (dired-other-window (magit-toplevel)))

  (defun magit-remote-github (username &optional args)
    (interactive (list (magit-read-string-ns "User name")
                       (magit-remote-arguments)))
    (let* ((url (magit-get "remote.origin.url"))
           (match (string-match "^https?://github\.com/[^/]*/\\(.*\\)" url)))
      (unless match
        (error "Not a github remote"))
      (let ((repo (match-string 1 url)))
        (apply 'magit-remote-add username (format "https://github.com/%s/%s"
                                                  username repo) args))))

  :commands (magit-clone
             magit-toplevel
             magit-read-string-ns
             magit-remote-arguments
             magit-get
             magit-remote-add
             magit-define-popup-action)

  :bind (("C-x g" . magit-status)
         ("C-x G" . magit-dispatch-popup)
         :map magit-mode-map
         ("C-o" . magit-dired-other-window))
  :init
  (defvar magit-last-seen-setup-instructions "1.4.0")
  :config
  (create-hook-helper magit-github-hook ()
    :hooks (magit-mode-hook)
    (magit-define-popup-action 'magit-remote-popup
      ?g "Add remote from github user name" #'magit-remote-github)))
    #+END_SRC

**** magithub                                                      :noexport:
    :PROPERTIES:
    :header-args: :tangle no
    :END:

    This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package magithub
  :commands magithub-feature-autoinject
  :init (add-hook 'magit-mode-hook 'magithub-feature-autoinject))
     #+END_SRC

*** mmm-mode

    #+BEGIN_SRC emacs-lisp
(use-package mmm-mode
  :commands mmm-mode
  :config
  (use-package mmm-auto
    :ensure nil
    :demand))
    #+END_SRC

*** multiple-cursors

    #+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :bind
  (("<C-S-down>" . mc/mark-next-like-this)
   ("<C-S-up>" . mc/mark-previous-like-this)
   ("C->" . mc/mark-next-like-this)
   ("C-<" . mc/mark-previous-like-this)
   ("M-<mouse-1>" . mc/add-cursor-on-click)
   ("C-c C-<"     . mc/mark-all-like-this)
   ("C-!"         . mc/mark-next-symbol-like-this)
   ("C-S-c C-S-c" . mc/edit-lines)))
    #+END_SRC

*** mwim

    #+BEGIN_SRC emacs-lisp
(use-package mwim
  :bind (([remap move-beginning-of-line] . mwim-beginning-of-code-or-line)
         ([remap move-end-of-line] . mwim-end-of-code-or-line)))
    #+END_SRC

*** org-mode

    #+BEGIN_SRC emacs-lisp
(use-package org
  :ensure nil
  :commands org-capture
  :bind* (("C-c c" . org-capture)
          ("C-c a" . org-agenda)
          ("C-c l" . org-store-link)
          ("C-c b" . org-iswitchb))
  :init
  (add-hook 'org-mode-hook 'auto-fill-mode)
  (add-hook 'org-mode-hook
            (lambda ()
              (add-hook 'completion-at-point-functions
                        'pcomplete-completions-at-point nil t)))
  :config
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((emacs-lisp . t)
     (lisp . t)
     (gnuplot . t)
     (dot . t)
     (ditaa . t)
     (R . t)
     (python . t)
     (ruby . t)
     (js . t)
     (clojure . t)
     (sh . t)))
  (use-package ox-latex
    :ensure nil
    :demand)
  (use-package ox-mediawiki
    :demand)
  (use-package ox-pandoc
    :demand)
  (use-package ox-reveal
    :demand)
  (use-package ox-ref
    :disabled
    :demand)
  (use-package ox-beamer
    :ensure nil
    :demand))
    #+END_SRC

**** toc-org

     #+BEGIN_SRC emacs-lisp
(use-package toc-org
  :commands toc-org-enable
  :init (add-hook 'org-mode-hook 'toc-org-enable))
     #+END_SRC

**** org-bullets                                                   :noexport:
    :PROPERTIES:
    :header-args: :tangle no
    :END:

    This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package org-bullets
  :commands org-bullets-mode
  :init (add-hook 'org-mode-hook 'org-bullets-mode))
     #+END_SRC

*** Projectile

    Setup projectile and link it with some other packages. This also adds an
    easymenu to make the "Projectile" modeline clickable.

    #+BEGIN_SRC emacs-lisp
(use-package projectile
  :bind-keymap* (("C-c p" . projectile-command-map)
                 ("s-p" . projectile-command-map))
  :commands (projectile-mode)
  :defer 1
  :config
  (put 'projectile-project-run-cmd 'safe-local-variable #'stringp)
  (put 'projectile-project-compilation-cmd 'safe-local-variable
       (lambda (a) (and (stringp a) (or (not (boundp 'compilation-read-command))
                                        compilation-read-command))))

  (projectile-mode)

  (use-package easymenu
    :ensure nil
    :config

    (easy-menu-define projectile-menu projectile-mode-map "Projectile"
      '("Projectile"
        :active nil
        ["Find file" projectile-find-file]
        ["Find file in known projects" projectile-find-file-in-known-projects]
        ["Find test file" projectile-find-test-file]
        ["Find directory" projectile-find-dir]
        ["Find file in directory" projectile-find-file-in-directory]
        ["Find other file" projectile-find-other-file]
        ["Switch to buffer" projectile-switch-to-buffer]
        ["Jump between implementation file and test file"
         projectile-toggle-between-implementation-and-test]
        ["Kill project buffers" projectile-kill-buffers]
        ["Recent files" projectile-recentf]
        ["Edit .dir-locals.el" projectile-edit-dir-locals]
        "--"
        ["Open project in dired" projectile-dired]
        ["Switch to project" projectile-switch-project]
        ["Switch to open project" projectile-switch-open-project]
        ["Discover projects in directory"
         projectile-discover-projects-in-directory]
        ["Search in project (grep)" projectile-grep]
        ["Search in project (ag)" projectile-ag]
        ["Replace in project" projectile-replace]
        ["Multi-occur in project" projectile-multi-occur]
        ["Browse dirty projects" projectile-browse-dirty-projects]
        "--"
        ["Run shell" projectile-run-shell]
        ["Run eshell" projectile-run-eshell]
        ["Run term" projectile-run-term]
        "--"
        ["Cache current file" projectile-cache-current-file]
        ["Invalidate cache" projectile-invalidate-cache]
        ["Regenerate [e|g]tags" projectile-regenerate-tags]
        "--"
        ["Compile project" projectile-compile-project]
        ["Test project" projectile-test-project]
        ["Run project" projectile-run-project]
        "--"
        ["Project info" projectile-project-info]
        ["About" projectile-version]
        ))))
    #+END_SRC

*** Proof General

    #+BEGIN_SRC emacs-lisp
(use-package proof-site
  :name "proofgeneral"
  :commands (proofgeneral proof-mode proof-shell-mode))
    #+END_SRC

*** Ripgrep

    #+BEGIN_SRC emacs-lisp
(use-package rg
  :commands rg)
    #+END_SRC

*** Shell

    #+BEGIN_SRC emacs-lisp
(use-package shell
  :ensure nil
  :commands (shell shell-mode)
  :bind ("C-c C-s" . shell)
  :init
  (add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
  (add-hook 'shell-mode-hook 'dirtrack-mode)
  (create-hook-helper use-histfile ()
    :hooks (shell-mode-hook)
    (turn-on-comint-history (getenv "HISTFILE"))))
    #+END_SRC

*** smart-hungry-delete

    #+BEGIN_SRC emacs-lisp
(use-package smart-hungry-delete
  :commands (smart-hungry-delete-default-c-mode-common-hook
             smart-hungry-delete-default-prog-mode-hook
             smart-hungry-delete-default-text-mode-hook)
  :bind (:map prog-mode-map
              ("<backspace>" . smart-hungry-delete-backward-char)
              ("C-d" . smart-hungry-delete-forward-char))
  :init
  (add-hook 'prog-mode-hook 'smart-hungry-delete-default-prog-mode-hook)
  (add-hook 'c-mode-common-hook 'smart-hungry-delete-default-c-mode-common-hook)
  (add-hook 'python-mode-hook 'smart-hungry-delete-default-c-mode-common-hook)
  (add-hook 'text-mode-hook 'smart-hungry-delete-default-text-mode-hook))
    #+END_SRC

*** smartparens

    #+BEGIN_SRC emacs-lisp
(use-package smartparens
  :commands (smartparens-mode
             show-smartparens-mode
             smartparens-strict-mode
             sp-local-tag
             sp-local-pair)
  :bind (:map smartparens-mode-map
              ("C-M-k" . sp-kill-sexp)
              ("C-M-f" . sp-forward-sexp)
              ("C-M-b" . sp-backward-sexp)
              ("C-M-n" . sp-up-sexp)
              ("C-M-d" . sp-down-sexp)
              ("C-M-u" . sp-backward-up-sexp)
              ("C-M-p" . sp-backward-down-sexp)
              ("C-M-w" . sp-copy-sexp)
              ("M-s" . sp-splice-sexp)
              ("C-}" . sp-forward-barf-sexp)
              ("C-{" . sp-backward-barf-sexp)
              ("M-S" . sp-split-sexp)
              ("M-J" . sp-join-sexp)
              ("C-M-t" . sp-transpose-sexp)
              ("C-M-<right>" . sp-forward-sexp)
              ("C-M-<left>" . sp-backward-sexp)
              ("M-F" . sp-forward-sexp)
              ("M-B" . sp-backward-sexp)
              ("C-M-a" . sp-backward-down-sexp)
              ("C-S-d" . sp-beginning-of-sexp)
              ("C-S-a" . sp-end-of-sexp)
              ("C-M-e" . sp-up-sexp)
              ("C-(" . sp-forward-barf-sexp)
              ("C-)" . sp-forward-slurp-sexp)
              ("M-(" . sp-forward-barf-sexp)
              ("M-)" . sp-forward-slurp-sexp)
              ("M-D" . sp-splice-sexp)
              ("C-<down>" . sp-down-sexp)
              ("C-<up>"   . sp-up-sexp)
              ("M-<down>" . sp-splice-sexp-killing-forward)
              ("M-<up>"   . sp-splice-sexp-killing-backward)
              ("C-<right>" . sp-forward-slurp-sexp)
              ("M-<right>" . sp-forward-barf-sexp)
              ("C-<left>"  . sp-backward-slurp-sexp)
              ("M-<left>"  . sp-backward-barf-sexp)
              ("C-k"   . sp-kill-hybrid-sexp)
              ("M-k"   . sp-backward-kill-sexp)
              ("M-<backspace>" . backward-kill-word)
              ("C-<backspace>" . sp-backward-kill-word)
              ([remap sp-backward-kill-word] . backward-kill-word)
              ("M-[" . sp-backward-unwrap-sexp)
              ("M-]" . sp-unwrap-sexp)
              ("C-x C-t" . sp-transpose-hybrid-sexp)
              :map smartparens-strict-mode-map
              ([remap c-electric-backspace] . sp-backward-delete-char)
              :map emacs-lisp-mode-map
              (";" . sp-comment))
  :init
  (add-hooks '(((emacs-lisp-mode
                 inferior-emacs-lisp-mode
                 ielm-mode
                 lisp-mode
                 inferior-lisp-mode
                 lisp-interaction-mode
                 slime-repl-mode
                 eval-expression-minibuffer-setup) . smartparens-strict-mode)))
  (add-hooks '(((emacs-lisp-mode
                 inferior-emacs-lisp-mode
                 ielm-mode
                 lisp-mode
                 inferior-lisp-mode
                 lisp-interaction-mode
                 slime-repl-mode) . show-smartparens-mode)))
  (add-hooks '(((web-mode
                 nxml-mode
                 html-mode) . smartparens-mode)))
  :config
  (use-package smartparens-html
    :ensure nil
    :demand)
  (use-package smartparens-config
    :ensure nil
    :demand)

  (sp-with-modes 'org-mode
    (sp-local-pair "*" "*"
                   :actions '(insert wrap)
                   :unless '(sp-point-after-word-p sp-point-at-bol-p)
                   :wrap "C-*" :skip-match 'sp--org-skip-asterisk)
    (sp-local-pair "_" "_" :unless '(sp-point-after-word-p) :wrap "C-_")
    (sp-local-pair "/" "/" :unless '(sp-point-after-word-p)
                   :post-handlers '(("[d1]" "SPC")))
    (sp-local-pair "~" "~" :unless '(sp-point-after-word-p)
                   :post-handlers '(("[d1]" "SPC")))
    (sp-local-pair "=" "=" :unless '(sp-point-after-word-p)
                   :post-handlers '(("[d1]" "SPC")))
    (sp-local-pair "«" "»"))

  (sp-with-modes
      '(java-mode c++-mode)
    (sp-local-pair "{" nil :post-handlers '(("||\n[i]" "RET")))
    (sp-local-pair "/*" "*/" :post-handlers '((" | " "SPC")
                                              ("* ||\n[i]" "RET"))))

  (sp-with-modes '(markdown-mode gfm-mode rst-mode)
    (sp-local-pair "*" "*" :bind "C-*")
    (sp-local-tag "2" "**" "**")
    (sp-local-tag "s" "```scheme" "```")
    (sp-local-tag "<"  "<_>" "</_>" :transform 'sp-match-sgml-tags))

  (sp-local-pair 'emacs-lisp-mode "`" nil :when '(sp-in-string-p))
  (sp-local-pair 'clojure-mode "`" "`" :when '(sp-in-string-p))
  (sp-local-pair 'minibuffer-inactive-mode "'" nil :actions nil)
  (sp-local-pair 'org-mode "~" "~" :actions '(wrap))
  (sp-local-pair 'org-mode "/" "/" :actions '(wrap))
  (sp-local-pair 'org-mode "*" "*" :actions '(wrap)))
    #+END_SRC

*** sudo-edit

    #+BEGIN_SRC emacs-lisp
(use-package sudo-edit
  :bind (("C-c C-r" . sudo-edit)))
    #+END_SRC

*** swiper

    #+BEGIN_SRC emacs-lisp
(use-package swiper)
    #+END_SRC

*** term

    #+BEGIN_SRC emacs-lisp
(use-package term
  :ensure nil
  :commands (term-mode term-char-mode term-set-escape-char)
  :init
  (add-hook 'term-mode-hook (lambda ()
                              (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")
                              (setq-local transient-mark-mode nil)
                              (auto-fill-mode -1)))
  :preface
  (defun my-term ()
    (interactive)
    (set-buffer (make-term "my-term" "zsh"))
    (term-mode)
    (term-char-mode)
    (term-set-escape-char ?\C-x)
    (switch-to-buffer "*my-term*"))
  :bind ("C-c t" . my-term))
    #+END_SRC

*** tramp

    #+BEGIN_SRC emacs-lisp
(use-package tramp
  :ensure nil
  :commands (tramp-tramp-file-p
             tramp-file-name-user
             tramp-file-name-real-host
             tramp-dissect-file-name))
    #+END_SRC

*** transpose-frame

    #+BEGIN_SRC emacs-lisp
(use-package transpose-frame
  :bind ("H-t" . transpose-frame))
    #+END_SRC

*** try

    #+BEGIN_SRC emacs-lisp
(use-package try
  :commands try)
    #+END_SRC

*** which-key

    #+BEGIN_SRC emacs-lisp
(use-package which-key
  :diminish which-key-mode
  :commands which-key-mode
  :demand
  :config (which-key-mode))
    #+END_SRC

*** whitespace-cleanup-mode

    #+BEGIN_SRC emacs-lisp
(use-package whitespace-cleanup-mode
  :commands whitespace-cleanup-mode
  :init (add-hook 'prog-mode-hook 'whitespace-cleanup-mode))
    #+END_SRC

*** whitespace-mode

    #+BEGIN_SRC emacs-lisp
(use-package whitespace-mode
  :ensure nil
  :commands whitespace-mode
  :init (add-hook 'prog-mode-hook 'whitespace-mode))
    #+END_SRC

*** yafolding

    #+BEGIN_SRC emacs-lisp
(use-package yafolding
  :commands yafolding-mode
  :init (add-hook 'prog-mode-hook 'yafolding-mode))
    #+END_SRC

** Built-ins

   These are available automatically, so these =use-package= blocks just
   configure them.

*** hideshow                                                       :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

    #+BEGIN_SRC emacs-lisp
(use-package hideshow
  :ensure nil
  :commands hs-minor-mode
  :init (add-hooks '(((c-mode-common
                       lisp-mode
                       emacs-lisp-mode
                       java-mode) . hs-minor-mode))))
    #+END_SRC

**** hideshowvis

     #+BEGIN_SRC emacs-lisp
(use-package hideshowvis
  :commands (hideshowvis-minor-mode hideshowvis-symbols)
  :init (add-hook 'prog-mode-hook 'hideshowvis-minor-mode))
     #+END_SRC

*** subword

    #+BEGIN_SRC emacs-lisp
(use-package subword
  :ensure nil
  :commands subword-mode
  :init (add-hook 'java-mode-hook 'subword-mode))
    #+END_SRC

*** align

    #+BEGIN_SRC emacs-lisp
(use-package align
  :bind (("C-c [" . align-regexp))
  :commands align
  :ensure nil)
    #+END_SRC

*** ansi-color

    Get color/ansi codes in compilation mode.

    #+BEGIN_SRC emacs-lisp
(use-package ansi-color
  :ensure nil
  :commands ansi-color-apply-on-region
  :init (create-hook-helper colorize-compilation-buffer ()
          :hooks (compilation-filter-hook)
          (let ((inhibit-read-only t))
            (ansi-color-apply-on-region (point-min) (point-max)))))
    #+END_SRC

*** autorevert

    #+BEGIN_SRC emacs-lisp
(use-package autorevert
  :ensure nil
  :demand
  :commands auto-revert-mode
  :init
  (add-hook 'dired-mode-hook 'auto-revert-mode)
  :config
  (global-auto-revert-mode t))
    #+END_SRC

*** bug-reference

    #+BEGIN_SRC emacs-lisp
(use-package bug-reference
  :ensure nil
  :commands bug-reference-prog-mode
  :init (add-hook 'prog-mode-hook 'bug-reference-prog-mode))
    #+END_SRC

**** bug-reference-github

     #+BEGIN_SRC emacs-lisp
(use-package bug-reference-github
  :commands bug-reference-github-set-url-format
  :init (add-hook 'prog-mode-hook 'bug-reference-github-set-url-format))
     #+END_SRC

*** comint

    #+BEGIN_SRC emacs-lisp
(use-package comint
  :ensure nil
  :bind
  (:map comint-mode-map
        ("C-r"       . comint-history-isearch-backward-regexp)
        ("s-k"       . comint-clear-buffer)
        ("M-TAB"     . comint-previous-matching-input-from-input)
        ("<M-S-tab>" . comint-next-matching-input-from-input))
  :commands (comint-next-prompt
             comint-write-input-ring
             comint-after-pmark-p
             comint-read-input-ring
             comint-send-input)
  :preface
  (defun turn-on-comint-history (history-file)
    (setq comint-input-ring-file-name history-file)
    (comint-read-input-ring 'silent))
  :config
  (add-hook 'kill-buffer-hook 'comint-write-input-ring)
  (create-hook-helper save-history ()
    :hooks (kill-emacs-hook)
    (dolist (buffer (buffer-list))
      (with-current-buffer buffer (comint-write-input-ring)))))
    #+END_SRC

*** delsel

    #+BEGIN_SRC emacs-lisp
(use-package delsel
  :ensure nil
  :demand
  :config (delete-selection-mode t))
    #+END_SRC

*** edebug

    #+BEGIN_SRC emacs-lisp
(use-package edebug
  :ensure nil)
    #+END_SRC

*** electric

    Setup these modes:

    - electric-quote
    - electric-indent
    - electric-layout

    #+BEGIN_SRC emacs-lisp
(use-package electric
  :ensure nil
  :commands (electric-quote-mode electric-indent-mode electric-layout-mode)
  :init
  (add-hook 'prog-mode-hook 'electric-quote-mode)
  (add-hook 'prog-mode-hook 'electric-indent-mode)
  (add-hook 'prog-mode-hook 'electric-layout-mode))
    #+END_SRC

**** elec-pair

     Setup electric-pair-mode for prog-modes. Also disable it when smartparens is
     setup.

     #+BEGIN_SRC emacs-lisp
(use-package elec-pair
  :ensure nil
  :commands electric-pair-mode
  :init
  (add-hook 'prog-mode-hook 'electric-pair-mode)
  (add-hook 'smartparens-mode-hook (lambda () (electric-pair-mode -1))))
     #+END_SRC

*** etags

    #+BEGIN_SRC emacs-lisp
(use-package etags
  :ensure nil
  :commands (tags-completion-table))
    #+END_SRC

*** executable

    #+BEGIN_SRC emacs-lisp
(use-package executable
  :ensure nil
  :commands executable-make-buffer-file-executable-if-script-p
  :init
  (add-hook 'after-save-hook
            'executable-make-buffer-file-executable-if-script-p))
    #+END_SRC

*** ffap

    #+BEGIN_SRC emacs-lisp
(use-package ffap
  :ensure nil
  )
    #+END_SRC

**** TODO handle line numbers like filename:line:col

*** goto-addr

    #+BEGIN_SRC emacs-lisp
(use-package goto-addr
  :ensure nil
  :commands (goto-address-prog-mode goto-address-mode)
  :init
  (add-hook 'prog-mode-hook 'goto-address-prog-mode)
  (add-hook 'git-commit-mode-hook 'goto-address-mode))
    #+END_SRC

*** grep

    #+BEGIN_SRC emacs-lisp
(use-package grep
  :ensure nil
  :bind (("M-s d" . find-grep-dired)
         ("M-s F" . find-grep)
         ("M-s G" . grep)))
    #+END_SRC

*** hippie-exp

    #+BEGIN_SRC emacs-lisp
(use-package hippie-exp
  :ensure nil
  :bind* (("M-/". hippie-expand)))
    #+END_SRC

*** ibuffer

    #+BEGIN_SRC emacs-lisp
(use-package ibuffer
  :ensure nil
  :bind ([remap switch-to-buffer] . ibuffer))
    #+END_SRC

*** imenu
**** imenu-anywhere

     #+BEGIN_SRC emacs-lisp
(use-package imenu-anywhere
  :bind (("C-c i" . imenu-anywhere)
         ("s-i" . imenu-anywhere)))
     #+END_SRC

**** imenu-list

     #+BEGIN_SRC emacs-lisp
(use-package imenu-list
  :commands imenu-list)
     #+END_SRC

*** newcomment

    #+BEGIN_SRC emacs-lisp
(use-package newcomment
  :ensure nil
  :bind ("s-/" . comment-or-uncomment-region))
    #+END_SRC

*** notmuch

    #+BEGIN_SRC emacs-lisp
(use-package notmuch
  :commands notmuch)
    #+END_SRC

*** prog-mode

    #+BEGIN_SRC emacs-lisp
(use-package prog-mode
  :ensure nil
  :commands (prettify-symbols-mode global-prettify-symbols-mode)
  :init
  (add-hook 'prog-mode-hook 'prettify-symbols-mode)
  (create-hook-helper prettify-symbols-prog ()
    ""
    :hooks (prog-mode-hook)
    (push '("<=" . ?≤) prettify-symbols-alist)
    (push '(">=" . ?≥) prettify-symbols-alist))
  (create-hook-helper prettify-symbols-lisp ()
    ""
    :hooks (lisp-mode-hook)
    (push '("/=" . ?≠) prettify-symbols-alist)
    (push '("sqrt" . ?√) prettify-symbols-alist)
    (push '("not" . ?¬) prettify-symbols-alist)
    (push '("and" . ?∧) prettify-symbols-alist)
    (push '("or" . ?∨) prettify-symbols-alist))
  (create-hook-helper prettify-symbols-c ()
    ""
    :hooks (c-mode-hook)
    (push '("<=" . ?≤) prettify-symbols-alist)
    (push '(">=" . ?≥) prettify-symbols-alist)
    (push '("!=" . ?≠) prettify-symbols-alist)
    (push '("&&" . ?∧) prettify-symbols-alist)
    (push '("||" . ?∨) prettify-symbols-alist)
    (push '(">>" . ?») prettify-symbols-alist)
    (push '("<<" . ?«) prettify-symbols-alist))
  (create-hook-helper prettify-symbols-c++ ()
    ""
    :hooks (c++-mode-hook)
    (push '("<=" . ?≤) prettify-symbols-alist)
    (push '(">=" . ?≥) prettify-symbols-alist)
    (push '("!=" . ?≠) prettify-symbols-alist)
    (push '("&&" . ?∧) prettify-symbols-alist)
    (push '("||" . ?∨) prettify-symbols-alist)
    (push '(">>" . ?») prettify-symbols-alist)
    (push '("<<" . ?«) prettify-symbols-alist)
    (push '("->" . ?→) prettify-symbols-alist))
  (create-hook-helper prettify-symbols-js ()
    ""
    :hooks (js2-mode-hook js-mode-hook)
    (push '("function" . ?λ) prettify-symbols-alist)
    (push '("=>" . ?⇒) prettify-symbols-alist)))
    #+END_SRC

*** savehist

    #+BEGIN_SRC emacs-lisp
(use-package savehist
  :ensure nil
  :demand
  :commands savehist-mode
  :config (savehist-mode 1))
    #+END_SRC

*** saveplace                                                      :noexport:
    :PROPERTIES:
    :header-args: :tangle no
    :END:

    This is currently disabled.

    #+BEGIN_SRC emacs-lisp
(use-package saveplace
  :ensure nil
  :commands save-place-mode
  :demand
  :config (save-place-mode t))
    #+END_SRC

*** server                                                         :noexport:
    :PROPERTIES:
    :header-args: :tangle no
    :END:

    This is currently disabled.

    #+BEGIN_SRC emacs-lisp
(use-package server
  :ensure nil
  :demand
  :commands server-start
  :config
  (add-hook 'after-init-hook 'server-start t)
  (add-hook 'server-switch-hook 'raise-frame))
    #+END_SRC

*** simple

    #+BEGIN_SRC emacs-lisp
(use-package simple
  :ensure nil
  :demand
  :bind
  (("C-`" . list-processes)
   :map minibuffer-local-map
   ("<escape>"  . abort-recursive-edit)
   ("M-TAB"     . previous-complete-history-element)
   ("<M-S-tab>" . next-complete-history-element))
  :commands visual-line-mode
  :init
  (add-hook 'text-mode-hook 'visual-line-mode)
  :config
  (column-number-mode))
    #+END_SRC

*** text-mode

    #+BEGIN_SRC emacs-lisp
(use-package text-mode
  :ensure nil
  :init
  (add-hook 'text-mode-hook 'turn-on-auto-fill))
    #+END_SRC

*** pp

    #+BEGIN_SRC emacs-lisp
(use-package pp
  :ensure nil
  :commands pp-eval-last-sexp
  :bind (([remap eval-expression] . pp-eval-expression))
  :init
  (global-unset-key (kbd "C-x C-e"))
  (create-hook-helper always-eval-sexp ()
    :hooks (lisp-mode-hook emacs-lisp-mode-hook)
    (define-key (current-local-map) (kbd "C-x C-e") 'pp-eval-last-sexp)))
    #+END_SRC

*** time

    #+BEGIN_SRC emacs-lisp
(use-package time
  :demand
  :config
  (display-time-mode)
  )
    #+END_SRC

*** tooltip

    #+BEGIN_SRC emacs-lisp
(use-package tooltip
  :ensure nil
  :demand
  :config
  (tooltip-mode -1))
    #+END_SRC

*** view

    #+BEGIN_SRC emacs-lisp
(use-package view
  :ensure nil
  :bind (:map view-mode-map
              ("n" . next-line)
              ("p" . previous-line)
              ("j" . next-line)
              ("k" . previous-line)
              ("l" . forward-char)
              ("f" . forward-char)
              ("b" . backward-char)))
    #+END_SRC

*** windmove

    #+BEGIN_SRC emacs-lisp
(use-package windmove
  :ensure nil
  :bind (("<s-down>" . windmove-down)
         ("<s-up>" . windmove-up)
         ))
    #+END_SRC

** Programming languages
   Each =use-package= declaration corresponds to =major modes= in Emacs lingo.
   Each language will at least one of these major modes as well as associated
   packages (for completion, syntax checking, etc.)

*** C/C++

    #+BEGIN_SRC emacs-lisp
(use-package cc-mode
  :ensure nil
  :mode (("\\.h\\(h?\\|xx\\|pp\\)\\'" . c++-mode)
         ("\\.m\\'" . c-mode)
         ("\\.c\\'" . c-mode)
         ("\\.cpp\\'" . c++-mode)
         ("\\.c++\\'" . c++-mode)
         ("\\.mm\\'" . c++-mode))
  :config
  (use-package c-eldoc
    :commands c-turn-on-eldoc-mode
    :init (add-hook 'c-mode-common-hook 'c-turn-on-eldoc-mode)))
    #+END_SRC

**** irony

     #+BEGIN_SRC emacs-lisp
(use-package irony
  :commands irony-mode
  :init (add-hooks '(((c++-mode c-mode objc-mode) . irony-mode))))
     #+END_SRC

**** irony-eldoc

     #+BEGIN_SRC emacs-lisp
(use-package irony-eldoc
  :commands irony-eldoc
  :init (add-hook 'irony-mode-hook 'irony-eldoc))
     #+END_SRC

**** ggtags

     #+BEGIN_SRC emacs-lisp
(use-package ggtags
  :ensure nil)
     #+END_SRC

**** rtags

     Rtags is started with C and C++ projects.

     #+BEGIN_SRC emacs-lisp
(use-package rtags
  :commands (rtags-start-process-unless-running
             rtags-enable-standard-keybindings)
  :init
  (create-hook-helper rtags-start ()
    :hooks (c-mode-common-hook c++-mode-common-hook)
    (when (not (tramp-tramp-file-p (buffer-file-name (current-buffer))))
      (rtags-start-process-unless-running)))

  :config
  (rtags-enable-standard-keybindings c-mode-base-map "\C-cr"))
     #+END_SRC

*** CoffeeScript

    #+BEGIN_SRC emacs-lisp
(use-package coffee-mode
  :mode (("\\.coffee\\'" . coffee-mode)))
    #+END_SRC

*** CSS

    #+BEGIN_SRC emacs-lisp
(use-package css-mode
  :ensure nil
  :mode "\\.css\\'"
  :commands css-mode
  :config
  (use-package css-eldoc
    :demand)
  )
    #+END_SRC

*** CSV

    #+BEGIN_SRC emacs-lisp
(use-package csv-mode
  :mode "\\.csv\\'")
    #+END_SRC

*** ELF

    #+BEGIN_SRC emacs-lisp
(use-package elf-mode
  :commands elf-mode
  :init (add-to-list 'magic-mode-alist (cons "ELF" 'elf-mode)))
    #+END_SRC

**** TODO use use-package’s :magic keyword

*** Go

    #+BEGIN_SRC emacs-lisp
(use-package go-mode
  :mode "\\.go\\'")
    #+END_SRC

**** go-eldoc

     #+BEGIN_SRC emacs-lisp
(use-package go-eldoc
  :commands go-eldoc-setup
  :init (add-hook 'go-mode-hook 'go-eldoc-setup))
     #+END_SRC

*** HAML

    #+BEGIN_SRC emacs-lisp
(use-package haml-mode
  :mode "\\.haml\\'")
    #+END_SRC

*** Haskell
**** intero

     #+BEGIN_SRC emacs-lisp
(use-package intero
  :commands intero-mode
  :preface
  (defun intero-mode-unless-global-project ()
    "Run intero-mode iff we're in a project with a stack.yaml"
    (unless (string-match-p
             (regexp-quote ".stack/global-project")
             (shell-command-to-string
              "stack path --project-root --verbosity silent"))
      (intero-mode)))
  :init
  (add-hook 'haskell-mode-hook 'intero-mode-unless-global-project)
  )
     #+END_SRC

**** ghc

     #+BEGIN_SRC emacs-lisp
(use-package ghc)
     #+END_SRC

**** haskell-mode

     #+BEGIN_SRC emacs-lisp
(use-package haskell-mode
  :mode (("\\.hs\\'" . haskell-mode)
         ("\\.cabal\\'" . haskell-cabal-mode))
  :commands haskell-indentation-moe
  :init
  (add-hook 'haskell-mode-hook 'haskell-indentation-mode)
  :config
  (use-package haskell-doc
    :ensure nil
    :demand))
     #+END_SRC

*** Java

    #+BEGIN_SRC emacs-lisp
(use-package java-mode
  :ensure nil)
    #+END_SRC

**** jdee

     #+BEGIN_SRC emacs-lisp
(use-package jdee
  :mode ("\\.java\\'" . jdee-mode)
  :commands jdee-mode
  :bind (:map jdee-mode-map
              ("<s-mouse-1>" . jdee-open-class-at-event)))
     #+END_SRC

*** JavaScript
**** indium

     #+BEGIN_SRC emacs-lisp
(use-package indium
  :mode ("\\.js\\'" . indium-mode)
  :commands (indium-mode indium-interaction-mode indium-scratch))
     #+END_SRC

**** js2-mode
     #+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :mode (("\\.js\\'" . js2-mode))
  :commands js2-imenu-extras-mode
  :init
  (add-hook 'js2-mode-hook 'js2-imenu-extras-mode))
     #+END_SRC

**** js3-mode

     #+BEGIN_SRC emacs-lisp
(use-package js3-mode
  :commands js3-mode)
     #+END_SRC

**** tern

     #+BEGIN_SRC emacs-lisp
(use-package tern
  :commands tern-mode
  :init (add-hook 'js2-mode-hook 'tern-mode))
     #+END_SRC

*** JSON

    #+BEGIN_SRC emacs-lisp
(use-package json-mode
  :mode (("\\.bowerrc$"     . json-mode)
         ("\\.jshintrc$"    . json-mode)
         ("\\.json_schema$" . json-mode)
         ("\\.json\\'" . json-mode))
  :config
  (make-local-variable 'js-indent-level))
    #+END_SRC

*** LaTeX
**** auctex

     Auctex provides some helpful tools for working with LaTeX.

     #+BEGIN_SRC emacs-lisp
(use-package tex-site
  :name "auctex"
  :commands (TeX-latex-mode
             TeX-mode
             tex-mode
             LaTeX-mode
             latex-mode)
  :mode ("\\.tex\\'" . TeX-latex-mode))
     #+END_SRC

*** Lisp

    #+BEGIN_SRC emacs-lisp
(use-package emacs-lisp-mode
  :ensure nil
  :interpreter (("emacs" . emacs-lisp-mode)))
    #+END_SRC

**** cider

     #+BEGIN_SRC emacs-lisp
(use-package cider)
     #+END_SRC

**** slime

     #+BEGIN_SRC emacs-lisp
(use-package slime)
     #+END_SRC

**** ielm

     #+BEGIN_SRC emacs-lisp
(use-package ielm
  :ensure nil
  :bind ("C-c :" . ielm))
     #+END_SRC

*** LLVM IR

    #+BEGIN_SRC emacs-lisp
(use-package llvm-mode
  :mode "\\.ll\\'")
    #+END_SRC

*** Lua
**** lua-mode

     #+BEGIN_SRC emacs-lisp
(use-package lua-mode
  :mode "\\.lua\\'")
     #+END_SRC

*** Mach-O

    #+BEGIN_SRC emacs-lisp
(use-package macho-mode
  :commands macho-mode
  :ensure nil
  :init
  (add-to-list 'magic-mode-alist '("\xFE\xED\xFA\xCE" . macho-mode))
  (add-to-list 'magic-mode-alist '("\xFE\xED\xFA\xCF" . macho-mode))
  (add-to-list 'magic-mode-alist '("\xCE\xFA\xED\xFE" . macho-mode))
  (add-to-list 'magic-mode-alist '("\xCF\xFA\xED\xFE" . macho-mode)))
    #+END_SRC

**** TODO use use-package’s :magic

*** Makefile
**** makefile-mode

     #+BEGIN_SRC emacs-lisp
(use-package makefile-mode
  :ensure nil
  :init
  (add-hook 'makefile-mode-hook 'indent-tabs-mode))
     #+END_SRC

*** Markdown
**** vmd-mode

     #+BEGIN_SRC emacs-lisp
(use-package vmd-mode
  :bind (:map markdown-mode-map ("C-x p" . vmd-mode)))
     #+END_SRC

**** markdown-mode

     #+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :mode
  (("\\.md\\'" . gfm-mode)
   ("\\.markdown\\'" . gfm-mode))
  :config
  (bind-key "'" "’" markdown-mode-map
            (not (or (markdown-code-at-point-p)
                     (memq 'markdown-pre-face
                           (face-at-point nil 'mult))))))
     #+END_SRC

*** Nix

    #+BEGIN_SRC emacs-lisp
(use-package nix-mode
  :mode "\\.nix\\'")
    #+END_SRC

**** nix-buffer

     #+BEGIN_SRC emacs-lisp
(use-package nix-buffer
  :commands nix-buffer)
     #+END_SRC

*** NROFF

    #+BEGIN_SRC emacs-lisp
(use-package nroff-mode
  :ensure nil
  :commands nroff-mode)
    #+END_SRC

*** PHP

    #+BEGIN_SRC emacs-lisp
(use-package php-mode
  :mode "\\.php\\'")
    #+END_SRC

*** Python

**** Anaconda

    #+BEGIN_SRC emacs-lisp
(use-package anaconda-mode
  :commands (anaconda-mode anaconda-eldoc-mode)
  :init
  (add-hook 'python-mode-hook 'anaconda-mode)
  (add-hook 'python-mode-hook 'anaconda-eldoc-mode))
    #+END_SRC

**** python-mode

     #+BEGIN_SRC emacs-lisp
(use-package python-mode
  :ensure nil
  :mode ("\\.py\\'" . python-mode)
  :interpreter ("python" . python-mode))
     #+END_SRC

**** elpy

     #+BEGIN_SRC emacs-lisp
(use-package elpy
  :mode ("\\.py\\'" . elpy-mode))
     #+END_SRC

*** Ruby

    #+BEGIN_SRC emacs-lisp
(use-package ruby-mode
  :ensure nil
  :mode ("\\.rb\\'" . ruby-mode)
  :interpreter ("ruby" . ruby-mode))
    #+END_SRC

*** Rust

    #+BEGIN_SRC emacs-lisp
(use-package rust-mode
  :mode "\\.rs\\'")
    #+END_SRC

*** SASS

    #+BEGIN_SRC emacs-lisp
(use-package sass-mode
  :mode "\\.sass\\'")
    #+END_SRC

*** Scala

    #+BEGIN_SRC emacs-lisp
(use-package scala-mode
  :interpreter ("scala" . scala-mode))
    #+END_SRC

*** SCSS

    #+BEGIN_SRC emacs-lisp
(use-package scss-mode
  :mode "\\.scss\\'")
    #+END_SRC

*** Shell

    #+BEGIN_SRC emacs-lisp
(use-package sh-script
  :ensure nil
  :preface
  (defun shell-command-at-point ()
    (interactive)
    (let ((start-point (save-excursion
                         (beginning-of-line)
                         (point))))
      (shell-command (buffer-substring start-point (point)))))
  :mode (("\\.*shellrc$" . sh-mode)
         ("\\.*shell_profile" . sh-mode)
         ("\\.zsh\\'" . sh-mode))
  :bind (:map sh-mode-map
              ("C-x C-e" . shell-command-at-point)))
    #+END_SRC

*** texinfo

    #+BEGIN_SRC emacs-lisp
(use-package texinfo
  :mode ("\\.texi\\'" . texinfo-mode))
    #+END_SRC

*** TypeScript

    #+BEGIN_SRC emacs-lisp
(use-package typescript-mode
  :mode "\\.ts\\'")
    #+END_SRC

**** tide

     #+BEGIN_SRC emacs-lisp
(use-package tide
  :commands (tide-setup tide-hl-identifier-mode)
  :init
  (add-hook 'typescript-mode-hook 'tide-setup)
  (add-hook 'typescript-mode-hook 'tide-hl-identifier-mode))
     #+END_SRC

*** Web

    #+BEGIN_SRC emacs-lisp
(use-package web-mode
  :mode (("\\.erb\\'" . web-mode)
         ("\\.mustache\\'" . web-mode)
         ("\\.html?\\'" . web-mode)
         ("\\.php\\'" . web-mode)
         ("\\.jsp\\'" . web-mode)))
    #+END_SRC

*** XML

    #+BEGIN_SRC emacs-lisp
(use-package nxml-mode
  :ensure nil
  :commands nxml-mode
  :init
  (defalias 'xml-mode 'nxml-mode))
    #+END_SRC

*** YAML

    #+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :mode "\\.ya?ml\\'")
    #+END_SRC

** Personal

   These are all available in [[./lisp]]. Eventually they should go into separate
   repositories.

*** dired-column
*** em-dired
*** installer
*** macho-mode
*** nethack

    #+BEGIN_SRC emacs-lisp
(use-package nethack
  :commands nethack
  :ensure nil)
    #+END_SRC

*** nix-fontify
*** set-defaults
*** use-package-list
** Other

   These should correspond to minor modes or helper functions. Some of them are
   more helpful than others but none are /essential/.

   Most of these are available in MELPA.

*** anything

    #+BEGIN_SRC emacs-lisp
(use-package anything
  :commands anything)
    #+END_SRC

*** apropospriate-theme

    This is the theme I use. However, it is not enabled by default.

    #+BEGIN_SRC emacs-lisp
(use-package apropospriate-theme
  :init
  (let ((filename (locate-library "apropospriate-theme")))
    (when filename
      (add-to-list 'custom-theme-load-path (file-name-directory filename)))))
    #+END_SRC

**** Usage
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     If you want to use apropospriate, try this in your init.el:

     #+BEGIN_SRC emacs-lisp
(when (and
       (fboundp 'custom-theme--load-path)
       (locate-file "apropospriate-dark-theme.el" (custom-theme--load-path)))
  (load-theme 'apropospriate-dark t))
     #+END_SRC

*** auto-compile                                                   :noexport:
    :PROPERTIES:
    :header-args: :tangle no
    :END:

    Auto-compile is currrently disabled.

    #+BEGIN_SRC emacs-lisp
(use-package auto-compile
  :demand
  :config
  (auto-compile-on-load-mode)
  (auto-compile-on-save-mode)
  (add-hook 'auto-compile-inhibit-compile-hook
            'auto-compile-inhibit-compile-detached-git-head))
    #+END_SRC

*** bm
    #+BEGIN_SRC emacs-lisp
(use-package bm)
    #+END_SRC

*** bool-flip

    #+BEGIN_SRC emacs-lisp
(use-package bool-flip
  :bind ("C-c C-b" . bool-flip-do-flip))
    #+END_SRC

*** browse-at-remote

    #+BEGIN_SRC emacs-lisp
(use-package browse-at-remote
  :commands browse-at-remote)
    #+END_SRC

*** checkbox                                                       :noexport:
    :PROPERTIES:
    :header-args: :tangle no
    :END:

    Checkbox is currently disabled.

    #+BEGIN_SRC emacs-lisp
(use-package checkbox
  :bind (("C-c C-t" . checkbox-toggle)))
    #+END_SRC

*** copy-as-format

    #+BEGIN_SRC emacs-lisp
(use-package copy-as-format
  :bind (("C-c w s" . copy-as-format-slack)
         ("C-c w g" . copy-as-format-github)))
    #+END_SRC

*** crux

    #+BEGIN_SRC emacs-lisp
(use-package crux
  :bind (("C-c D" . crux-delete-file-and-buffer)
         ("C-c C-e" . crux-eval-and-replace)
         ([shift return] . crux-smart-open-line)))
    #+END_SRC

*** easy-kill                                                      :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

    #+BEGIN_SRC emacs-lisp
(use-package easy-kill
  :bind (([remap kill-ring-save] . easy-kill)
         ([remap mark-sexp]      . easy-mark)))
    #+END_SRC

*** elfeed

    #+BEGIN_SRC emacs-lisp
(use-package elfeed
  :commands elfeed)
    #+END_SRC

*** expand-region

    #+BEGIN_SRC emacs-lisp
(use-package expand-region
  :bind (("C-=" . er/expand-region)))
    #+END_SRC

*** firestarter

    #+BEGIN_SRC emacs-lisp
(use-package firestarter
  :bind ("C-c m s" . firestarter-mode))
    #+END_SRC

*** focus

    #+BEGIN_SRC emacs-lisp
(use-package focus
  :bind ("C-c m f" . focus-mode))
    #+END_SRC

*** gist

    #+BEGIN_SRC emacs-lisp
(use-package gist
  :bind ("C-c C-g" . gist-region-or-buffer-private)
  :commands (gist-list gist-region gist-region-private gist-buffer
                       gist-buffer-private gist-region-or-buffer
                       gist-region-or-buffer-private))
    #+END_SRC

*** hl-todo

    #+BEGIN_SRC emacs-lisp
(use-package hl-todo
  :commands hl-todo-mode
  :init (add-hook 'prog-mode-hook 'hl-todo-mode))
    #+END_SRC

*** hookify

    #+BEGIN_SRC emacs-lisp
(use-package hookify
  :commands hookify)
    #+END_SRC

*** hydra                                                          :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

    #+BEGIN_SRC emacs-lisp
(use-package hydra
  :bind (("C-x t" . hydra-toggle/body)
         ("<f5>" . hydra-zoom/body)
         ("C-M-g" . hydra-error/body)
         ("C-c h c" . hydra-case/body)
         ("C-c h z" . hydra-zoom/body)
         ("C-c h e" . hydra-error/body)
         ("C-c h p" . hydra-projectile/body)
         ("C-c h w" . hydra-window/body))
  :config (hydra-add-font-lock)
  :preface
  (eval-and-compile
    (defhydra hydra-error (:color amaranth)
      "goto-error"
      ("h" flycheck-list-errors "first")
      ("j" flycheck-next-error "next")
      ("k" flycheck-previous-error "prev")
      ("v" recenter-top-bottom "recenter")
      ("q" nil "quit"))

    (defhydra hydra-zoom (:color blue :hint nil)
      "zoom"
      ("g" text-scale-increase "in")
      ("l" text-scale-decrease "out"))

    (defhydra hydra-case ()
      "case"
      ("c" string-inflection-all-cycle nil)
      ("c" string-inflection- nil)
      )

    (defhydra hydra-projectile (:color blue :columns 4)
      "Projectile"
      ("a" counsel-git-grep "ag")
      ("b" projectile-switch-to-buffer "switch to buffer")
      ("c" projectile-compile-project "compile project")
      ("d" projectile-find-dir "dir")
      ("f" projectile-find-file "file")
      ("g" ggtags-update-tags "update gtags")
      ("i" projectile-ibuffer "Ibuffer")
      ("K" projectile-kill-buffers "Kill all buffers")
      ("p" projectile-switch-project "switch")
      ("r" projectile-run-async-shell-command-in-root "run shell command")
      ("x" projectile-remove-known-project "remove known")
      ("X" projectile-cleanup-known-projects "cleanup non-existing")
      ("z" projectile-cache-current-file "cache current")
      ("q" nil "cancel")
      )

    (defhydra hydra-window (:color amaranth)
      "
  Move Point^^^^   Move Splitter   ^Ace^                       ^Split^
  --------------------------------------------------------------------------------
  _w_, _<up>_      Shift + Move    _C-a_: ace-window           _2_: split-window-below
  _a_, _<left>_                    _C-s_: ace-window-swap      _3_: split-window-right
  _s_, _<down>_                    _C-d_: ace-window-delete    ^ ^
  _d_, _<right>_                   ^   ^                       ^ ^
  You can use arrow-keys or WASD.
  "
      ("2" split-window-below nil)
      ("3" split-window-right nil)
      ("a" windmove-left nil)
      ("s" windmove-down nil)
      ("w" windmove-up nil)
      ("d" windmove-right nil)
      ("A" hydra-move-splitter-left nil)
      ("S" hydra-move-splitter-down nil)
      ("W" hydra-move-splitter-up nil)
      ("D" hydra-move-splitter-right nil)
      ("<left>" windmove-left nil)
      ("<down>" windmove-down nil)
      ("<up>" windmove-up nil)
      ("<right>" windmove-right nil)
      ("<S-left>" hydra-move-splitter-left nil)
      ("<S-down>" hydra-move-splitter-down nil)
      ("<S-up>" hydra-move-splitter-up nil)
      ("<S-right>" hydra-move-splitter-right nil)
      ("C-a" ace-window nil)
      ("u" hydra--universal-argument nil)
      ("C-s" (lambda () (interactive) (ace-window 4)) nil)
      ("C-d" (lambda () (interactive) (ace-window 16)) nil)
      ("q" nil "quit"))))
    #+END_SRC

*** idle-highlight-mode                                            :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

    #+BEGIN_SRC emacs-lisp
(use-package idle-highlight-mode
  :commands idle-highlight-mode
  :init (add-hooks '(((java-mode
                       emacs-lisp-mode
                       clojure-lisp-mode) . idle-highlight-mode))))
    #+END_SRC

*** keyfreq                                                        :noexport:
    :PROPERTIES:
    :header-args: :tangle no
    :END:

    This is currently disabled.

    #+BEGIN_SRC emacs-lisp
(use-package keyfreq
  :commands (keyfreq-mode keyfreq-autosave-mode)
  :init
  (keyfreq-mode 1)
  (keyfreq-autosave-mode 1))
    #+END_SRC

*** lsp-mode                                                       :noexport:
    :PROPERTIES:
    :header-args: :tangle no
    :END:

    This is currently disabled.

    #+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :commands lsp-mode
  :init (add-hook 'prog-major-mode #'lsp-mode)

  :config

  (use-package lsp-java
    :demand)
  (use-package lsp-haskell
    :demand)
  (use-package lsp-go
    :demand)
  (use-package lsp-python
    :demand)
  (use-package lsp-rust
    :demand))
    #+END_SRC

*** make-it-so                                                     :noexport:
    :PROPERTIES:
    :header-args: :tangle no
    :END:

    This is currently disabled.

    #+BEGIN_SRC emacs-lisp
(use-package make-it-so
  :commands mis-mode
  :init (add-hook 'dired-mode-hook 'mis-mode)
  (bind-keys :map dired-mode-map
             :prefix ","
             :prefix-map dired-make-it-so-map
             :prefix-docstring "Make it so map."
             ("," . make-it-so)
             ("f" . mis-finalize)
             ("a" . mis-abort)
             ("r" . mis-replace))
  (use-package make-mode
    :bind (:map makefile-mode-map ("<f5>" . mis-save-and-compile))))
    #+END_SRC

*** mediawiki

    #+BEGIN_SRC emacs-lisp
(use-package mediawiki)
    #+END_SRC

*** minimap

    #+BEGIN_SRC emacs-lisp
(use-package minimap
  :commands minimap-mode)
    #+END_SRC

*** multi-term

    #+BEGIN_SRC emacs-lisp
(use-package multi-term
  :bind (("C-. t" . multi-term-next)
         ("C-. T" . multi-term)))
    #+END_SRC

*** pabbrev                                                        :noexport:
    :PROPERTIES:
    :header-args: :tangle no
    :END:

    This is currently disabled.

    #+BEGIN_SRC emacs-lisp
(use-package pabbrev
  :commands pabbrev-mode
  :init (add-hook 'prog-mode-hook 'pabbrev-mode))
    #+END_SRC

*** page-break-lines

    #+BEGIN_SRC emacs-lisp
(use-package page-break-lines
  :commands page-break-lines-mode
  :init (add-hooks '(((doc-mode
                       help-mode
                       emacs-lisp-mode) . page-break-lines-mode))))
    #+END_SRC

*** pandoc-mode

    #+BEGIN_SRC emacs-lisp
(use-package pandoc-mode
  :commands (pandoc-mode pandoc-load-default-settings)
  :init
  (add-hook 'markdown-mode-hook 'pandoc-mode)
  (add-hook 'pandoc-mode-hook 'pandoc-load-default-settings))
    #+END_SRC

*** rainbow-delimiters

    #+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :commands rainbow-delimiters-mode
  :init (add-hooks '(((emacs-lisp-mode
                       inferior-emacs-lisp-mode
                       ielm-mode
                       lisp-mode
                       inferior-lisp-mode
                       lisp-interaction-mode
                       slime-repl-mode) . rainbow-delimiters-mode))))
    #+END_SRC

*** rainbow-mode

    #+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :commands rainbow-mode
  :init (add-hooks '(((emacs-lisp-mode
                       inferior-emacs-lisp-mode
                       ielm-mode
                       lisp-mode
                       inferior-lisp-mode
                       lisp-interaction-mode
                       slime-repl-mode) . rainbow-mode))))
    #+END_SRC

*** realgud

    #+BEGIN_SRC emacs-lisp
(use-package realgud
  :commands (realgud:jdb))
    #+END_SRC

*** repl-toggle                                                    :noexport:
    :PROPERTIES:
    :header-args: :tangle no
    :END:

    This is currently disabled.

    #+BEGIN_SRC emacs-lisp
(use-package repl-toggle
  :config
  (repl-toggle-mode)
  (setq rtog/mode-repl-alist
        '((emacs-lisp-mode . ielm)
          (ruby-mode . inf-ruby)
          (js2-mode . nodejs-repl)
          (rjsx-mode . nodejs-repl))))
    #+END_SRC

*** restclient

    #+BEGIN_SRC emacs-lisp
(use-package restclient
  :mode (("\\.rest\\'" . restclient-mode)
         ("\\.restclient\\'" . restclient-mode)))
    #+END_SRC

*** shrink-whitespace

    #+BEGIN_SRC emacs-lisp
(use-package shrink-whitespace
  :bind ("H-SPC" . shrink-whitespace))
    #+END_SRC

*** smart-shift

    #+BEGIN_SRC emacs-lisp
(use-package smart-shift
  :bind (("C-c <left>" . smart-shift-left)
         ("C-c <right>" . smart-shift-right)
         ("C-c <up>" . smart-shift-up)
         ("C-c <down>" . smart-shift-down)))
    #+END_SRC

*** string-inflection

    #+BEGIN_SRC emacs-lisp
(use-package string-inflection
  :bind (("C-c r r" . string-inflection-all-cycle)
         ("C-c r c" . string-inflection-camelcase)
         ("C-c r l" . string-inflection-lower-camelcase)
         ("C-c r u" . string-inflection-underscore)
         ("C-c r k" . string-inflection-kebab-case)
         ("C-c r J" . string-inflection-java-style-cycle)))
    #+END_SRC

*** undo-tree                                                      :noexport:
    :PROPERTIES:
    :header-args: :tangle no
    :END:

    This is currently disabled.

    #+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :config (global-undo-tree-mode 1)
  :bind (("C-c u" . undo-tree-visualize)
         ("s-z" . undo-tree-undo)
         ("s-Z" . undo-tree-redo))
  :diminish undo-tree-mode)
    #+END_SRC

*** vkill

    #+BEGIN_SRC emacs-lisp
(use-package vkill
  :bind ("C-x L" . vkill))
    #+END_SRC

*** ws-butler                                                      :noexport:
    :PROPERTIES:
    :header-args: :tangle no
    :END:

    This is currently disabled.

    #+BEGIN_SRC emacs-lisp
(use-package ws-butler
  :diminish ws-butler-mode
  :commands (ws-butler-mode)
  :init
  (add-hook 'prog-mode-hook 'ws-butler-mode))
    #+END_SRC

*** xah-math-input

    #+BEGIN_SRC emacs-lisp
(use-package xah-math-input
  :commands xah-math-input-mode)
    #+END_SRC

*** xterm-color

    #+BEGIN_SRC emacs-lisp
(use-package xterm-color
  :commands xterm-color-filter
  :init
  (add-hook 'comint-preoutput-filter-functions 'xterm-color-filter)
  (setq comint-output-filter-functions
        (remove 'ansi-color-process-output comint-output-filter-functions)))
    #+END_SRC

*** yasnippet                                                      :noexport:
    :PROPERTIES:
    :header-args: :tangle no
    :END:

    This is currently disabled.

    #+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :commands yas-minor-mode
  :init (add-hook 'prog-mode-hook 'yas-minor-mode)
  :config (yas-reload-all))
    #+END_SRC

*** ycmd                                                           :noexport:
    :PROPERTIES:
    :header-args: :tangle no
    :END:

    This is currently disabled.

    #+BEGIN_SRC emacs-lisp
(use-package ycmd
  :commands global-ycmd-mode
  :init
  (add-hook 'after-init-hook #'global-ycmd-mode)
  :config
  (add-hook 'ycmd-file-parse-result-hook 'flycheck-ycmd--cache-parse-results)
  (use-package ycmd-eldoc
    :ensure nil
    :demand
    :config
    (add-hook 'ycmd-mode-hook 'ycmd-eldoc-setup))
  (use-package flycheck-ycmd
    :ensure nil
    :demand
    :config
    (flycheck-ycmd-setup))
  (use-package company-ycmd
    :ensure nil
    :demand
    :config
    (company-ycmd-setup))
  )
    #+END_SRC
*** htmlize

    #+BEGIN_SRC emacs-lisp
(use-package htmlize)
    #+END_SRC

* Footer

  #+BEGIN_SRC emacs-lisp
(provide 'default)
;;; default.el ends here
  #+END_SRC
