#+TITLE: bauer: an Emacs+Nix IDE
#+AUTHOR: Matthew Bauer
#+EMAIL: mjbauer95@gmail.com
#+DESCRIPTION: My Emacs configuration
#+LANGUAGE: en
#+OPTIONS: c:nil d:t e:t f:t H:3 p:nil ':t *:t -:t ::t <:t \n:nil ^:{} |:t
#+OPTIONS: arch:nil author:t broken-links:nil
#+OPTIONS: creator:nil date:nil email:nil inline:nil num:nil pri:t
#+OPTIONS: prop:nil stat:t tags:nil tasks:nil tex:t timestamp:t title:t toc:nil
#+PROPERTY: header-args :cache yes
#+LATEX_HEADER: \usepackage{parskip}
#+LATEX_HEADER: \usepackage{inconsolata}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+LATEX_HEADER: \usepackage{alltt}
#+LATEX_HEADER: \usepackage{upquote}
#+TAGS: noexport notangle
#+STARTUP: showall hideblocks
#+HTML_HEAD: <link rel=stylesheet href="https://matthewbauer.us/style.css" />
#+EXPORT_FILE_NAME: index

# *Bauer’s automated, unified Emacs realm*

This ORG-mode file generates an Emacs configuration. I am calling it an
[[https://www.gnu.org/s/emacs/][Emacs]]×[[https://nixos.org][Nix]] IDE. That is, the Emacs configuration is /integrated/ with hardcoded
Nix store paths. This provides a kind of functional Emacs configuration. The
integration between Emacs and Nix comes with lots of useful side effects. The raw Org file can always be viewed [[https://matthewbauer.us/bauer/README.org][here]] and additional information is available on [[https://github.com/matthewbauer/bauer][GitHub]].

* Usage
  :PROPERTIES:
  :header-args: :tangle no
  :END:

** Demo

   If you already have Nix installed, you can demo this out easily. Just run the
   following,

   #+BEGIN_SRC sh
url="https://github.com/matthewbauer/bauer/archive/master.tar.gz"; \
expr="import (builtins.fetchTarball $url)"; \
   nix-shell -p nix-bundle --run "nix-run '$expr'"
   #+END_SRC

   If you don’t have Nix installed, you’re going to need to skip this step and
   just instasll directly.

** Installing/upgrading

   Once you’ve demo’d it, you can setup a permanent install. This is the script
   that I use to setup all of my new machines but anyone can also use it
   (provided you’re on a Unixy system).

   Run this command from your shell,

   #+BEGIN_SRC sh
curl https://matthewbauer.us/bootstrap.sh | sh
   #+END_SRC

   Alternatively, you can accomplish the same thing from Emacs by downloading
   [[https://raw.githubusercontent.com/matthewbauer/bauer/master/lisp/installer.el][installer.el]], loading it (=M‑x load‑file<RET>=) and running ‘install’
   (=M‑x install<RET>=). This process will take a little bit of time as
   everything is downloaded. After you restart Emacs, you’re environment should
   be successfully loaded.

   Once it’s installed, you can open Emacs at any time with this shortcut
   command,

   #+BEGIN_SRC sh
$HOME/.nix-profile/bin/run
   #+END_SRC

** Developing

   After you’ve installed it, it’s easy to make changes. By default, the
   configuration lives in =~/.local/share/bauer=. To make changes just follow
   this process,

   #+BEGIN_SRC sh
cd ~/.local/share/bauer
nix-build
./result/run
   #+END_SRC

   The last line will spawn an Emacs frame in the Git repo. Anything in there
   can be hacked. To rebuild the IDE just run =nix-build= again and respawn
   Emacs. Make any changes you want to [[./README.org][this document]] or any of the files in [[./lisp][the
   lisp folder]]. Make sure you commit your changes afterward by typing =C-c p v=,
   then =c-ac= (using Magit, of course). If you have forked this repo on GitHub,
   you can add it by typing =Mg= then your GitHub username within Magit. To push
   to it, just type =Pr= then find your username in the list and press enter.
   Pull requests are welcome through [[https://github.com/matthewbauer/bauer][GitHub]]!

** w/o Nix usage
   :PROPERTIES:
   :CUSTOM_ID: nonix
   :header-args: :tangle no
   :END:

   You can use ~bauer~ without Nix. This just gives you the unintegrated Emacs
   configuration. To get started, run the following.

   #+BEGIN_SRC sh
mkdir -p ~/.emacs.d
git clone https://github.com/matthewbauer/bauer ~/.emacs.d/bauer
   #+END_SRC

   Then, add the following to [[~/.emacs.d/init.el][your Emacs init file]],

   #+BEGIN_SRC emacs-lisp :tangle init.el
(defvar bauer-dir (expand-file-name ".emacs.d/bauer" (getenv "HOME")))
(defvar bauer-org (expand-file-name "README.org" bauer-dir))
(setq package-enable-at-startup nil)
(autoload 'org-babel-tangle-file "ob-tangle")
(if (locate-library "default")
    (unless (featurep 'default) (load "default" t))
  (let ((default-directory bauer-dir))
    (add-to-list 'load-path (expand-file-name "lisp" bauer-dir))
    (org-babel-tangle-file bauer-org "README.el" "emacs-lisp")
    (load-file (expand-file-name "README.el" bauer-dir))))
   #+END_SRC

* Emacs Init file
   :PROPERTIES:
   :header-args: :tangle yes
   :END:

   This is the main part of the IDE. It is written in Emacs lisp and will be
   loaded every time Emacs is started.

** Verify Emacs version ≥ 25

   Emacs 24 is unsupported currently. This will check to make sure Emacs 25+ is
   available.

   #+BEGIN_SRC emacs-lisp
(unless (>= emacs-major-version 25)
  (error "Need Emacs 25+ to work properly"))
   #+END_SRC

*** EXPERIMENTAL Emacs 24 support
   :PROPERTIES:
   :header-args: :tangle no
   :END:

    If Nix is unavailable and only Emacs 24 is installed for you, then you can
    try the experimental v24 branch. From the Git root of this repository, just
    run:

    #+BEGIN_SRC sh
git checkout v24
    #+END_SRC

    and make sure you have setup the Nix-less version in your [[~/.emacs.d/init.el][init.el]] file (see
    [[#nonix][w/o Nix usage directions]]).

** Increase GC

   Increasing GC is a common way to speed up Emacs. =gc-cons-threshold= sets at
   what point Emacs should invoke its garbage collector Some people set it to a
   really larger number permanently. This works well until the garbage is
   actually collected (then you have to wait a long time). I’ve decided to just
   set it temporarily to a large number so we only garbage collect once on
   startup. After that we reset it to the standard value. Read [[http://bling.github.io/blog/2016/01/18/why-are-you-changing-gc-cons-threshold/][@bling’s post]] for
   more info on this.

   #+BEGIN_SRC emacs-lisp
(setq gc-cons-threshold most-positive-fixnum)
(add-hook 'after-init-hook
          (lambda ()
            (garbage-collect)
            (setq gc-cons-threshold
                  (car (get 'gc-cons-threshold 'standard-value)))))
   #+END_SRC

** Autoloads & Misc.

   These are some autoloads and other defines that aren’t getting setup
   normally. Eventually this section should be removed but it leads to errors
   currently. FIXME!

   #+BEGIN_SRC emacs-lisp
(autoload 'tramp-tramp-file-p "tramp")
(eval-and-compile (autoload 'use-package-autoload-keymap "use-package"))
(autoload 'package-installed-p "package")
(define-obsolete-function-alias 'org-define-error 'define-error)
(when (and (string= window-system "mac")
		   (require 'mac-win nil t))
  (mac-set-frame-tab-group-property nil :tab-bar-visible-p nil))
   #+END_SRC

** Custom config

   [[./lisp/set-defaults.el][set-defaults]] provides an easy way to override the default custom files. This
   means that when you customize a variable it will appear as ‘standard’ even
   though it’s not what the package originally defined as the default. This is
   useful for an Emacs distribution to provide /better defaults/ while still
   letting the user override them. Look through the lispdoc of the package for
   documentation on how this works. Eventually, this will be added to MELPA for
   use in other Emacs distributions.

   #+BEGIN_SRC emacs-lisp
(require 'set-defaults)
   #+END_SRC

   Occasionally this block will error in cases where =./lisp= hasn’t been added
   correctly. Currently trying to find a way to handle this. FIXME

*** Better defaults

   These are some *better* defaults for Emacs. They shouldn’t require any
   packages to be installed to work (those go in use-package). In addition, they
   should take almost no time to run (meaning they probably shouldn’t have
   custom init hooks).

    #+BEGIN_SRC emacs-lisp
(set-defaults
 '(explicit-shell-file-name "/bin/bash")
 '(TeX-auto-save t)
 '(TeX-engine 'xetex)
 '(TeX-auto-untabify t)
 '(TeX-electric-escape t)
 '(TeX-parse-self t)
 '(ad-redefinition-action 'accept)
 '(apropos-do-all t)
 '(async-shell-command-buffer 'new-buffer)
 '(auth-source-save-behavior t)
 '(auto-revert-check-vc-info t)
 '(auto-revert-verbose nil)
 '(auto-save-visited-file-name t)
 '(backward-delete-char-untabify-method 'hungry)
 '(backup-directory-alist `(("." .
                             ,(expand-file-name "backup"
                                                user-emacs-directory))))
 '(bookmark-save-flag t)
 '(c-syntactic-indentation nil)
 '(comint-process-echoes t)
 '(comint-input-ignoredups t)
 '(comint-prompt-read-only t)
 '(comint-scroll-show-maximum-output nil)
 '(company-auto-complete (lambda () (and (company-tooltip-visible-p)
                                         (company-explicit-action-p))))
 '(company-frontends '(company-pseudo-tooltip-unless-just-one-frontend
                       company-preview-frontend
                       company-echo-metadata-frontend))
 '(company-continue-commands
   '(not save-buffer
         save-some-buffers
         save-buffers-kill-terminal
         save-buffers-kill-emacs
         comint-previous-matching-input-from-input
         comint-next-matching-input-from-input))
 '(company-require-match nil)
 '(company-selection-wrap-around t)
 '(compilation-always-kill t)
 '(compilation-ask-about-save nil)
 '(compilation-auto-jump-to-first-error nil)
 '(compilation-environment '("TERM=xterm-256color"))
 '(compilation-scroll-output nil)
 '(compilation-skip-threshold 2)
 '(completions-format 'vertical)
 '(completion-cycle-threshold 5)
 '(counsel-find-file-at-point t)
 '(counsel-mode-override-describe-bindings t)
 '(create-lockfiles nil)
 '(cursor-in-non-selected-windows nil)
 '(custom-safe-themes t)
 '(custom-buffer-done-kill t)
 '(custom-file (expand-file-name "settings.el" user-emacs-directory))
 '(custom-search-field nil)
 '(create-lockfiles nil)
 '(checkdoc-spellcheck-documentation-flag t)
 '(delete-old-versions t)
 '(delete-by-moving-to-trash t)
 '(dired-auto-revert-buffer t)
 '(dired-hide-details-hide-symlink-targets nil)
 '(dired-dwim-target t)
 '(dired-listing-switches "-alhv")
 '(dired-omit-verbose nil)
 '(dired-omit-files "^\\.\\|^#.*#$")
 '(dired-recursive-copies 'always)
 '(dired-recursive-deletes 'always)
 '(dired-subtree-line-prefix " ")
 '(dtrt-indent-verbosity 0)
 '(disabled-command-function nil)
 '(display-buffer-reuse-frames t)
 '(echo-keystrokes 0)
 '(enable-recursive-minibuffers t)
 '(erc-autoaway-idle-seconds 600)
 '(erc-autojoin-timing 'ident)
 '(erc-rename-buffers t)
 '(erc-fill-static-center 12)
 '(erc-fill-prefix "          ")
 '(erc-insert-timestamp-function 'erc-insert-timestamp-left)
 '(erc-interpret-mirc-color t)
 '(erc-join-buffer 'bury)
 '(erc-kill-buffer-on-part t)
 '(erc-kill-queries-on-quit t)
 '(erc-log-write-after-send t)
 '(erc-lurker-hide-list (quote ("JOIN" "NICK" "PART" "QUIT" "MODE")))
 '(erc-kill-server-buffer-on-quit t)
 '(erc-prompt (lambda nil (concat "[" (buffer-name) "]")))
 '(erc-prompt-for-password nil)
 '(erc-query-display 'buffer)
 '(erc-user-full-name (quote user-full-name))
 '(erc-server-coding-system '(utf-8 . utf-8))
 '(erc-timestamp-format "%H:%M ")
 '(erc-timestamp-only-if-changed-flag nil)
 '(erc-try-new-nick-p nil)
 '(eshell-banner-message "")
 '(eshell-cd-on-directory t)
 '(eshell-cmpl-autolist t)
 '(eshell-cmpl-cycle-completions nil)
 '(eshell-cmpl-cycle-cutoff-length 2)
 '(eshell-cmpl-ignore-case t)
 '(eshell-cp-interactive-query t)
 '(eshell-cp-overwrite-files nil)
 '(eshell-default-target-is-dot t)
 '(eshell-destroy-buffer-when-process-dies t)
 '(eshell-highlight-prompt t)
 '(eshell-hist-ignoredups t)
 '(eshell-history-size nil)
 '(eshell-list-files-after-cd t)
 '(eshell-ln-interactive-query t)
 '(eshell-ls-initial-args "-h")
 '(eshell-ls-dired-initial-args (quote ("-h")))
 '(eshell-mv-interactive-query t)
 '(eshell-output-filter-functions '(eshell-handle-ansi-color
                                    eshell-handle-control-codes
                                    eshell-watch-for-password-prompt
                                    ;; eshell-truncate-buffer
                                    ))
 '(eshell-plain-echo-behavior nil)
 '(eshell-review-quick-commands t)
 '(eshell-rm-interactive-query t)
 '(eshell-prompt-function
   (lambda () (concat
               (when (tramp-tramp-file-p default-directory)
                 (concat
                  (tramp-file-name-user
                   (tramp-dissect-file-name default-directory))
                  "@"
                  (tramp-file-name-real-host (tramp-dissect-file-name
                                              default-directory))
                  " "))
               (let ((dir (eshell/pwd)))
                 (if (string= dir (getenv "HOME")) "~"
                   (let ((dirname (file-name-nondirectory dir)))
                     (if (string= dirname "") "/" dirname))))
               (if (= (user-uid) 0) " # " " $ "))))
 '(eshell-stringify-t nil)
 '(eshell-visual-commands
   '("vi" "screen" "top" "less" "more" "lynx" "ncftp" "pine" "tin" "trn" "elm"
     "nano" "nethack" "telnet" "emacs" "emacsclient" "htop" "w3m" "links" "lynx"
     "elinks" "irrsi" "mutt" "finch" "newsbeuter" "pianobar"))
 '(eval-expression-print-length 20)
 '(eval-expression-print-level nil)
 '(explicit-shell-args '("-c" "export EMACS= INSIDE_EMACS=; stty echo; shell"))
 '(expand-region-contract-fast-key "j")
 '(find-ls-option (quote ("-print0 | xargs -P4 -0 ls -ldN" . "-ldN")))
 '(find-ls-subdir-switches "-ldN")
 '(flycheck-check-syntax-automatically '(save
                                         idle-change
                                         mode-enabled
                                         new-line))
 '(flycheck-display-errors-function
   'flycheck-display-error-messages-unless-error-list)
 '(flycheck-standard-error-navigation nil)
 '(flycheck-global-modes '(not erc-mode
                               message-mode
                               git-commit-mode
                               view-mode
                               outline-mode
                               text-mode
                               org-mode))
 '(flyspell-abbrev-p nil)
 '(flyspell-auto-correct nil)
 '(flyspell-highlight-properties nil)
 '(flyspell-incorrect-hook nil)
 '(flyspell-issue-welcome-flag nil)
 '(frame-title-format '(:eval
                        (if (buffer-file-name)
                            (abbreviate-file-name (buffer-file-name))
                          "%b")))
 '(global-auto-revert-non-file-buffers t)
 '(gnuplot-eldoc-mode t)
 '(gnuplot-inline-image-mode (quote dedicated))
 '(grep-command "egrep -nH -e ")
 '(grep-find-command
   "find . -name '*.v' -type f -print0 | xargs -P4 -0 egrep -nH ")
 '(haskell-ask-also-kill-buffers nil)
 '(haskell-interactive-mode-scroll-to-bottom t)
 '(haskell-process-args-stack-ghci
   (quote
    ("--ghci-options=-ferror-spans" "--ghci-options=-fno-diagnostics-show-caret" "--no-build" "--no-load")))
 '(haskell-process-prompt-restart-on-cabal-change nil)
 '(haskell-process-show-debug-tips nil)
 '(haskell-indent-spaces 4)
 '(haskell-indentation-ifte-offset 4)
 '(haskell-indentation-layout-offset 4)
 '(haskell-indentation-left-offset 4)
 '(haskell-indentation-starter-offset 4)
 '(haskell-indentation-where-post-offset 4)
 '(haskell-indentation-where-pre-offset 4)
 '(haskell-process-load-or-reload-prompt t)
 '(haskell-process-use-presentation-mode nil)
 '(highlight-nonselected-windows nil)
 '(hideshowvis-ignore-same-line nil)
 '(history-delete-duplicates t)
 '(history-length 200)
 '(ibuffer-default-display-maybe-show-predicates t)
 '(ibuffer-expert t)
 '(ibuffer-formats
   (quote
    ((mark modified read-only " "
           (name 16 -1)
           " "
           (size 6 -1 :right)
           " "
           (mode 16 16)
           " " filename)
     (mark " "
           (name 16 -1)
           " " filename))))
 '(ibuffer-maybe-show-regexps nil)
 '(ibuffer-show-empty-filter-groups nil)
 '(ibuffer-shrink-to-minimum-size t t)
 '(ibuffer-use-other-window t)
 '(iedit-toggle-key-default nil)
 '(imenu-auto-rescan t)
 '(indicate-empty-lines t)
 '(inhibit-startup-screen t)
 '(inhibit-startup-echo-area-message t)
 '(initial-major-mode 'fundamental-mode)
 '(initial-scratch-message "")
 '(ispell-extra-args '("--sug-mode=ultra"))
 '(ispell-silently-savep t)
 '(ispell-quietly t)
 '(ivy-count-format "\"\"")
 '(ivy-dynamic-exhibit-delay-ms 200)
 '(ivy-ignore-buffers
   (quote
    ("\\` " "\\`\\*git-monitor:" "\\`\\*magit-process:" "\\.elc$" 
	 "\\`\\.newsrc-dribble\\'" "\\`\\.newsrc.eld\\'")))
 '(ivy-re-builders-alist (quote ((t . ivy--regex-ignore-order))) t)
 '(ivy-wrap t)
 '(ivy-display-style nil)
 '(ivy-minibuffer-faces nil)
 '(ivy-use-virtual-buffers t)
 '(ivy-fixed-height-minibuffer t)
 '(jit-lock-defer-time 0.01)
 '(js2-mode-show-parse-errors nil)
 '(js2-mode-show-strict-warnings nil)
 '(js2-strict-missing-semi-warning nil)
 '(kill-do-not-save-duplicates t)
 '(kill-ring-max 500)
 '(kill-whole-line t)
 '(load-prefer-newer t)
 '(mac-allow-anti-aliasing t)
 '(mac-command-key-is-meta t)
 '(mac-command-modifier 'meta)
 '(mac-option-key-is-meta nil)
 '(mac-option-modifier 'super)
 '(mac-right-option-modifier nil)
 '(mac-frame-tabbing t)
 '(mac-system-move-file-to-trash-use-finder t)
 '(magit-log-auto-more t)
 '(magit-clone-set-remote\.pushDefault t)
 '(magit-diff-options nil)
 '(magit-ediff-dwim-show-on-hunks t)
 '(magit-fetch-arguments nil)
 '(magit-highlight-trailing-whitespace nil)
 '(magit-highlight-whitespace nil)
 '(magit-no-confirm t)
 '(magit-process-connection-type nil)
 '(magit-process-find-password-functions '(magit-process-password-auth-source))
 '(magit-process-popup-time 15)
 '(magit-push-always-verify nil)
 '(magit-save-repository-buffers 'dontask)
 '(magit-stage-all-confirm nil)
 '(magit-unstage-all-confirm nil)
 '(mmm-global-mode 'buffers-with-submode-classes)
 '(mmm-submode-decoration-level 2)
 '(minibuffer-prompt-properties '(read-only t
                                            cursor-intangible t
                                            face minibuffer-prompt))
 '(mwim-beginning-of-line-function 'beginning-of-line)
 '(mwim-end-of-line-function 'end-of-line)
 '(next-line-add-newlines nil)
 '(next-error-recenter t)
 '(notmuch-show-logo nil)
 '(nrepl-log-messages t)
 '(nsm-save-host-names t)
 '(ns-function-modifier 'hyper)
 '(ns-pop-up-frames nil)
 '(nxml-sexp-element-flag t)
 '(nxml-slash-auto-complete-flag t)
 '(org-confirm-babel-evaluate nil)
 '(org-blank-before-new-entry '((heading) (plain-list-item)))
 '(org-export-in-background nil)
 '(org-log-done 'time)
 '(org-return-follows-link t)
 '(org-special-ctrl-a/e t)
 '(org-src-fontify-natively t)
 '(org-src-preserve-indentation t)
 '(org-src-tab-acts-natively t)
 '(org-support-shift-select t)
 '(parens-require-spaces t)
 '(package-archives '(("melpa-stable" . "http://stable.melpa.org/packages/")
                      ("melpa" . "https://melpa.org/packages/")
                      ("org" . "http://orgmode.org/elpa/")
                      ("gnu" . "https://elpa.gnu.org/packages/")))
 '(pcomplete-compare-entries-function (quote file-newer-than-file-p))
 '(proof-auto-action-when-deactivating-scripting (quote retract))
 '(proof-autosend-enable nil)
 '(proof-electric-terminator-enable t)
 '(proof-fast-process-buffer nil)
 '(proof-script-fly-past-comments t)
 '(proof-shell-fiddle-frames nil)
 '(proof-splash-enable nil)
 '(proof-sticky-errors t)
 '(proof-tidy-response t)
 '(projectile-globally-ignored-files '(".DS_Store" "TAGS"))
 '(projectile-enable-caching t)
 '(projectile-mode-line
   '(:eval (if (and (ignore-errors (projectile-project-p))
                    (not (file-remote-p default-directory)))
               (format " Projectile[%s]" (projectile-project-name)) "")))
 '(projectile-ignored-project-function 'file-remote-p)
 '(projectile-switch-project-action 'projectile-dired)
 '(projectile-do-log nil)
 '(projectile-verbose nil)
 '(reb-re-syntax 'string)
 '(read-buffer-function (quote ido-read-buffer))
 '(require-final-newline t)
 '(resize-mini-windows t)
 '(ring-bell-function 'ignore)
 '(rtags-completions-enabled t)
 '(rtags-imenu-syntax-highlighting 10)
 '(ruby-insert-encoding-magic-comment nil)
 '(sh-guess-basic-offset t)
 '(same-window-buffer-names
   '("*eshell*" "*shell*" "*mail*" "*inferior-lisp*" "*ielm*" "*scheme*"))
 '(save-abbrevs 'silently)
 '(save-interprogram-paste-before-kill t)
 '(savehist-additional-variables '(search-ring
                                   regexp-search-ring
                                   kill-ring
                                   comint-input-ring
                                   kmacro-ring
                                   sr-history-registry
                                   file-name-history
                                   tablist-name-filter))
 '(savehist-autosave-interval 60)
 '(savehist-ignored-variables (quote (load-history 
                                      flyspell-auto-correct-ring kill-ring)))
 '(auto-window-vscroll nil)
 '(hscroll-margin 5)
 '(hscroll-step 5)
 '(scroll-preserve-screen-position 'always)
 '(scroll-bar-mode nil)
 '(send-mail-function 'smtpmail-send-it)
 '(sentence-end-double-space nil)
 '(set-mark-command-repeat-pop t)
 '(shell-completion-execonly nil)
 '(shell-input-autoexpand nil)
 '(show-paren-delay 0)
 '(sp-highlight-pair-overlay nil)
 '(sp-autoskip-closing-pair 'always)
 '(sp-hybrid-kill-entire-symbol nil)
 '(swiper-stay-on-quit t)
 '(switch-to-buffer-preserve-window-point t)
 '(truncate-lines nil)
 '(tab-always-indent 'complete)
 '(tool-bar-mode nil)
 '(term-input-autoexpand t)
 '(term-input-ignoredups t)
 '(term-input-ring-file-name t)
 '(tramp-default-proxies-alist '(((regexp-quote (system-name)) nil nil)
                                 (nil "\\`root\\'" "/ssh:%h:")
                                 (".*" "\\`root\\'" "/ssh:%h:")))
 '(tramp-default-user nil)
 '(text-quoting-style 'quote)
 '(tls-checktrust t)
 '(undo-limit 800000)
 '(uniquify-after-kill-buffer-p t)
 '(uniquify-buffer-name-style 'forward)
 '(uniquify-ignore-buffers-re "^\\*")
 '(uniquify-separator "/")
 '(use-dialog-box nil)
 '(use-file-dialog nil)
 '(use-package-always-defer t)
 '(use-package-enable-imenu-support t)
 '(use-package-expand-minimally nil)
 '(version-control t)
 '(vc-allow-async-revert t)
 '(vc-command-messages t)
 '(vc-git-diff-switches '("-w" "-U3"))
 '(vc-follow-symlinks nil)
 '(vc-ignore-dir-regexp
   (concat "\\(\\(\\`"
           "\\(?:[\\/][\\/][^\\/]+[\\/]\\|/\\(?:net\\|afs\\|\\.\\.\\.\\)/\\)"
            "\\'\\)\\|\\(\\`/[^/|:][^/|]*:\\)\\)\\|\\(\\`/[^/|:][^/|]*:\\)"))
 '(vc-make-backup-files t)
 '(view-read-only t)
 '(view-inhibit-help-message t)
 '(visible-bell t)
 '(woman-imenu t)
 '(x-stretch-cursor t)
 '(whitespace-line-column 80)
 '(whitespace-auto-cleanup t)
 '(whitespace-rescan-timer-time nil)
 '(whitespace-silent t)
 '(whitespace-style '(face
                      trailing
                      lines
                      space-before-tab
                      empty
                      lines-style))
 '(window-divider-default-bottom-width 1)
 '(window-divider-default-places (quote bottom-only))
 '(yas-triggers-in-field t)
 '(yas-wrap-around-region t)
 )
    #+END_SRC

*** Site paths

   Now, pull in generated paths from =site-paths.el=. Nix will generate this
   file automatically for us and different Emacs variables will be set to their
   Nix store derivations. Everything should work fine if you don’t have this
   available, though. If you are in Emacs and already have the IDE install you
   can inspect this file by typing =M-: (find-file (locate-library
   "site-paths"))=. It will look similar to a =settings.el= file where each line
   corresponds to a customizable variable. Unlike =settings.el=, each entry is
   path in the Nix store and we verify it exists before setting it.

   #+BEGIN_SRC emacs-lisp
(load "site-paths" :noerror)
   #+END_SRC

*** Set environment

    =set-envs= is provided by [[./lisp/set-defaults.el][set-defaults]]. We can use it like
    =custom-set-variables=, just it calls =setenv= instead of =setq=. All of
    these entries correspond to environment variables that we want to always be
    set in the Emacs process.

    #+BEGIN_SRC emacs-lisp
(set-envs
 '("EDITOR" "emacsclient -nw")
 '("LANG" "en_US.UTF-8")
 '("LC_ALL" "en_US.UTF-8")
 '("NODE_NO_READLINE" "1")
 '("PAGER" "cat")
 )
    #+END_SRC

*** Load custom file

    This file allows users to override the above defaults. This will mean you
    can use custom as you normally would in vanilla Emacs.

    #+BEGIN_SRC emacs-lisp
(load custom-file 'noerror)
    #+END_SRC

** Setup use-package

   [[https://github.com/jwiegley/use-package][use-package]] is an Emacs package by John Weigley to easily configure other
   Emacs packages. It’s quite useful and it will be used extensively in this
   project.

   Now to get =use-package= we will require =package.el= and initialize it if
   site-paths is not setup (meaning we’re outside the Nix expression). Because
   site-paths should be available (unless you don’t have Nix), we can skip this
   step. All of this is marked ‘eval-and-compile’ to make sure the compiler
   picks it up on build phase.

   So, there are basically two modes for using this configuration. One when
   packages are installed externally (through Nix) and another where they are
   installed internally. This is captured in the variable ‘needs-package-init’
   which will be t when we want to use the builtin package.el and will be nli
   when we want to just assume everything is available.

   #+BEGIN_SRC emacs-lisp
(eval-and-compile
  (setq needs-package-init (and (not (locate-library "site-paths"))
                                (not (and (boundp 'use-package-list--is-running)
                                          use-package-list--is-running)))))
   #+END_SRC

   First handle using =package.el=.

   #+BEGIN_SRC emacs-lisp
(when needs-package-init
  (require 'package)
  (package-initialize)
  (unless (package-installed-p 'use-package)
    (package-refresh-contents)
    (package-install 'use-package)))
#+END_SRC

   Actually require =use-package=,

   #+BEGIN_SRC emacs-lisp
(eval-and-compile
  (require 'delight)
  (require 'use-package)
  (require 'bind-key))
   #+END_SRC

   Now let’s handle the case where all of the packages are already provided.
   Bascially, we’ll prevent use-package from running ‘ensure’ on anything.

   #+BEGIN_SRC emacs-lisp
(eval-and-compile
  (setq use-package-always-ensure needs-package-init)
  (when (not needs-package-init)
    (setq use-package-ensure-function 'ignore
          package-enable-at-startup nil)))
   #+END_SRC

** Key bindings

   Using bind-key, setup some simple key bindings. None of these should
   overwrite Emacs’ default keybindings. Also, they should only require vanilla
   Emacs to work (non-vanilla Emacs key bindings should be put in their
   =use-package= declaration). These are meant to all be as close to vanilla
   Emacs as possible. I try to avoid extremely specific key binds here.

   #+BEGIN_SRC emacs-lisp
(bind-key "C-c C-u"         'rename-uniquely)
(bind-key "C-x ~"           (lambda () (interactive) (find-file "~")))
(bind-key "C-x /"           (lambda () (interactive) (find-file "/")))
(bind-key "C-c C-o"         'browse-url-at-point)
(bind-key "H-l"             'browse-url-at-point)
(bind-key "C-x 5 3"         'iconify-frame)
(bind-key "C-x 5 4"         'toggle-frame-fullscreen)
(bind-key "s-SPC"           'cycle-spacing)
(bind-key "C-c w w"         'whitespace-mode)

(bind-key "<C-return>"      'other-window)
(bind-key "C-z"             'delete-other-windows)
(bind-key "M-g l"           'goto-line)
(bind-key "<C-M-backspace>" 'backward-kill-sexp)
(bind-key "C-x t"           'toggle-truncate-lines)
(bind-key "C-x v H"         'vc-region-history)
(bind-key "C-c SPC"         'just-one-space)
(bind-key "C-c f"           'flush-lines)
(bind-key "C-c o"           'customize-option)
(bind-key "C-c O"           'customize-group)
(bind-key "C-c F"           'customize-face)
(bind-key "C-c q"           'fill-region)
(bind-key "C-c s"           'replace-string)
(bind-key "C-c u"           'rename-uniquely)
(bind-key "C-c z"           'clean-buffer-list)
(bind-key "C-c ="           'count-matches)
(bind-key "C-c ;"           'comment-or-uncomment-region)
(bind-key "C-c n"           'clean-up-buffer-or-region)
(bind-key "C-c d"           'duplicate-current-line-or-region)
(bind-key "M-+"             'text-scale-increase)
(bind-key "M-_"             'text-scale-decrease)

(bind-key "H-c"             'compile)
(bind-key "s-1"             'other-frame)
(bind-key "<s-return>"      'toggle-frame-fullscreen)

(bind-key "s-C-<left>"      'shrink-window-horizontally)
(bind-key "s-C-<right>"     'enlarge-window-horizontally)
(bind-key "s-C-<down>"      'shrink-window)
(bind-key "s-C-<up>"        'enlarge-window)

(require 'iso-transl)
(bind-key "' /"       "′" iso-transl-ctl-x-8-map)
(bind-key "\" /"      "″" iso-transl-ctl-x-8-map)
(bind-key "\" ("      "“" iso-transl-ctl-x-8-map)
(bind-key "\" )"      "”" iso-transl-ctl-x-8-map)
(bind-key "' ("       "‘" iso-transl-ctl-x-8-map)
(bind-key "' )"       "’" iso-transl-ctl-x-8-map)
(bind-key "4 < -"     "←" iso-transl-ctl-x-8-map)
(bind-key "4 - >"     "→" iso-transl-ctl-x-8-map)
(bind-key "4 b"       "←" iso-transl-ctl-x-8-map)
(bind-key "4 f"       "→" iso-transl-ctl-x-8-map)
(bind-key "4 p"       "↑" iso-transl-ctl-x-8-map)
(bind-key "4 n"       "↓" iso-transl-ctl-x-8-map)
(bind-key "<down>"    "⇓" iso-transl-ctl-x-8-map)
(bind-key "<S-down>"  "↓" iso-transl-ctl-x-8-map)
(bind-key "<left>"    "⇐" iso-transl-ctl-x-8-map)
(bind-key "<S-left>"  "←" iso-transl-ctl-x-8-map)
(bind-key "<right>"   "⇒" iso-transl-ctl-x-8-map)
(bind-key "<S-right>" "→" iso-transl-ctl-x-8-map)
(bind-key "<up>"      "⇑" iso-transl-ctl-x-8-map)
(bind-key "<S-up>"    "↑" iso-transl-ctl-x-8-map)
(bind-key ","         "…" iso-transl-ctl-x-8-map)

(bind-key "<S-s-up>"      'shrink-window)
(bind-key "<S-s-down>"    'enlarge-window)
   #+END_SRC

** Setup installer                                                 :noexport:
   :PROPERTIES:
   :header-args: :tangle no
   :END:
   
   Provides installation and upgrading functionality. You can upgrade the IDE at
   any time by typing =M-x upgrade= from within Emacs. You may have to restart
   Emacs for the upgrade to take place. See [[./lisp/installer.el][installer.el]] for
   documentation.

   *Note this is disabled currently*

   #+BEGIN_SRC emacs-lisp
(require 'installer nil t)
   #+END_SRC

** Packages

   Alphabetical listing of all Emacs packages needed by the IDE.

   To resort, go to one of the package group headings and type =C-c ^ a=.

*** Essentials

    Some of these are included in Emacs, others aren’t. All of them are
    necessary for using Emacs as a full featured IDE.

**** ace window
	 [[https://github.com/abo-abo/ace-window][GitHub]]

     #+BEGIN_SRC emacs-lisp
(use-package ace-window
  :bind (("M-o" . other-window)
         ([remap next-multiframe-window] . ace-window)))
     #+END_SRC

**** aggressive-indent
	 [[https://github.com/Malabarba/aggressive-indent-mode][GitHub]]

     Automatically indent code as you type. Only enabled for Lisp currently.

     #+BEGIN_SRC emacs-lisp
(use-package aggressive-indent
  :hook ((emacs-lisp-mode
          inferior-emacs-lisp-mode
          ielm-mode
          lisp-mode
          inferior-lisp-mode
          isp-interaction-mode
          slime-repl-mode) . aggressive-indent-mode))
     #+END_SRC

**** buffer-move
	 [[https://github.com/lukhas/buffer-move][GitHub]]

     #+BEGIN_SRC emacs-lisp
(use-package buffer-move
  :bind
  (("<M-S-up>" . buf-move-up)
   ("<M-S-down>" . buf-move-down)
   ("<M-S-left>" . buf-move-left)
   ("<M-S-right>" . buf-move-right)))
     #+END_SRC

**** Company :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

	 [[https://github.com/company-mode/company-mode][GitHub]]

	 [[http://company-mode.github.io][Website]]

     #+BEGIN_SRC emacs-lisp
(use-package company
  :commands global-company-mode
  :preface
  (defun company-complete-common-or-cycle-backward ()
	"Complete common prefix or cycle backward."
	(interactive)
	(company-complete-common-or-cycle -1))
  :bind (:map company-active-map
          ("RET" . company-complete-selection)
		  ([return] . company-complete-selection)
          ("TAB" . company-complete-common-or-cycle)
          ("<tab>" . company-complete-common-or-cycle)
          ("S-TAB" . company-complete-common-or-cycle-backward)
          ("<backtab>" . company-complete-common-or-cycle-backward)
          ("C-n" . company-select-next)
          ("C-p" . company-select-previous)

          ("C-/" . company-search-candidates)
          ("C-M-/" . company-filter-candidates)
          ("C-d" . company-show-doc-buffer)
        )
  :hook (minibuffer-setup-hook . company-mode)
  :config
  ;; (setq company-backends
  ;;      '((company-css :with company-dabbrev)
  ;;        (company-nxml :with company-dabbrev)
  ;;        (company-elisp :with company-capf)
  ;;        (company-eshell-history :with company-capf company-files)
  ;;        (company-capf :with company-files company-keywords)
  ;;        (company-etags company-gtags company-clang company-cmake
  ;;                       :with company-dabbrev)
  ;;        (company-semantic :with company-dabbrev company-capf)
  ;;        (company-abbrev company-dabbrev company-keywords)
  ;;        ))
  (global-company-mode 1)
  (add-hook 'minibuffer-setup-hook
            (lambda () (setq-local company-frontends
                                   '(company-preview-frontend))))
;; (advice-add 'completion-at-point :override 'company-complete-common-or-cycle)
 )
     #+END_SRC

***** company-anaconda                                             :noexport:
      :PROPERTIES:
      :header-args: :tangle no
      :END:

      This is currently disabled

      #+BEGIN_SRC emacs-lisp
(use-package company-anaconda
  :commands (company-anaconda)
  :after company
  :config
  (add-to-list 'company-backends 'company-anaconda))
      #+END_SRC

***** company-auctex                                               :noexport:
      :PROPERTIES:
      :header-args: :tangle no
      :END:

      This is currently disabled.

      #+BEGIN_SRC emacs-lisp
(use-package company-auctex
  :commands (company-auctex-labels
             company-auctex-bibs
             company-auctex-macros
             company-auctex-symbols
             company-auctex-environments)
  :after company
  :config
  (add-to-list 'company-backends 'company-auctex-labels)
  (add-to-list 'company-backends 'company-auctex-bibs)
  (add-to-list 'company-backends
               '(company-auctex-macros
                 company-auctex-symbols
                 company-auctex-environments)))
      #+END_SRC

***** company-eshell-history

      #+BEGIN_SRC emacs-lisp
(use-package company-eshell-history
  :ensure nil
  :commands (company-eshell-history)
  )
      #+END_SRC

***** company-irony                                                :noexport:
      :PROPERTIES:
      :header-args: :tangle no
      :END:

      This is currently disabled.

      #+BEGIN_SRC emacs-lisp
(use-package company-irony
  :after company
  :commands (company-irony)
  :config (add-to-list 'company-backends 'company-irony))
      #+END_SRC

***** company-jedi                                                 :noexport:
      :PROPERTIES:
      :header-args: :tangle no
      :END:

      This is currently disabled.

      #+BEGIN_SRC emacs-lisp
(use-package company-jedi
  :after company)
      #+END_SRC

***** company-shell                                                :noexport:
      :PROPERTIES:
      :header-args: :tangle no
      :END:

      This is currently disabled.

      #+BEGIN_SRC emacs-lisp
(use-package company-shell
  :after company
  :commands (company-shell)
  :config (add-to-list 'company-backends 'company-shell))
      #+END_SRC

***** company-statistics
      :PROPERTIES:
      :header-args: :tangle no
      :END:

      This is currently disabled.

      #+BEGIN_SRC emacs-lisp
(use-package company-statistics
  :hook (company-mode . company-statistics-mode))
      #+END_SRC

***** company-rtags 											   :noexport:
      :PROPERTIES:
      :header-args: :tangle no
      :END:

      This is currently disabled.

      #+BEGIN_SRC emacs-lisp
(use-package company-rtags
  :after company
  :commands (company-rtags)
  :config
  (setq rtags-autostart-diagnostics t)
  (rtags-diagnostics)
  (setq rtags-completions-enabled t)
  (add-to-list ’company-backends 'company-rtags))
      #+END_SRC

***** company-tern                                                 :noexport:
      :PROPERTIES:
      :header-args: :tangle no
      :END:

      This is currently disabled.

      #+BEGIN_SRC emacs-lisp
(use-package company-tern
  :after company
  :commands (company-tern)
  :config (add-to-list 'company-backends 'company-tern))
      #+END_SRC

***** company-web                                                  :noexport:
      :PROPERTIES:
      :header-args: :tangle no
      :END:

      This is currently disabled.

      #+BEGIN_SRC emacs-lisp
(use-package company-web
  :after company
  :commands (company-web-html
             company-web-slim
             company-web-jade)
  :config
  (add-to-list 'company-backends 'company-web-html)
  (add-to-list 'company-backends 'company-web-slim)
  (add-to-list 'company-backends 'company-web-jade))
      #+END_SRC

***** readline-complete                                            :noexport:
      :PROPERTIES:
      :header-args: :tangle no
      :END:

      This is currently disabled.

      #+BEGIN_SRC emacs-lisp
(use-package readline-complete
  :after company
  :config
  (add-to-list 'company-backends 'company-readline)
  (add-hook 'rlc-no-readline-hook (lambda () (company-mode -1))))
      #+END_SRC

**** compile

     #+BEGIN_SRC emacs-lisp
(use-package compile
  :ensure nil
  :bind (("C-c C-c" . compile)
         ("M-O" . show-compilation)
         :map compilation-mode-map
         ("o" . compile-goto-error))
  :preface
  (defun show-compilation ()
    (interactive)
    (let ((compile-buf
           (catch 'found
             (dolist (buf (buffer-list))
               (if (string-match "\\*compilation\\*" (buffer-name buf))
                   (throw 'found buf))))))
      (if compile-buf
          (switch-to-buffer-other-window compile-buf)
        (call-interactively 'compile))))

  (defun compilation-ansi-color-process-output ()
    (ansi-color-process-output nil)
    (set (make-local-variable 'comint-last-output-start)
         (point-marker)))
  :hook (compilation-filter . compilation-ansi-color-process-output))
     #+END_SRC

**** Counsel

	 [[https://github.com/abo-abo/swiper][GitHub]]

     Counsel is only enabled on non-Windows systems. This is due to an issue in
     counsel-find-file, see https://github.com/abo-abo/swiper/issues/773 for
     more info.

     #+BEGIN_SRC emacs-lisp
(use-package counsel
  :delight
  :commands (counsel-mode counsel-descbinds counsel-grep-or-swiper)

  ;; counsel doesn’t work well with windows drives
  ;; see https://github.com/abo-abo/swiper/issues/773
  :if (not (string= system-type "windows-nt"))

  :bind* (;; ([remap execute-extended-command] . counsel-M-x)
          ;; ([remap find-file] . counsel-find-file)
          ;; ([remap describe-function] . counsel-describe-function)
          ;; ([remap describe-variable] . counsel-describe-variable)
          ;; ([remap info-lookup-symbol] . counsel-info-lookup-symbol)
          ("<f1> l" . counsel-find-library)
          ("C-c j" . counsel-git-grep)
          ("C-c k" . counsel-rg)
          ("C-x l" . counsel-locate)
          ;; ("C-M-i" . counsel-imenu)
          ("M-y" . counsel-yank-pop)
          ("C-c i 8" . counsel-unicode-char)
          )
  ;; :init
  ;; (bind-key* [remap isearch-forward] 'counsel-grep-or-swiper
  ;;            (executable-find "grep"))
  :demand
  :config (counsel-mode)
  )
     #+END_SRC

***** counsel-projectile                                           :noexport:
      :PROPERTIES:
      :header-args: :tangle no
      :END:

      This is currently disabled.

      #+BEGIN_SRC emacs-lisp
(use-package counsel-projectile
  :hook (projectile-mode . counsel-projectile-on))
      #+END_SRC

***** ivy

     #+BEGIN_SRC emacs-lisp
(use-package ivy
  :bind (("<f6>" . ivy-resume)
         ([remap list-buffers] . ivy-switch-buffer)
         ("C-x C-q" . ivy-wgrep-change-to-wgrep-mode)
         ;; ("C-q C-o" . ivy-occur)
         ;; :map ivy-minibuffer-map
         ;; ("<escape>" . abort-recursive-edit)
         )
  :commands (ivy-mode)
  :init
  (defvar projectile-completion-system)
  (defvar magit-completing-read-function)
  (defvar dumb-jump-selector)
  (defvar rtags-display-result-backend)
  (defvar projector-completion-system)
  (setq projectile-completion-system 'ivy
        magit-completing-read-function 'ivy-completing-read
        dumb-jump-selector 'ivy
        rtags-display-result-backend 'ivy
        projector-completion-system 'ivy)
  :demand
  :delight
  :config (ivy-mode 1)
  )
     #+END_SRC

***** swiper
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package swiper)
     #+END_SRC

**** diff-hl

	 [[https://github.com/dgutov/diff-hl][GitHub]]

     #+BEGIN_SRC emacs-lisp
(use-package diff-hl
  :bind (:map diff-hl-mode-map
              ("<left-fringe> <mouse-1>" . diff-hl-diff-goto-hunk))
  :hook ((prog-mode . diff-hl-mode)
         (vc-dir-mode . diff-hl-mode)
         (dired-mode . diff-hl-dir-mode)
         (magit-post-refresh . diff-hl-magit-post-refresh)))
     #+END_SRC

**** dtrt-indent

	 [[https://github.com/jscheid/dtrt-indent][GitHub]]

     #+BEGIN_SRC emacs-lisp
(use-package dtrt-indent
  :demand
  :delight
  :commands dtrt-indent-mode
  :config (dtrt-indent-mode 1))
     #+END_SRC

**** Emacs speaks statistics

	 [[https://ess.r-project.org][Website]]

     #+BEGIN_SRC emacs-lisp
(use-package ess-site
  :ensure ess
  :no-require
  :commands (R))
     #+END_SRC

**** esup

	 [[https://github.com/jschaf/esup][GitHub]]

     #+BEGIN_SRC emacs-lisp
(use-package esup
  :commands (esup)
  :preface
  (defun init-profile ()
    (interactive)
    (esup (locate-library "default"))))
     #+END_SRC

**** Flycheck

	 [[https://github.com/flycheck/flycheck][Github]]

	 [[http://www.flycheck.org/][Website]]

     #+BEGIN_SRC emacs-lisp
(use-package flycheck
  :defer 4
  :commands global-flycheck-mode
  :config (global-flycheck-mode))
     #+END_SRC

***** flycheck-rtags
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

      #+BEGIN_SRC emacs-lisp
(use-package flycheck-rtags
  :preface
  (defun setup-flycheck-rtags ()
    (flycheck-select-checker 'rtags)
    (setq-local flycheck-highlighting-mode nil) ;; RTags creates more accurate overlays.
    (setq-local flycheck-check-syntax-automatically nil)
    (rtags-set-periodic-reparse-timeout 2.0)  ;; Run flycheck 2 seconds after being idle.
    )
  :hook ((c-mode c++-mode) . setup-flycheck-rtags))
      #+END_SRC

**** Gnus

	 [[http://www.gnus.org][Website]]

     #+BEGIN_SRC emacs-lisp
(use-package gnus
  :ensure nil
  :commands (gnus)
  :hook ((gnus-group-mode . gnus-topic-mode)
         (dired-mode . turn-on-gnus-dired-mode)))
     #+END_SRC

**** god-mode

	 [[https://github.com/chrisdone/god-mode][GitHub]]

     #+BEGIN_SRC emacs-lisp
(use-package god-mode
  :bind (("<escape>" . god-local-mode)))
     #+END_SRC

**** helpful

     #+BEGIN_SRC emacs-lisp
(use-package helpful
  :bind (("C-h f" . helpful-callable)
         ("C-h v" . helpful-variable)))
     #+END_SRC

**** magit

	 [[https://github.com/magit/magit][GitHub]]

	 [[https://magit.vc][Website]]

     #+BEGIN_SRC emacs-lisp
(use-package git-commit
  :hook ((git-commit-mode . flyspell-mode)
         (git-commit-mode . git-commit-save-message)
         (git-commit-mode . turn-on-auto-fill)))
(use-package magit
  :preface
  (defun magit-dired-other-window ()
    (interactive)
    (dired-other-window (magit-toplevel)))

  (defun magit-remote-github (username &optional args)
    (interactive (list (magit-read-string-ns "User name")
                       (magit-remote-arguments)))
    (let* ((url (magit-get "remote.origin.url"))
           (match (string-match "^https?://github\.com/[^/]*/\\(.*\\)" url)))
      (unless match
        (error "Not a github remote"))
      (let ((repo (match-string 1 url)))
        (apply 'magit-remote-add username (format "https://github.com/%s/%s"
                                                  username repo) args))))

  (defun magit-github-hook ()
    (magit-define-popup-action 'magit-remote-popup
      ?g "Add remote from github user name" #'magit-remote-github))
  :hook (magit-mode . magit-github-hook)
  :commands (magit-clone
             magit-toplevel
             magit-read-string-ns
             magit-remote-arguments
             magit-get
             magit-remote-add
             magit-define-popup-action)

  :bind (("C-x g" . magit-status)
         ("C-x G" . magit-dispatch-popup)
         :map magit-mode-map
         ("C-o" . magit-dired-other-window)))
     #+END_SRC

***** magithub :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

      #+BEGIN_SRC emacs-lisp
(use-package magithub
  ;;:hook (magit-mode . magithub-feature-autoinject)
  :after magit
  :config (magithub-feature-autoinject t))
      #+END_SRC

**** mmm-mode

	 [[https://github.com/purcell/mmm-mode][GitHub]]

     #+BEGIN_SRC emacs-lisp
(use-package mmm-mode
  :commands (mmm-mode)
  :config
  (use-package mmm-auto
    :ensure nil
    :demand))
     #+END_SRC

**** multiple-cursors
	 [[https://github.com/magnars/multiple-cursors.el][GitHub]]

     #+BEGIN_SRC emacs-lisp
(use-package multiple-cursors
  :bind
  (("<C-S-down>" . mc/mark-next-like-this)
   ("<C-S-up>" . mc/mark-previous-like-this)
   ("C->" . mc/mark-next-like-this)
   ("C-<" . mc/mark-previous-like-this)
   ("M-<mouse-1>" . mc/add-cursor-on-click)
   ("C-c C-<"     . mc/mark-all-like-this)
   ("C-!"         . mc/mark-next-symbol-like-this)
   ("C-S-c C-S-c" . mc/edit-lines)))
     #+END_SRC

**** mwim

	 [[https://github.com/alezost/mwim.el][GitHub]]

     #+BEGIN_SRC emacs-lisp
(use-package mwim
  :bind (([remap move-beginning-of-line] . mwim-beginning-of-code-or-line)
         ([remap move-end-of-line] . mwim-end-of-code-or-line)))
     #+END_SRC

**** Org

	 [[https://orgmode.org][Website]]

     #+BEGIN_SRC emacs-lisp
(use-package org
  ;; :ensure org-plus-contrib
  :ensure nil
  :bind* (("C-c c" . org-capture)
          ("C-c a" . org-agenda)
          ("C-c l" . org-store-link)
          ("C-c b" . org-iswitchb))
  :config
  (use-package ob-dot
    :ensure nil
    :demand)
  (use-package ox-latex
    :ensure nil
    :demand)
  (use-package ox-beamer
    :ensure nil
    :demand)
  (use-package ox-md
    :ensure nil
    :demand)
  (use-package org-static-blog
    :demand)
  (org-babel-do-load-languages 'org-babel-load-languages
                               '((sh . t)
                                 (emacs-lisp . t)
                                 (dot . t)
                                 (latex . t)
                                 ))
  )
     #+END_SRC

**** origami

     #+BEGIN_SRC emacs-lisp
(use-package origami
  :demand
  :commands (global-origami-mode)
  :config (global-origami-mode))
     #+END_SRC

**** Projectile
	 [[https://github.com/bbatsov/projectile][GitHub]]

     Setup projectile and link it with some other packages. This also adds an
     easymenu to make the "Projectile" modeline clickable.

     #+BEGIN_SRC emacs-lisp
(use-package projectile
  :commands projectile-mode
  :bind-keymap* (("C-c p" . projectile-command-map)
                 ("s-p" . projectile-command-map))
  :bind (:map projectile-command-map
         ("s r" . projectile-rg))
  :preface
  (defun projectile-rg ()
    "Run ripgrep in projectile."
    (interactive)
    (counsel-rg "" (projectile-project-root)))
  :defer 1
  :config
  (put 'projectile-project-run-cmd 'safe-local-variable #'stringp)
  (put 'projectile-project-compilation-cmd 'safe-local-variable
       (lambda (a) (and (stringp a) (or (not (boundp 'compilation-read-command))
                                        compilation-read-command))))

  (projectile-mode)

  (use-package easymenu
    :ensure nil
    :config

    (easy-menu-define projectile-menu projectile-mode-map "Projectile"
      '("Projectile"
        :active nil
        ["Find file" projectile-find-file]
        ["Find file in known projects" projectile-find-file-in-known-projects]
        ["Find test file" projectile-find-test-file]
        ["Find directory" projectile-find-dir]
        ["Find file in directory" projectile-find-file-in-directory]
        ["Find other file" projectile-find-other-file]
        ["Switch to buffer" projectile-switch-to-buffer]
        ["Jump between implementation file and test file"
         projectile-toggle-between-implementation-and-test]
        ["Kill project buffers" projectile-kill-buffers]
        ["Recent files" projectile-recentf]
        ["Edit .dir-locals.el" projectile-edit-dir-locals]
        "--"
        ["Open project in dired" projectile-dired]
        ["Switch to project" projectile-switch-project]
        ["Switch to open project" projectile-switch-open-project]
        ["Discover projects in directory"
         projectile-discover-projects-in-directory]
        ["Search in project (grep)" projectile-grep]
        ["Search in project (ag)" projectile-ag]
        ["Replace in project" projectile-replace]
        ["Multi-occur in project" projectile-multi-occur]
        ["Browse dirty projects" projectile-browse-dirty-projects]
        "--"
        ["Run shell" projectile-run-shell]
        ["Run eshell" projectile-run-eshell]
        ["Run term" projectile-run-term]
        "--"
        ["Cache current file" projectile-cache-current-file]
        ["Invalidate cache" projectile-invalidate-cache]
        ["Regenerate [e|g]tags" projectile-regenerate-tags]
        "--"
        ["Compile project" projectile-compile-project]
        ["Test project" projectile-test-project]
        ["Run project" projectile-run-project]
        "--"
        ["Project info" projectile-project-info]
        ["About" projectile-version]
        ))))
     #+END_SRC

**** Proof General

	 [[https://proofgeneral.github.io][Website]]

     #+BEGIN_SRC emacs-lisp
(use-package proof-site
  :ensure proofgeneral
  :no-require
  :disabled needs-package-init
  :commands (proofgeneral proof-mode proof-shell-mode))
     #+END_SRC

**** Ripgrep

     #+BEGIN_SRC emacs-lisp
(use-package rg
  :commands (rg))
     #+END_SRC

**** smart-hungry-delete

	 [[https://github.com/hrehfeld/emacs-smart-hungry-delete][GitHub]]

     #+BEGIN_SRC emacs-lisp
(use-package smart-hungry-delete
  :bind (:map prog-mode-map
              ("<backspace>" . smart-hungry-delete-backward-char)
              ("C-d" . smart-hungry-delete-forward-char))
  :hook ((prog-mode . smart-hungry-delete-default-prog-mode-hook)
         (c-mode-common . smart-hungry-delete-default-c-mode-common-hook)
         (python-mode . smart-hungry-delete-default-c-mode-common-hook)
         (text-mode . smart-hungry-delete-default-text-mode-hook)))
     #+END_SRC

**** Smartparens

	 [[https://github.com/Fuco1/smartparens][Website]]

     #+BEGIN_SRC emacs-lisp
(use-package smartparens
  :bind (:map smartparens-mode-map
              ("C-M-k" . sp-kill-sexp)
              ("C-M-f" . sp-forward-sexp)
              ("C-M-b" . sp-backward-sexp)
              ("C-M-n" . sp-up-sexp)
              ("C-M-d" . sp-down-sexp)
              ("C-M-u" . sp-backward-up-sexp)
              ("C-M-p" . sp-backward-down-sexp)
              ("C-M-w" . sp-copy-sexp)
              ("M-s" . sp-splice-sexp)
              ("C-}" . sp-forward-barf-sexp)
              ("C-{" . sp-backward-barf-sexp)
              ("M-S" . sp-split-sexp)
              ("M-J" . sp-join-sexp)
              ("C-M-t" . sp-transpose-sexp)
              ("C-M-<right>" . sp-forward-sexp)
              ("C-M-<left>" . sp-backward-sexp)
              ("M-F" . sp-forward-sexp)
              ("M-B" . sp-backward-sexp)
              ("C-M-a" . sp-backward-down-sexp)
              ("C-S-d" . sp-beginning-of-sexp)
              ("C-S-a" . sp-end-of-sexp)
              ("C-M-e" . sp-up-sexp)
              ("C-(" . sp-forward-barf-sexp)
              ("C-)" . sp-forward-slurp-sexp)
              ("M-(" . sp-forward-barf-sexp)
              ("M-)" . sp-forward-slurp-sexp)
              ("M-D" . sp-splice-sexp)
              ("C-<down>" . sp-down-sexp)
              ("C-<up>"   . sp-up-sexp)
              ("M-<down>" . sp-splice-sexp-killing-forward)
              ("M-<up>"   . sp-splice-sexp-killing-backward)
              ("C-<right>" . sp-forward-slurp-sexp)
              ("M-<right>" . sp-forward-barf-sexp)
              ("C-<left>"  . sp-backward-slurp-sexp)
              ("M-<left>"  . sp-backward-barf-sexp)
              ("C-k"   . sp-kill-hybrid-sexp)
              ("M-k"   . sp-backward-kill-sexp)
              ("M-<backspace>" . backward-kill-word)
              ("C-<backspace>" . sp-backward-kill-word)
              ([remap sp-backward-kill-word] . backward-kill-word)
              ("M-[" . sp-backward-unwrap-sexp)
              ("M-]" . sp-unwrap-sexp)
              ("C-x C-t" . sp-transpose-hybrid-sexp)
              :map smartparens-strict-mode-map
              ([remap c-electric-backspace] . sp-backward-delete-char)
              :map emacs-lisp-mode-map
              (";" . sp-comment))
  :hook (((emacs-lisp-mode
           inferior-emacs-lisp-mode
           ielm-mode
           lisp-mode
           inferior-lisp-mode
           lisp-interaction-mode
           slime-repl-mode
           eval-expression-minibuffer-setup) . smartparens-strict-mode)
         ((emacs-lisp-mode
           inferior-emacs-lisp-mode
           ielm-mode
           lisp-mode
           inferior-lisp-mode
           lisp-interaction-mode
           slime-repl-mode
           org-mode) . show-smartparens-mode)
         ((web-mode
           nxml-mode
           html-mode
           org-mode) . smartparens-mode))
  :config
  (use-package smartparens-html
    :ensure nil
    :demand)
  (use-package smartparens-config
    :ensure nil
    :demand)

  (sp-with-modes 'org-mode
    (sp-local-pair "*" "*"
                   :actions '(insert wrap)
                   :unless '(sp-point-after-word-p sp-point-at-bol-p)
                   :wrap "C-*" :skip-match 'sp--org-skip-asterisk)
    (sp-local-pair "_" "_" :unless '(sp-point-after-word-p) :wrap "C-_")
    (sp-local-pair "/" "/" :unless '(sp-point-after-word-p)
                   :post-handlers '(("[d1]" "SPC")))
    (sp-local-pair "~" "~" :unless '(sp-point-after-word-p)
                   :post-handlers '(("[d1]" "SPC")))
    (sp-local-pair "=" "=" :unless '(sp-point-after-word-p)
                   :post-handlers '(("[d1]" "SPC")))
    (sp-local-pair "«" "»"))

  (sp-with-modes
      '(java-mode c++-mode)
    (sp-local-pair "{" nil :post-handlers '(("||\n[i]" "RET")))
    (sp-local-pair "/*" "*/" :post-handlers '((" | " "SPC")
                                              ("* ||\n[i]" "RET"))))

  (sp-with-modes '(markdown-mode gfm-mode rst-mode)
    (sp-local-pair "*" "*" :bind "C-*")
    (sp-local-tag "2" "**" "**")
    (sp-local-tag "s" "```scheme" "```")
    (sp-local-tag "<"  "<_>" "</_>" :transform 'sp-match-sgml-tags))

  (sp-local-pair 'emacs-lisp-mode "`" nil :when '(sp-in-string-p))
  (sp-local-pair 'clojure-mode "`" "`" :when '(sp-in-string-p))
  (sp-local-pair 'minibuffer-inactive-mode "'" nil :actions nil)
  (sp-local-pair 'org-mode "~" "~" :actions '(wrap))
  (sp-local-pair 'org-mode "/" "/" :actions '(wrap))
  (sp-local-pair 'org-mode "*" "*" :actions '(wrap)))
     #+END_SRC

**** sudo-edit

	 [[https://github.com/nflath/sudo-edit][GitHub]]

     #+BEGIN_SRC emacs-lisp
(use-package sudo-edit
  :bind (("C-c C-r" . sudo-edit)))
     #+END_SRC

**** transpose-frame

     #+BEGIN_SRC emacs-lisp
(use-package transpose-frame
  :bind ("H-t" . transpose-frame))
     #+END_SRC

**** try
	 [[https://github.com/larstvei/Try][GitHub]]

     #+BEGIN_SRC emacs-lisp
(use-package try
  :commands (try))
     #+END_SRC

**** which-key

     #+BEGIN_SRC emacs-lisp
(use-package which-key
  :demand
  :commands which-key-mode
  :config (which-key-mode))
     #+END_SRC

**** whitespace-cleanup-mode

     #+BEGIN_SRC emacs-lisp
(use-package whitespace-cleanup-mode
  :hook (prog-mode . whitespace-cleanup-mode))
     #+END_SRC

*** Built-ins

    These are available automatically, so these =use-package= blocks just
    configure them.

**** align

     #+BEGIN_SRC emacs-lisp
(use-package align
  :bind (("C-c [" . align-regexp))
  :commands (align)
  :ensure nil)
     #+END_SRC

**** ansi-color

     Get color/ansi codes in compilation mode.

     #+BEGIN_SRC emacs-lisp
(use-package ansi-color
  :ensure nil
  :commands (ansi-color-apply-on-region)
  :hook (compilation-filter . colorize-compilation-buffer)
  :preface (defun colorize-compilation-buffer ()
			 (let ((inhibit-read-only t))
			   (ansi-color-apply-on-region (point-min) (point-max)))))
     #+END_SRC

**** autorevert

     #+BEGIN_SRC emacs-lisp
(use-package autorevert
  :ensure nil
  :commands global-auto-revert-mode
  :defer 4
  :hook (dired-mode . auto-revert-mode)
  :config
  (global-auto-revert-mode t))
     #+END_SRC

**** bug-reference

     #+BEGIN_SRC emacs-lisp
(use-package bug-reference
  :ensure nil
  :hook (prog-mode . bug-reference-prog-mode))
     #+END_SRC

***** bug-reference-github

      #+BEGIN_SRC emacs-lisp
(use-package bug-reference-github
  :hook (prog-mode . bug-reference-github-set-url-format))
      #+END_SRC

**** comint

     #+BEGIN_SRC emacs-lisp
(use-package comint
  :ensure nil
  ;; :bind
  ;; (:map comint-mode-map
  ;;       ("C-r"       . comint-history-isearch-backward-regexp)
  ;;       ("s-k"       . comint-clear-buffer)
  ;;       ("M-TAB"     . comint-previous-matching-input-from-input)
  ;;       ("<M-S-tab>" . comint-next-matching-input-from-input))
  :commands (comint-next-prompt
             comint-after-pmark-p
             comint-read-input-ring
             comint-send-input)
  :hook ((kill-buffer . comint-write-input-ring)
		 (kill-buffer . save-history))
  :preface
  (defun turn-on-comint-history (history-file)
    (setq comint-input-ring-file-name history-file)
    (comint-read-input-ring 'silent))
  (defun save-history ()
    (dolist (buffer (buffer-list))
      (with-current-buffer buffer (comint-write-input-ring)))))
     #+END_SRC

**** delsel

     #+BEGIN_SRC emacs-lisp
(use-package delsel
  :ensure nil
  :demand
  :commands delete-selection-mode
  :config (delete-selection-mode t))
     #+END_SRC

**** desktop
      :PROPERTIES:
      :header-args: :tangle no
      :END:

      This is currently disabled.

      #+BEGIN_SRC emacs-lisp
(use-package desktop
  )
      #+END_SRC

**** dired

     #+BEGIN_SRC emacs-lisp
(use-package dired
  :ensure nil
  :init (require 'dired)
  :bind (("C-c J" . dired-double-jump)
         :map dired-mode-map
         ("C-c C-c" . compile)
         ("r" . browse-url-of-dired-file)))
     #+END_SRC

***** dired-collapse                                               :noexport:
      :PROPERTIES:
      :header-args: :tangle no
      :END:

      This is currently disabled.

      #+BEGIN_SRC emacs-lisp
(use-package dired-collapse
  :after dired
  :hook (dired-mode . dired-collapse-mode))
      #+END_SRC

***** dired-column

      #+BEGIN_SRC emacs-lisp
(use-package dired-column
  :ensure nil
  :after dired
  :bind (:map dired-mode-map
              ("o" . dired-column-find-file)))
      #+END_SRC

***** dired-du
      :PROPERTIES:
      :header-args: :tangle no
      :END:

      This is currently disabled.

      #+BEGIN_SRC emacs-lisp
(use-package dired-du
  :after dired
  :commands (dired-du-mode))
      #+END_SRC


***** dired-imenu :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

      #+BEGIN_SRC emacs-lisp
(use-package dired-imenu
  :after dired)
      #+END_SRC

***** dired-subtree

      #+BEGIN_SRC emacs-lisp
(use-package dired-subtree
  :after dired
  :bind (:map dired-mode-map
              ("<tab>" . dired-subtree-toggle)
              ("<backtab>" . dired-subtree-cycle)))
      #+END_SRC

***** dired-x

      #+BEGIN_SRC emacs-lisp
(use-package dired-x
  :ensure nil
  :after dired
  :hook ((dired-mode . dired-omit-mode)
         (dired-mode . dired-hide-details-mode))
  :bind (("s-\\" . dired-jump-other-window)
         :map dired-mode-map
         (")" . dired-omit-mode)))
      #+END_SRC

**** edebug :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

      This is currently disabled.


     #+BEGIN_SRC emacs-lisp
(use-package edebug
  :ensure nil)
     #+END_SRC

**** eldoc

     Provides some info for the thing at the point.

     #+BEGIN_SRC emacs-lisp
(use-package eldoc
  :ensure nil
  :hook ((emacs-lisp-mode . eldoc-mode)
         (eval-expression-minibuffer-setup . eldoc-mode)
         (lisp-mode-interactive-mode . eldoc-mode)
         (typescript-mode . eldoc-mode)
		 (haskell-mode . eldoc-mode)
		 (python-mode . eldoc-mode)
		 (eshell-mode . eldoc-mode)))
     #+END_SRC

**** electric

     Setup these modes:

     - electric-quote
     - electric-indent
     - electric-layout

     #+BEGIN_SRC emacs-lisp
(use-package electric
  :ensure nil
  :hook ((prog-mode . electric-quote-mode)
         (prog-mode . electric-indent-mode)
         (prog-mode . electric-layout-mode)))
     #+END_SRC

***** elec-pair

      Setup electric-pair-mode for prog-modes. Also disable it when smartparens is
      setup.

      #+BEGIN_SRC emacs-lisp
(use-package elec-pair
  :ensure nil
  :hook ((prog-mode . electric-pair-mode)
         (smartparens-mode . (lambda () (electric-pair-mode -1)))))
      #+END_SRC

**** Emacs shell

     #+BEGIN_SRC emacs-lisp
(use-package eshell
  :ensure nil
  :bind (("C-c M-t" . eshell)
         ("C-c x" . eshell))
  :commands (eshell-command eshell-bol)
  :config
  (use-package em-rebind
    :preface
    (defun eshell-eol ()
      "Goes to the end of line."
      (interactive)
      (end-of-line))
    :ensure nil
    :demand
    :config
    (setq eshell-rebind-keys-alist
          '(([(control 97)] . eshell-bol)
            ([home] . eshell-bol)
            ([(control 100)] . eshell-delchar-or-maybe-eof)
            ([backspace] . eshell-delete-backward-char)
            ([delete] . eshell-delete-backward-char)
            ([(control 119)] . backward-kill-word)
            ([(control 117)] . eshell-kill-input)
            ([tab] . completion-at-point)
            ([(control 101)] . eshell-eol))))
  (setq eshell-modules-list
        '(eshell-alias
          eshell-banner
          eshell-basic
          eshell-cmpl
          eshell-dirs
          eshell-glob
          eshell-hist
          eshell-ls
          eshell-pred
          eshell-prompt
          eshell-rebind
          eshell-script
          eshell-smart
          eshell-term
          eshell-tramp
          eshell-unix
          eshell-xtra)))
     #+END_SRC

***** esh-help

      #+BEGIN_SRC emacs-lisp
(use-package esh-help
  :commands (esh-help-eldoc-command)
  :preface
  (defun turn-on-esh-eldoc ()
    (setq-local eldoc-documentation-function 'esh-help-eldoc-command))
  :hook (eshell-mode . turn-on-esh-eldoc))
      #+END_SRC

***** em-dired

      #+BEGIN_SRC emacs-lisp
(use-package em-dired
  :ensure nil
  :commands (em-dired-new)
  :bind (:map dired-mode-map
              ("e" . em-dired))
  :hook (eshell-mode . em-dired-mode)
  :init (advice-add 'eshell :before 'em-dired-new))
      #+END_SRC

**** etags

     #+BEGIN_SRC emacs-lisp
(use-package etags
  :ensure nil
  :commands (tags-completion-table))
     #+END_SRC

**** executable

     #+BEGIN_SRC emacs-lisp
(use-package executable
  :ensure nil
  :hook (after-save . executable-make-buffer-file-executable-if-script-p))
     #+END_SRC

**** ffap :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package ffap
  :demand
  :config (ffap-bindings)
  :ensure nil)
     #+END_SRC

***** TODO handle line numbers like filename:line:col

**** flyspell

     #+BEGIN_SRC emacs-lisp
(use-package flyspell
  :ensure nil
  :if (locate-file
       (if (boundp 'ispell-program-name) ispell-program-name "ispell")
       exec-path)
  :hook ((text-mode . flyspell-mode)
         (prog-mode . flyspell-prog-mode)))
     #+END_SRC

**** goto-addr

     #+BEGIN_SRC emacs-lisp
(use-package goto-addr
  :ensure nil
  :hook ((prog-mode . goto-address-prog-mode)
         (git-commit-mode . goto-address-mode)))
     #+END_SRC

**** grep

     #+BEGIN_SRC emacs-lisp
(use-package grep
  :ensure nil
  :bind (("M-s d" . find-grep-dired)
         ("M-s F" . find-grep)
         ("M-s G" . grep)))
     #+END_SRC

**** gud

     #+BEGIN_SRC emacs-lisp
(use-package gud
  :ensure nil
  :commands (gud-gdb))
     #+END_SRC

**** help

     #+BEGIN_SRC emacs-lisp
(use-package help
  :ensure nil
  :bind (:map help-map
              ("C-v" . find-variable)
              ("C-k" . find-function-on-key)
              ("C-f" . find-function)
              ("C-l" . find-library)
              :map help-mode-map
              ("g" . revert-buffer-no-confirm))
  :preface
  (defun revert-buffer-no-confirm (&optional ignore-auto)
    "Revert current buffer without asking."
    (interactive (list (not current-prefix-arg)))
    (revert-buffer ignore-auto t nil)))
     #+END_SRC

**** hideshow                                                      :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

      This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package hideshow
  :ensure nil
  :hook ((c-mode-common
          lisp-mode
          emacs-lisp-mode
          java-mode) . hs-minor-mode))
     #+END_SRC

***** hideshowvis

      #+BEGIN_SRC emacs-lisp
(use-package hideshowvis
  :hook (prog-mode . hideshowvis-minor-mode))
      #+END_SRC

**** hippie-exp

     #+BEGIN_SRC emacs-lisp
(use-package hippie-exp
  :ensure nil
  :bind* (("M-/". hippie-expand)))
     #+END_SRC

**** ibuffer

     #+BEGIN_SRC emacs-lisp
(use-package ibuffer
  :ensure nil
  :bind ([remap switch-to-buffer] . ibuffer))
     #+END_SRC

**** imenu
***** imenu-anywhere

      #+BEGIN_SRC emacs-lisp
(use-package imenu-anywhere
  :bind (("C-c i" . imenu-anywhere)
         ("s-i" . imenu-anywhere)))
      #+END_SRC

***** imenu-list

      #+BEGIN_SRC emacs-lisp
(use-package imenu-list
  :commands (imenu-list))
      #+END_SRC

**** info                                                          :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package info
  :ensure nil
  :bind ("C-h C-i" . info-lookup-symbol)
  )
     #+END_SRC

**** jka-compr                                                     :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     Add some binary plist decompression. This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package jka-compr
  :ensure nil
  :demand
  :config
  (add-to-list 'jka-compr-compression-info-list
               ["\\.plist$"
                "converting text XML to binary plist"
                "plutil"
                ("-convert" "binary1" "-o" "-" "-")
                "converting binary plist to text XML"
                "plutil"
                ("-convert" "xml1" "-o" "-" "-")
                nil nil "bplist"])
  (jka-compr-update))
     #+END_SRC
**** kill-or-bury-alive 										   :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package kill-or-bury-alive
  :bind (([remap kill-buffer] . kill-or-bury-alive)))
     #+END_SRC

**** minibuffer

     #+BEGIN_SRC emacs-lisp
(use-package minibuffer
  :ensure nil
  :bind* ("C-M-i" . completion-at-point))
     #+END_SRC

***** mb-depth

     #+BEGIN_SRC emacs-lisp
(use-package mb-depth
  :ensure nil
  :hook (minibuffer-setup . minibuffer-depth-indicate-mode))
     #+END_SRC

**** newcomment

     #+BEGIN_SRC emacs-lisp
(use-package newcomment
  :ensure nil
  :bind ("s-/" . comment-or-uncomment-region))
     #+END_SRC

**** notmuch

     #+BEGIN_SRC emacs-lisp
(use-package notmuch
  :commands (notmuch))
     #+END_SRC

**** paren

     #+BEGIN_SRC emacs-lisp
(use-package paren
  :ensure nil
  :hook ((prog-mode . show-paren-mode)
         (prog-mode . (lambda () (show-paren-mode -1)))))
     #+END_SRC

**** pcomplete
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package pcomplete
  :ensure nil
  :commands (pcomplete-completions-at-point)
  :init
  (add-to-list 'completion-at-point-functions 'pcomplete-completions-at-point))
     #+END_SRC

**** pp

     #+BEGIN_SRC emacs-lisp
(use-package pp
  :ensure nil
  :commands (pp-eval-last-sexp)
  :bind (([remap eval-expression] . pp-eval-expression))
  :init
  (global-unset-key (kbd "C-x C-e"))
  :hook ((lisp-mode emacs-lisp-mode) . always-eval-sexp)
  :preface
  (defun always-eval-sexp ()
    (define-key (current-local-map) (kbd "C-x C-e") 'pp-eval-last-sexp)))
     #+END_SRC

**** prog-mode

     #+BEGIN_SRC emacs-lisp
(use-package prog-mode
  :ensure nil
  :hook ((prog-mode . prettify-symbols-mode)
		 (lisp-mode . prettify-symbols-lisp)
		 (c-mode . prettify-symbols-c)
		 (c++-mode . prettify-symbols-c++)
		 ((js-mode js2-mode) . prettify-symbols-js))
  :preface
  (defun prettify-symbols-prog ()
    (push '("<=" . ?≤) prettify-symbols-alist)
    (push '(">=" . ?≥) prettify-symbols-alist))
  (defun prettify-symbols-lisp ()
    (push '("/=" . ?≠) prettify-symbols-alist)
    (push '("sqrt" . ?√) prettify-symbols-alist)
    (push '("not" . ?¬) prettify-symbols-alist)
    (push '("and" . ?∧) prettify-symbols-alist)
    (push '("or" . ?∨) prettify-symbols-alist))
  (defun prettify-symbols-c ()
    (push '("<=" . ?≤) prettify-symbols-alist)
    (push '(">=" . ?≥) prettify-symbols-alist)
    (push '("!=" . ?≠) prettify-symbols-alist)
    (push '("&&" . ?∧) prettify-symbols-alist)
    (push '("||" . ?∨) prettify-symbols-alist)
    (push '(">>" . ?») prettify-symbols-alist)
    (push '("<<" . ?«) prettify-symbols-alist))
  (defun prettify-symbols-c++ ()
    (push '("<=" . ?≤) prettify-symbols-alist)
    (push '(">=" . ?≥) prettify-symbols-alist)
    (push '("!=" . ?≠) prettify-symbols-alist)
    (push '("&&" . ?∧) prettify-symbols-alist)
    (push '("||" . ?∨) prettify-symbols-alist)
    (push '(">>" . ?») prettify-symbols-alist)
    (push '("<<" . ?«) prettify-symbols-alist)
    (push '("->" . ?→) prettify-symbols-alist))
  (defun prettify-symbols-js ()
    (push '("function" . ?λ) prettify-symbols-alist)
    (push '("=>" . ?⇒) prettify-symbols-alist)))
     #+END_SRC

**** re-builder
     #+BEGIN_SRC emacs-lisp
(use-package re-builder
  :ensure nil
  :config
  (let ((name '("Regexp[" (:eval (symbol-name reb-re-syntax)) "]")))
    (delight `((reb-mode ,name :major)
			   (reb-lisp-mode ,name :major))))
  )
     #+END_SRC

**** savehist
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package savehist
  :ensure nil
  :demand
  :config (savehist-mode 1))
     #+END_SRC

**** saveplace                                                     :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package saveplace
  :ensure nil
  :demand
  :config (save-place-mode t))
     #+END_SRC

**** server                                                        :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package server
  :ensure nil
  :demand
  :commands server-start
  :hook ((after-init . server-start)
         (server-switch . raise-frame)))
     #+END_SRC

**** Shell

     #+BEGIN_SRC emacs-lisp
(use-package shell
  :ensure nil
  :bind ("C-c C-s" . shell)
  :hook ((shell-mode . ansi-color-for-comint-mode-on)
         (shell-mode . dirtrack-mode)
		 (shell-mode . use-histfile))
  :preface
  (defun use-histfile ()
    (turn-on-comint-history (getenv "HISTFILE"))))
     #+END_SRC

**** simple

     #+BEGIN_SRC emacs-lisp
(use-package simple
  :ensure nil
  :demand
  :commands column-number-mode
  :bind
  (("C-`" . list-processes)
   :map minibuffer-local-map
   ("<escape>"  . abort-recursive-edit)
   ("M-TAB"     . previous-complete-history-element)
   ("<M-S-tab>" . next-complete-history-element))
  :hook (text-mode . visual-line-mode)
  :config
  (column-number-mode))
     #+END_SRC

**** subword

     #+BEGIN_SRC emacs-lisp
(use-package subword
  :ensure nil
  :hook (java-mode . subword-mode))
     #+END_SRC

**** term

     #+BEGIN_SRC emacs-lisp
(use-package term
  :ensure nil
  :commands (term-mode term-char-mode term-set-escape-char)
  :init
  (add-hook 'term-mode-hook (lambda ()
                              (setq term-prompt-regexp "^[^#$%>\n]*[#$%>] *")
                              (setq-local transient-mark-mode nil)
                              (auto-fill-mode -1)))
  :preface
  (defun my-term ()
    (interactive)
    (set-buffer (make-term "my-term" "zsh"))
    (term-mode)
    (term-char-mode)
    (term-set-escape-char ?\C-x)
    (switch-to-buffer "*my-term*"))
  :bind ("C-c t" . my-term))
     #+END_SRC

**** text-mode

     #+BEGIN_SRC emacs-lisp
(use-package text-mode
  :no-require
  :ensure nil
  :hook (text-mode . turn-on-auto-fill))
     #+END_SRC

**** time

     #+BEGIN_SRC emacs-lisp
(use-package time
  :demand
  :config
  (display-time-mode)
  )
     #+END_SRC

**** tooltip

     #+BEGIN_SRC emacs-lisp
(use-package tooltip
  :ensure nil
  :demand
  :commands tooltip-mode
  :config
  (tooltip-mode -1))
     #+END_SRC

**** tramp

	 [[https://www.gnu.org/software/tramp/][Website]]

     #+BEGIN_SRC emacs-lisp
(use-package tramp
  :ensure nil
  :commands (tramp-tramp-file-p
             tramp-file-name-user
             tramp-file-name-real-host
             tramp-dissect-file-name))
     #+END_SRC

**** url-handlers

     #+BEGIN_SRC emacs-lisp
(use-package url-handlers
  :ensure nil
  :demand
  :config
  (url-handler-mode))
     #+END_SRC

**** view

     #+BEGIN_SRC emacs-lisp
(use-package view
  :ensure nil
  :bind (:map view-mode-map
              ("n" . next-line)
              ("p" . previous-line)
              ("j" . next-line)
              ("k" . previous-line)
              ("l" . forward-char)
              ("f" . forward-char)
              ("b" . backward-char)))
     #+END_SRC

**** which-func

     #+BEGIN_SRC emacs-lisp
(use-package which-func
  :ensure nil
  :demand
  :config (which-function-mode))
     #+END_SRC
**** whitespace

     #+BEGIN_SRC emacs-lisp
(use-package whitespace
  :ensure nil
  :hook (prog-mode . whitespace-mode))
     #+END_SRC

**** windmove

     #+BEGIN_SRC emacs-lisp
(use-package windmove
  :ensure nil
  :bind (("<s-down>" . windmove-down)
         ("<s-up>" . windmove-up)
         ))
     #+END_SRC

*** Programming languages
    Each =use-package= declaration corresponds to =major modes= in Emacs lingo.
    Each language will at least one of these major modes as well as associated
    packages (for completion, syntax checking, etc.)

**** C/C++

     #+BEGIN_SRC emacs-lisp
(use-package cc-mode
  :ensure nil
  :mode (("\\.h\\(h?\\|xx\\|pp\\)\\'" . c++-mode)
         ("\\.m\\'" . c-mode)
         ("\\.c\\'" . c-mode)
         ("\\.cpp\\'" . c++-mode)
         ("\\.c++\\'" . c++-mode)
         ("\\.mm\\'" . c++-mode)))
     #+END_SRC

***** irony

      #+BEGIN_SRC emacs-lisp
(use-package irony
  :hook ((c++-mode c-mode objc-mode) . irony-mode))
(use-package irony-cdb
  :ensure nil
  :hook (irony-mode . irony-cdb-autosetup-compile-options))
      #+END_SRC

****** flycheck-irony

      #+BEGIN_SRC emacs-lisp
(use-package flycheck-irony
  :hook (flycheck-mode . flycheck-irony-setup))
      #+END_SRC

****** irony-eldoc

      #+BEGIN_SRC emacs-lisp
(use-package irony-eldoc
  :hook (irony-mode . irony-eldoc))
      #+END_SRC

***** rtags                                                        :noexport:
      :PROPERTIES:
      :header-args: :tangle no
      :END:

      Rtags is started with C and C++ projects. This is currently disabled.

      #+BEGIN_SRC emacs-lisp
(use-package rtags
  :commands (rtags-start-process-unless-running
             rtags-enable-standard-keybindings)
  :preface
  (defun rtags-start ()
    (when (not (tramp-tramp-file-p (buffer-file-name (current-buffer))))
      (rtags-start-process-unless-running)))
  :hook ((kill-emacs-hook . rtags-quit-rdm)
		 ((c-mode-common c++-mode-common) . rtags-start))
  :config
  (rtags-enable-standard-keybindings c-mode-base-map "\C-cr"))
      #+END_SRC

**** CoffeeScript

     #+BEGIN_SRC emacs-lisp
(use-package coffee-mode
  :mode (("\\.coffee\\'" . coffee-mode)))
     #+END_SRC

**** CSS

     #+BEGIN_SRC emacs-lisp
(use-package css-mode
  :ensure nil
  :mode "\\.css\\'"
  :commands (css-mode))
     #+END_SRC

**** CSV

     #+BEGIN_SRC emacs-lisp
(use-package csv-mode
  :mode "\\.csv\\'")
     #+END_SRC

**** ELF

     #+BEGIN_SRC emacs-lisp
(use-package elf-mode
  :magic ("ELF" . elf-mode))
     #+END_SRC

**** Go

     #+BEGIN_SRC emacs-lisp
(use-package go-mode
  :mode "\\.go\\'")
     #+END_SRC

**** HAML

     #+BEGIN_SRC emacs-lisp
(use-package haml-mode
  :mode "\\.haml\\'")
     #+END_SRC

**** Haskell
***** intero :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

      #+BEGIN_SRC emacs-lisp
(use-package intero
  :commands (intero-mode)
  :preface
  (defun intero-mode-unless-global-project ()
    "Run intero-mode iff we're in a project with a stack.yaml"
    (unless (string-match-p
             (regexp-quote ".stack/global-project")
             (shell-command-to-string
              "stack path --project-root --verbosity silent"))
      (intero-mode)))
  :hook (haskell-mode . intero-mode-unless-global-project))
      #+END_SRC

***** ghc

      #+BEGIN_SRC emacs-lisp
(use-package ghc
  :hook (haskell-mode . ghc-init))
      #+END_SRC

***** structured-haskell-mode
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

      #+BEGIN_SRC emacs-lisp
(use-package structured-haskell-mode
  :hook (haskell-mode . structured-haskell-mode))
      #+END_SRC

***** company-ghc
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

      #+BEGIN_SRC emacs-lisp
(use-package company-ghc
  :commands (company-ghc)
  :init
  (add-to-list 'company-backends 'company-ghc))
      #+END_SRC


***** haskell-mode

      Hacky ways to autoload things (please FIXME).

      #+BEGIN_SRC emacs-lisp
(use-package haskell-interactive-mode
  :ensure nil
  :hook (haskell-mode . interactive-haskell-mode))
(use-package haskell-decl-scan
  :commands (haskell-ds-create-imenu-index haskell-decl-scan-mode)
  :ensure nil)
(use-package haskell-doc
  :ensure nil
  :commands (haskell-doc-current-info)
  :hook (haskell-mode . esh-help-setup)
  :preface
  (defun esh-help-setup ()
	(setq-local eldoc-documentation-function 'haskell-doc-current-info)))
(use-package haskell-completions
  :ensure nil
  :commands (haskell-completions-completion-at-point))
(use-package haskell-unicode-input-method
  :ensure nil
  :commands (turn-on-haskell-unicode-input-method))
(use-package haskell
  :ensure haskell-mode
  :mode (("\\.hs\\'" . haskell-mode)
         ("\\.cabal\\'" . haskell-cabal-mode))
  :commands (haskell-mode-after-save-handler)
  :hook ((haskell-mode . subword-mode)
         (haskell-mode . flyspell-prog-mode) 
         (haskell-mode . haskell-indentation-mode)
         (haskell-mode . imenu-add-menubar-index))
  :init
  (add-to-list 'completion-ignored-extensions ".hi"))
      #+END_SRC

**** Java
***** jdee

      #+BEGIN_SRC emacs-lisp
(use-package jdee
  :mode ("\\.java\\'" . jdee-mode)
  :bind (:map jdee-mode-map
              ("<s-mouse-1>" . jdee-open-class-at-event)))
      #+END_SRC

**** JavaScript
***** indium

      #+BEGIN_SRC emacs-lisp
(use-package indium
  :mode ("\\.js\\'" . indium-mode)
  :commands (indium-interaction-mode indium-scratch))
      #+END_SRC

***** js2-mode
      #+BEGIN_SRC emacs-lisp
(use-package js2-mode
  :mode (("\\.js\\'" . js2-mode)))
(use-package js2-imenu-extras
  :ensure nil
  :hook (js2-mode . js2-imenu-extras-mode))
      #+END_SRC

***** js3-mode

      #+BEGIN_SRC emacs-lisp
(use-package js3-mode
  :commands (js3-mode))
      #+END_SRC

***** tern

      #+BEGIN_SRC emacs-lisp
(use-package tern
  :hook (js2-mode . tern-mode))
      #+END_SRC

**** JSON

     #+BEGIN_SRC emacs-lisp
(use-package json-mode
  :mode (("\\.bowerrc$"     . json-mode)
         ("\\.jshintrc$"    . json-mode)
         ("\\.json_schema$" . json-mode)
         ("\\.json\\'" . json-mode))
  :config
  (make-local-variable 'js-indent-level))
     #+END_SRC

**** LaTeX
***** auctex

      Auctex provides some helpful tools for working with LaTeX.

      #+BEGIN_SRC emacs-lisp
(use-package tex-site
  :ensure auctex
  :no-require
  :commands (TeX-latex-mode
             TeX-mode
             tex-mode
             LaTeX-mode
             latex-mode)
  :mode ("\\.tex\\'" . TeX-latex-mode))
      #+END_SRC

**** Lisp

     #+BEGIN_SRC emacs-lisp
(use-package elisp-mode
  :ensure nil
  :interpreter (("emacs" . emacs-lisp-mode)))
     #+END_SRC

***** cider
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

      #+BEGIN_SRC emacs-lisp
(use-package cider)
      #+END_SRC

***** slime
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

      #+BEGIN_SRC emacs-lisp
(use-package slime)
      #+END_SRC

***** ielm

      #+BEGIN_SRC emacs-lisp
(use-package ielm
  :ensure nil
  :bind ("C-c :" . ielm))
      #+END_SRC

**** LLVM IR
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package llvm-mode
  :mode "\\.ll\\'")
     #+END_SRC

**** Lua
***** lua-mode
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

      #+BEGIN_SRC emacs-lisp
(use-package lua-mode
  :mode "\\.lua\\'")
      #+END_SRC

**** Mach-O

     #+BEGIN_SRC emacs-lisp
(use-package macho-mode
  :ensure nil
  :magic (("\xFE\xED\xFA\xCE" . macho-mode)
          ("\xFE\xED\xFA\xCF" . macho-mode)
          ("\xCE\xFA\xED\xFE" . macho-mode)
          ("\xCF\xFA\xED\xFE" . macho-mode)))
     #+END_SRC

**** Makefile
***** make-mode

      #+BEGIN_SRC emacs-lisp
(use-package make-mode
  :ensure nil
  :hook (makefile-mode . indent-tabs-mode))
      #+END_SRC

**** Markdown
***** vmd-mode                                                     :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

      This is currently disabled.

      #+BEGIN_SRC emacs-lisp
(use-package vmd-mode
  :init (require 'markdown-mode nil t)
  :bind (:map markdown-mode-map ("C-x p" . vmd-mode)))
      #+END_SRC

***** markdown-mode

      #+BEGIN_SRC emacs-lisp
(use-package markdown-mode
  :mode
  (("\\.md\\'" . gfm-mode)
   ("\\.markdown\\'" . gfm-mode))
  :config
  (bind-key "'" "’" markdown-mode-map
            (not (or (markdown-code-at-point-p)
                     (memq 'markdown-pre-face
                           (face-at-point nil 'mult))))))
      #+END_SRC

**** Nix

     #+BEGIN_SRC emacs-lisp
(use-package nix-mode
  :mode "\\.nix\\'")
     #+END_SRC

***** nix-buffer

      #+BEGIN_SRC emacs-lisp
(use-package nix-buffer
  :commands (nix-buffer)
  :preface
  (defun turn-on-nix-buffer ()
	(when (and (not noninteractive)
			   (not (eq (aref (buffer-name) 0) ?\s))
			   (not (file-remote-p default-directory)))
	  (nix-buffer)))
  :hook (after-change-major-mode . turn-on-nix-buffer))
      #+END_SRC

**** NROFF

     #+BEGIN_SRC emacs-lisp
(use-package nroff-mode
  :ensure nil
  :commands (nroff-mode))
     #+END_SRC

**** PHP

     #+BEGIN_SRC emacs-lisp
(use-package php-mode
  :mode "\\.php\\'")
     #+END_SRC

**** Python

***** Anaconda

     #+BEGIN_SRC emacs-lisp
(use-package anaconda-mode
  :hook ((python-mode . anaconda-mode)
         (python-mode . anaconda-eldoc-mode)))
     #+END_SRC

***** python-mode

      #+BEGIN_SRC emacs-lisp
(use-package python
  :ensure nil
  :mode ("\\.py\\'" . python-mode)
  :interpreter ("python" . python-mode))
      #+END_SRC

***** elpy

      #+BEGIN_SRC emacs-lisp
(use-package elpy
  :mode ("\\.py\\'" . elpy-mode))
      #+END_SRC

**** Ruby

     #+BEGIN_SRC emacs-lisp
(use-package ruby-mode
  :ensure nil
  :mode ("\\.rb\\'" . ruby-mode)
  :interpreter ("ruby" . ruby-mode))
     #+END_SRC

**** Rust

     #+BEGIN_SRC emacs-lisp
(use-package rust-mode
  :mode "\\.rs\\'")
     #+END_SRC

**** SASS

     #+BEGIN_SRC emacs-lisp
(use-package sass-mode
  :mode "\\.sass\\'")
     #+END_SRC

**** Scala

     #+BEGIN_SRC emacs-lisp
(use-package scala-mode
  :interpreter ("scala" . scala-mode))
     #+END_SRC

**** SCSS

     #+BEGIN_SRC emacs-lisp
(use-package scss-mode
  :mode "\\.scss\\'")
     #+END_SRC

**** Shell

     #+BEGIN_SRC emacs-lisp
(use-package sh-script
  :ensure nil
  :commands shell-command
  :preface
  (defun shell-command-at-point ()
    (interactive)
    (let ((start-point (save-excursion
                         (beginning-of-line)
                         (point))))
      (shell-command (buffer-substring start-point (point)))))
  :mode (("\\.*shellrc$" . sh-mode)
         ("\\.*shell_profile" . sh-mode)
         ("\\.zsh\\'" . sh-mode))
  :bind (:map sh-mode-map
              ("C-x C-e" . shell-command-at-point)))
     #+END_SRC

**** texinfo

     #+BEGIN_SRC emacs-lisp
(use-package texinfo
  :mode ("\\.texi\\'" . texinfo-mode))
     #+END_SRC

**** TypeScript

     #+BEGIN_SRC emacs-lisp
(use-package typescript-mode
  :mode "\\.ts\\'")
     #+END_SRC

***** tide

      #+BEGIN_SRC emacs-lisp
(use-package tide
  :commands (tide-setup tide-hl-identifier-mode)
  :hook ((typescript-mode . tide-setup)
         (typescript-mode . tipe-hl-identifier-mode)))
      #+END_SRC

**** Web

     #+BEGIN_SRC emacs-lisp
(use-package web-mode
  :mode (("\\.erb\\'" . web-mode)
         ("\\.mustache\\'" . web-mode)
         ("\\.html?\\'" . web-mode)
         ("\\.php\\'" . web-mode)
         ("\\.jsp\\'" . web-mode)))
     #+END_SRC

**** XML

     #+BEGIN_SRC emacs-lisp
(use-package nxml-mode
  :ensure nil
  :commands (nxml-mode)
  :init
  (defalias 'xml-mode 'nxml-mode))
     #+END_SRC

**** YAML

     #+BEGIN_SRC emacs-lisp
(use-package yaml-mode
  :mode "\\.ya?ml\\'")
     #+END_SRC

*** Personal

    These are all available in [[./lisp]]. Eventually they should go into separate
    repositories.

**** dired-column
**** em-dired
**** installer
**** macho-mode
**** nethack

     #+BEGIN_SRC emacs-lisp
(use-package nethack
  :commands (nethack)
  :ensure nil)
     #+END_SRC

**** nix-fontify
**** set-defaults
**** use-package-list
*** Other

    These should correspond to minor modes or helper functions. Some of them are
    more helpful than others but none are /essential/.

    Most of these are available in MELPA.

**** yafolding :noexport:
      :PROPERTIES:
      :header-args: :tangle no
      :END:

      This is currently disabled

     #+BEGIN_SRC emacs-lisp
(use-package yafolding
  :hook (prog-mode . yafolding-mode))
     #+END_SRC

**** anything

     #+BEGIN_SRC emacs-lisp
(use-package anything
  :commands (anything))
     #+END_SRC

**** apropospriate-theme

     This is the theme I use. This has to be defered for some reason.

     #+BEGIN_SRC emacs-lisp
(use-package apropospriate-theme
  :demand
  :config (load-theme 'apropospriate-dark t))
     #+END_SRC

**** bool-flip

     #+BEGIN_SRC emacs-lisp
(use-package bool-flip
  :bind ("C-c C-b" . bool-flip-do-flip))
     #+END_SRC

**** browse-at-remote

     #+BEGIN_SRC emacs-lisp
(use-package browse-at-remote
  :commands (browse-at-remote))
     #+END_SRC

**** checkbox                                                      :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     Checkbox is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package checkbox
  :bind (("C-c C-t" . checkbox-toggle)))
     #+END_SRC

**** copy-as-format

     #+BEGIN_SRC emacs-lisp
(use-package copy-as-format
  :bind (("C-c w s" . copy-as-format-slack)
         ("C-c w g" . copy-as-format-github)))
     #+END_SRC

**** crux

     #+BEGIN_SRC emacs-lisp
(use-package crux
  :bind (("C-c D" . crux-delete-file-and-buffer)
         ("C-c C-e" . crux-eval-and-replace)
         ([shift return] . crux-smart-open-line)))
     #+END_SRC

**** easy-kill                                                     :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

      This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package easy-kill
  :bind (([remap kill-ring-save] . easy-kill)
         ([remap mark-sexp]      . easy-mark)))
     #+END_SRC

**** elfeed

     #+BEGIN_SRC emacs-lisp
(use-package elfeed
  :commands (elfeed))
     #+END_SRC

***** elfeed-org                                                   :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package elfeed-org
  :after elfeed
  :config (elfeed-org))
     #+END_SRC

**** expand-region

     #+BEGIN_SRC emacs-lisp
(use-package expand-region
  :bind (("C-=" . er/expand-region)))
     #+END_SRC

**** firestarter

     #+BEGIN_SRC emacs-lisp
(use-package firestarter
  :bind ("C-c m s" . firestarter-mode))
     #+END_SRC

**** focus

     #+BEGIN_SRC emacs-lisp
(use-package focus
  :bind ("C-c m f" . focus-mode))
     #+END_SRC

**** gist                                                          :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package gist
  :bind ("C-c C-g" . gist-region-or-buffer-private)
  :commands (gist-list gist-region gist-region-private gist-buffer
                       gist-buffer-private gist-region-or-buffer))
     #+END_SRC

**** gnuplot :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package gnuplot)
     #+END_SRC

**** hl-todo

     #+BEGIN_SRC emacs-lisp
(use-package hl-todo
  :hook (prog-mode . hl-todo-mode))
     #+END_SRC

**** hookify

     #+BEGIN_SRC emacs-lisp
(use-package hookify
  :commands hookify)
     #+END_SRC

**** htmlize

     #+BEGIN_SRC emacs-lisp
(use-package htmlize)
     #+END_SRC

**** hydra                                                         :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

      This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package hydra
  :bind (("C-x t" . hydra-toggle/body)
         ("<f5>" . hydra-zoom/body)
         ("C-M-g" . hydra-error/body)
         ("C-c h c" . hydra-case/body)
         ("C-c h z" . hydra-zoom/body)
         ("C-c h e" . hydra-error/body)
         ("C-c h p" . hydra-projectile/body)
         ("C-c h w" . hydra-window/body))
  :config (hydra-add-font-lock)
  :preface
  (eval-and-compile
    (defhydra hydra-error (:color amaranth)
      "goto-error"
      ("h" flycheck-list-errors "first")
      ("j" flycheck-next-error "next")
      ("k" flycheck-previous-error "prev")
      ("v" recenter-top-bottom "recenter")
      ("q" nil "quit"))

    (defhydra hydra-zoom (:color blue :hint nil)
      "zoom"
      ("g" text-scale-increase "in")
      ("l" text-scale-decrease "out"))

    (defhydra hydra-case ()
      "case"
      ("c" string-inflection-all-cycle nil)
      ("c" string-inflection- nil)
      )

    (defhydra hydra-projectile (:color blue :columns 4)
      "Projectile"
      ("a" counsel-git-grep "ag")
      ("b" projectile-switch-to-buffer "switch to buffer")
      ("c" projectile-compile-project "compile project")
      ("d" projectile-find-dir "dir")
      ("f" projectile-find-file "file")
      ("g" ggtags-update-tags "update gtags")
      ("i" projectile-ibuffer "Ibuffer")
      ("K" projectile-kill-buffers "Kill all buffers")
      ("p" projectile-switch-project "switch")
      ("r" projectile-run-async-shell-command-in-root "run shell command")
      ("x" projectile-remove-known-project "remove known")
      ("X" projectile-cleanup-known-projects "cleanup non-existing")
      ("z" projectile-cache-current-file "cache current")
      ("q" nil "cancel")
      )

    (defhydra hydra-window (:color amaranth)
      "
  Move Point^^^^   Move Splitter   ^Ace^                       ^Split^
  --------------------------------------------------------------------------------
  _w_, _<up>_      Shift + Move    _C-a_: ace-window           _2_: split-window-below
  _a_, _<left>_                    _C-s_: ace-window-swap      _3_: split-window-right
  _s_, _<down>_                    _C-d_: ace-window-delete    ^ ^
  _d_, _<right>_                   ^   ^                       ^ ^
  You can use arrow-keys or WASD.
  "
      ("2" split-window-below nil)
      ("3" split-window-right nil)
      ("a" windmove-left nil)
      ("s" windmove-down nil)
      ("w" windmove-up nil)
      ("d" windmove-right nil)
      ("A" hydra-move-splitter-left nil)
      ("S" hydra-move-splitter-down nil)
      ("W" hydra-move-splitter-up nil)
      ("D" hydra-move-splitter-right nil)
      ("<left>" windmove-left nil)
      ("<down>" windmove-down nil)
      ("<up>" windmove-up nil)
      ("<right>" windmove-right nil)
      ("<S-left>" hydra-move-splitter-left nil)
      ("<S-down>" hydra-move-splitter-down nil)
      ("<S-up>" hydra-move-splitter-up nil)
      ("<S-right>" hydra-move-splitter-right nil)
      ("C-a" ace-window nil)
      ("u" hydra--universal-argument nil)
      ("C-s" (lambda () (interactive) (ace-window 4)) nil)
      ("C-d" (lambda () (interactive) (ace-window 16)) nil)
      ("q" nil "quit"))))
     #+END_SRC

**** idle-highlight-mode                                           :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

      This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package idle-highlight-mode
  :hook ((java-mode
          emacs-lisp-mode
          clojure-lisp-mode) . idle-highlight-mode))
     #+END_SRC

**** keyfreq                                                       :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package keyfreq
  :demand
  :config
  (keyfreq-mode 1)
  (keyfreq-autosave-mode 1))
     #+END_SRC

**** logview
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package logview)
     #+END_SRC

**** lsp-mode                                                      :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package lsp-mode
  :hook (prog-major-mode . lsp-mode)
  :commands lsp-mode
  :init
  (with-eval-after-load 'lsp-mode
    (require 'lsp-flycheck))
  (use-package lsp-imenu
    :commands lsp-enable-imenu
    :init (add-hook 'lsp-after-open-hook 'lsp-enable-imenu))
  (use-package company-lsp
    :commands company-lsp
    :init (push 'company-lsp company-backends))

  (lsp-define-stdio-client
   ;; This can be a symbol of your choosing. It will be used as a the
   ;; prefix for a dynamically generated function "-enable"; in this
   ;; case: lsp-prog-major-mode-enable
   lsp-prog-major-mode
   "language-id"
   ;; This will be used to report a project's root directory to the LSP
   ;; server.
   (lambda () default-directory)
   ;; This is the command to start the LSP server. It may either be a
   ;; string containing the path of the command, or a list wherein the
   ;; car is a string containing the path of the command, and the cdr
   ;; are arguments to that command.
   '("/my/lsp/server" "and" "args")))
     #+END_SRC

**** make-it-so                                                    :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package make-it-so
  :hook (dired-mode . mis-mode)
  :bind (:map dired-mode-map
             :prefix ","
             :prefix-map dired-make-it-so-map
             :prefix-docstring "Make it so map."
             ("," . make-it-so)
             ("f" . mis-finalize)
             ("a" . mis-abort)
             ("r" . mis-replace))
  (use-package make-mode
    :bind (:map makefile-mode-map ("<f5>" . mis-save-and-compile))))
     #+END_SRC

**** mediawiki
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package mediawiki)
     #+END_SRC

**** minimap

     #+BEGIN_SRC emacs-lisp
(use-package minimap
  :commands (minimap-mode))
     #+END_SRC

**** multi-term

     #+BEGIN_SRC emacs-lisp
(use-package multi-term
  :bind (("C-. t" . multi-term-next)
         ("C-. T" . multi-term)))
     #+END_SRC

**** pabbrev                                                       :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package pabbrev
  :hook (prog-mode . pabbrev-mode))
     #+END_SRC

**** page-break-lines

     #+BEGIN_SRC emacs-lisp
(use-package page-break-lines
  :delight
  :hook ((doc-mode
          emacs-lisp-mode
          compilation-mode
          outline-mode
          prog-mode
          haskell-mode) . page-break-lines-mode))
     #+END_SRC

**** pandoc-mode

     #+BEGIN_SRC emacs-lisp
(use-package pandoc-mode
  :hook ((markdown-mode . pandoc-mode)
         (pandoc-mode . pandoc-load-default-settings)))
     #+END_SRC

**** rainbow-delimiters

     #+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :hook ((emacs-lisp-mode
          inferior-emacs-lisp-mode
          ielm-mode
          lisp-mode
          inferior-lisp-mode
          lisp-interaction-mode
          slime-repl-mode) . rainbow-delimiters-mode))
     #+END_SRC

**** rainbow-mode

     #+BEGIN_SRC emacs-lisp
(use-package rainbow-mode
  :hook ((emacs-lisp-mode
          inferior-emacs-lisp-mode
          ielm-mode
          lisp-mode
          inferior-lisp-mode
          lisp-interaction-mode
          slime-repl-mode) . rainbow-mode))
     #+END_SRC

**** realgud                                                       :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package realgud
  :commands (realgud:jdb))
     #+END_SRC

**** restclient

     #+BEGIN_SRC emacs-lisp
(use-package restclient
  :mode (("\\.rest\\'" . restclient-mode)
         ("\\.restclient\\'" . restclient-mode)))
     #+END_SRC

**** shrink-whitespace

     #+BEGIN_SRC emacs-lisp
(use-package shrink-whitespace
  :bind ("H-SPC" . shrink-whitespace))
     #+END_SRC

**** smart-shift

     #+BEGIN_SRC emacs-lisp
(use-package smart-shift
  :bind (("C-c <left>" . smart-shift-left)
         ("C-c <right>" . smart-shift-right)
         ("C-c <up>" . smart-shift-up)
         ("C-c <down>" . smart-shift-down)))
     #+END_SRC

**** string-inflection

     #+BEGIN_SRC emacs-lisp
(use-package string-inflection
  :bind (("C-c r r" . string-inflection-all-cycle)
         ("C-c r c" . string-inflection-camelcase)
         ("C-c r l" . string-inflection-lower-camelcase)
         ("C-c r u" . string-inflection-underscore)
         ("C-c r k" . string-inflection-kebab-case)
         ("C-c r J" . string-inflection-java-style-cycle)))
     #+END_SRC

**** undo-tree                                                     :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package undo-tree
  :config (global-undo-tree-mode 1)
  :bind (("C-c u" . undo-tree-visualize)
         ("s-z" . undo-tree-undo)
         ("s-Z" . undo-tree-redo))
  )
     #+END_SRC

**** vkill

     #+BEGIN_SRC emacs-lisp
(use-package vkill
  :bind ("C-x L" . vkill))
     #+END_SRC

**** ws-butler                                                     :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package ws-butler
  :hook (prog-mode . ws-butler-mode))
     #+END_SRC

**** xah-math-input

     #+BEGIN_SRC emacs-lisp
(use-package xah-math-input
  :commands (xah-math-input-mode))
     #+END_SRC

**** xterm-color

     #+BEGIN_SRC emacs-lisp
(use-package xterm-color
  :commands (xterm-color-filter)
  :init
  (add-hook 'comint-preoutput-filter-functions 'xterm-color-filter)
  (setq comint-output-filter-functions
        (remove 'ansi-color-process-output comint-output-filter-functions)))
     #+END_SRC

**** yasnippet                                                     :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :commands (yas-reload-all)
  :hook (prog-mode . yas-minor-mode)
  :config (yas-reload-all))
     #+END_SRC

**** twittering-mode
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package twittering-mode)
     #+END_SRC

**** hackernews
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package hackernews)
     #+END_SRC

**** popwin :noexport:
     :PROPERTIES:
     :header-args: :tangle no
     :END:

     This is currently disabled.

     #+BEGIN_SRC emacs-lisp
(use-package popwin
  :demand
  :config
  (popwin-mode 1)
  (push '("*Help*"                 :dedicated t :position bottom :stick t :noselect t   :height 0.4) popwin:special-display-config)
  (push '("*compilation*"          :dedicated t :position bottom :stick t :noselect t   :height 0.4) popwin:special-display-config)
  (push '("*Shell Command Output*" :dedicated t :position bottom :stick t :noselect nil            ) popwin:special-display-config)
  (push '("*Async Shell Command*"  :dedicated t :position bottom :stick t :noselect nil            ) popwin:special-display-config)
  (push '(" *undo-tree*"           :dedicated t :position bottom :stick t :noselect nil :height 0.4) popwin:special-display-config)
  (push '("*ert*"                  :dedicated t :position bottom :stick t :noselect nil            ) popwin:special-display-config)
  (push '("*grep*"                 :dedicated t :position bottom :stick t :noselect nil            ) popwin:special-display-config)
  (push '("*nosetests*"            :dedicated t :position bottom :stick t :noselect nil            ) popwin:special-display-config)
  (push '("^\*WoMan.+\*$" :regexp t             :position bottom                                   ) popwin:special-display-config)
  (push '("^\\*Flycheck.+\\*$"
          :regexp t
          :dedicated t
          :position bottom
          :stick t
          :noselect t)
        popwin:special-display-config))
     #+END_SRC

**** delight

     #+BEGIN_SRC emacs-lisp
(use-package delight)
     #+END_SRC
**** lentic

     #+BEGIN_SRC emacs-lisp
(use-package lentic
  :commands (global-lentic-mode))
     #+END_SRC


**** TODO iedit
**** TODO undo-tree

**** TODO fill-column-indicator

**** TODO eyebrowse
**** TODO dumb-jump

**** TODO Agda


** COMMENT Footer

   Provide =default.el= file.

   #+BEGIN_SRC emacs-lisp
(provide 'default)
   #+END_SRC

* Profiles

  All of these files live outside of Emacs but are necessary for a usable
  developer environment. They are basic shell profile and some git configuration
  scripts as well.

** =.profile=
   :PROPERTIES:
   :header-args: :tangle profile.sh :tangle-mode (identity #o755)
   :END:

   To use this, you must create a short ~/.profile file. Here is an example,

   #+BEGIN_SRC sh :tangle no
bootstrap=$HOME/.nix-profile/etc/profile
[ -f $bootstrap ] && source $bootstrap
   #+END_SRC

   Here we setup =.profile=. First, setup exports.

   #+BEGIN_SRC sh :padline no
export LANG=en_US.UTF-8 \
       LC_ALL=en_US.UTF-8 \
       INFOPATH=$PREFIX/share/info \
       MANPATH=$PREFIX/share/man \
       DICPATH=$PREFIX/share/hunspell \
       CLICOLOR=1 \
       GREP_COLOR='3;33' \
       LC_COLLATE=C \
       HISTFILE=$HOME/.history \
       HISTSIZE=2000 \
       SAVEHIST=2000 \
       HISTFILESIZE=2000 \
       HISTTIMEFORMAT="[%F %T] " \
       HISTCONTROL=ignoreboth \
       SHELL_SESSION_HISTORY=1
   #+END_SRC

   Then setup aliases.

   #+BEGIN_SRC sh
alias ls="TERM=ansi ls --color=always" \
      l="ls -lF" \
      ..="cd .." \
      ...="cd ../.." \
      ....="cd ../../.." \
      .....="cd ../../../.." \
      tree='tree -Csuh' \
      grep="grep --color=auto"
   #+END_SRC

   Configure INSIDE_EMACS.

   #+BEGIN_SRC sh
if [ "$TERM" = dumb ] && ! [ -z "$INSIDE_EMACS" ]; then
    export TERM=dumb-emacs-ansi \
           COLORTERM=1
fi
   #+END_SRC

   Define =update_terminal_cwd= function.

   #+BEGIN_SRC sh
update_terminal_cwd () {
    local SEARCH=' '
    local REPLACE='%20'
    local PWD_URL="file://$HOSTNAME${PWD//$SEARCH/$REPLACE}"
    printf '\e]7;%s\a' "$PWD_URL"
}
   #+END_SRC
** =.bashrc=
   :PROPERTIES:
   :header-args: :tangle bashrc.sh :tangle-mode (identity #o755)
   :END:

   This is a profile for use with [[https://www.gnu.org/software/bash/][GNU Bash]]. To use this, you must create a short
   =~/.bash_profile= file. Here is an example,

   #+BEGIN_SRC sh :tangle no
bootstrap=$HOME/.nix-profile/etc/bashrc
[ -f $bootstrap ] && source $bootstrap
   #+END_SRC

   Source profile found above.

   #+BEGIN_SRC sh :padline no
source @out@/etc/profile
   #+END_SRC

   When TERM=dumb, just do a simple prompt.

   #+BEGIN_SRC sh
case "$TERM" in
    dumb)
        PS1="\W > "
        return
        ;;
esac
   #+END_SRC

   Setup some bash-specific features.

   #+BEGIN_SRC sh
shopt -s cdspell \
         cdable_vars \
         checkhash \
         checkwinsize \
         cmdhist \
         dotglob \
         extglob \
         histappend \
         histreedit \
         histverify \
         nocaseglob \
         no_empty_cmd_completion \
         sourcepath
   #+END_SRC

   Turn on notify, noclobber, ignoreeof, emacs. These are bash-specific.

   #+BEGIN_SRC sh
set -o notify \
    -o noclobber \
    -o ignoreeof \
    -o emacs
   #+END_SRC

   Setup prompt.

   #+BEGIN_SRC sh
PS1='\e[0;34m\u@\h:\e[0;36m\w \e[0;33m$ \e[0m'
   #+END_SRC

   Bind keys when we’re interactive.

   #+BEGIN_SRC sh
if [[ $- == *i* ]]; then
    bind '"\e/": dabbrev-expand'
    bind '"\ee": edit-and-execute-command'
fi
   #+END_SRC

   Run the =update_terminal_cwd= command when we’re in Apple_Terminal. This will
   give us the working directory in the title window.

   #+BEGIN_SRC sh
if [ "$TERM_PROGRAM" = Apple_Terminal ] && [ -z "$INSIDE_EMACS" ]; then
    PROMPT_COMMAND="update_terminal_cwd;$PROMPT_COMMAND"
    update_terminal_cwd
fi
   #+END_SRC

   #+BEGIN_SRC sh
function set-eterm-dir {
    echo -e "\033AnSiTc" "$(pwd)"
    echo -e "\033AnSiTh" "$(hostname -f)"
    echo -e "\033AnSiTu" "$LOGNAME"
}
if [ "$TERM" = "eterm-color" ]; then
    PROMPT_COMMAND=set-eterm-dir
fi
   #+END_src

** =.zshrc=
   :PROPERTIES:
   :header-args: :tangle zshrc.sh :tangle-mode (identity #o755)
   :END:

   This is a profile for use with [[http://www.zsh.org][Zsh]]. It is closely based off of [[https://github.com/robbyrussell/oh-my-zsh][oh-my-zsh]]. To
   use this, you must create a short ~/.zshrc file. Here is an example,

   #+BEGIN_SRC sh :tangle no
bootstrap=$HOME/.nix-profile/etc/zshrc
[ -f $bootstrap ] && source $bootstrap
   #+END_SRC

   Setup ZSH profile. First, we just source the global profile.

   #+BEGIN_SRC sh :padline no
source @out@/etc/profile
   #+END_SRC

   Handle dumb options.

   #+BEGIN_SRC sh
case "$TERM" in
    dumb)
        unsetopt zle \
                 prompt_cr \
                 prompt_subst
        if whence -w precmd >/dev/null; then
            unfunction precmd
        fi
        if whence -w preexec >/dev/null; then
            unfunction preexec
        fi
        PS1='$ '
        return
        ;;
esac
   #+END_SRC

   Load up site-functions in ZSH.

   #+BEGIN_SRC sh
fpath+=(@out@/share/zsh/site-functions)
   #+END_SRC

   Setup ZSH auto suggestions.

   #+BEGIN_SRC sh
. @zsh-autosuggestions@/share/zsh-autosuggestions/zsh-autosuggestions.zsh
   #+END_SRC

   Turn on colors.

   #+BEGIN_SRC sh
autoload -U colors && colors
   #+END_SRC

   Turn on ZSH-specific options.

   #+BEGIN_SRC sh
setopt always_to_end \
       append_history \
       auto_cd \
       auto_menu \
       auto_name_dirs \
       auto_pushd \
       cdablevarS \
       complete_in_word \
       correct \
       correctall \
       extended_glob \
       extended_history \
       hist_expire_dups_first \
       hist_find_no_dups \
       hist_ignore_dups \
       hist_ignore_space \
       hist_reduce_blanks \
       hist_verify \
       inc_append_history \
       interactive_comments \
       long_list_jobs \
       multios \
       no_beep \
       prompt_subst \
       pushd_ignore_dups \
       pushdminus \
       share_history \
       transient_rprompt
   #+END_SRC

   Setup completions.

   #+BEGIN_SRC sh
ZSH_COMPDUMP="${HOME}/.zcompdump-${SHORT_HOST}-${ZSH_VERSION}"
autoload -U compaudit compinit && compinit -d "${ZSH_COMPDUMP}"
zmodload -i zsh/complist
   #+END_SRC

   Zstyle completions.

   #+BEGIN_SRC sh
zstyle ':vcs_info:*' actionformats \
       '%F{5}(%f%s%F{5})%F{3}-%F{5}[%F{2}%b%F{3}|%F{1}%a%F{5}]%f '
zstyle ':vcs_info:*' formats '%F{5}(%f%s%F{5})%F{3}-%F{5}[%F{2}%b%F{5}]%f '
zstyle ':vcs_info:*' enable git

zstyle ':completion:*' matcher-list 'r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*' matcher-list 'm:{a-zA-Z-_}={A-Za-z_-}' 'r:|=*' 'l:|=*'
zstyle ':completion:*' list-colors ''
zstyle ':completion:*:*:kill:*:processes' list-colors \
       '=(#b) #([0-9]#) ([0-9a-z-]#)*=01;34=0=01'
zstyle ':completion:*:*:*:*:processes' command \
       "ps -u $USER -o pid,user,comm -w -w"
zstyle ':completion:*:cd:*' tag-order local-directories directory-stack \
       path-directories
zstyle ':completion::complete:*' use-cache 1
zstyle ':completion::complete:*' cache-path ~/.zsh/cache/$HOST
zstyle ':completion:*' select-prompt \
       '%SScrolling active: current selection at %p%s'
zstyle ':completion:*::::' completer _expand _complete _ignored _approximate
zstyle ':completion:*' menu select=1 _complete _ignored _approximate
zstyle ':completion:*:*:-subscript-:*' tag-order indexes parameters
zstyle ':completion:*' verbose yes
zstyle ':completion:*:descriptions' format '%B%d%b'
zstyle ':completion:*:messages' format '%d'
zstyle ':completion:*:warnings' format 'No matches for: %d'
zstyle ':completion:*:corrections' format '%B%d (errors: %e)%b'
zstyle ':completion:*' group-name ''
zstyle ':completion:*:functions' ignored-patterns '_*'
zstyle ':completion:*:scp:*' tag-order files users \
       'hosts:-host hosts:-domain:domain hosts:-ipaddr"IP\ Address *'
zstyle ':completion:*:scp:*' group-order files all-files users hosts-domain \
       hosts-host hosts-ipaddr
zstyle ':completion:*:ssh:*' tag-order users \
       'hosts:-host hosts:-domain:domain hosts:-ipaddr"IP\ Address *'
zstyle ':completion:*:ssh:*' group-order hosts-domain hosts-host users \
       hosts-ipaddr
zstyle '*' single-ignored show
   #+END_SRC

   Turn on prompt with colors.

   #+BEGIN_SRC sh
PROMPT='%F{blue}%n@%m:%F{cyan}%c%F{yellow} $ %F{reset}'
   #+END_SRC

   ZSH key bindings.

   #+BEGIN_SRC sh
if [ "$TERM" = xterm-256color ]; then
    bindkey "^[[H" beginning-of-line
    bindkey "^[[F" end-of-line
    bindkey "^[[3~" delete-char
fi
   #+END_SRC

   Setup Apple Terminal so that CWD is shown.

   #+BEGIN_SRC sh
if [ "$TERM_PROGRAM" = Apple_Terminal ] && [ -z "$INSIDE_EMACS" ]; then
    autoload add-zsh-hook
    add-zsh-hook chpwd update_terminal_cwd
    update_terminal_cwd
fi
   #+END_SRC

   #+BEGIN_SRC sh
if [ -n "$INSIDE_EMACS" ]; then
    # function to set the dired and host for ansiterm
    set_eterm_dir() {
        print -P "\033AnSiTu %n"
        print -P "\033AnSiTh" "$(hostname -f)"
        print -P "\033AnSiTc %d"
    }

    # call prmptcmd whenever prompt is redrawn
    precmd_functions=($precmd_functions set_eterm_dir)
fi
   #+END_SRC
** =etc-profile.sh=
   :PROPERTIES:
   :header-args: :tangle etc-profile.sh :tangle-mode (identity #o755)
   :END:

   This just sources everything in the =/etc/profile.d= dir. =PREFIX= can be
   used to reference the Nix output dir.

   #+BEGIN_SRC sh :padline no
export PREFIX=@out@
   #+END_SRC

   This will source everything in =/etc/profile.d=.

   #+BEGIN_SRC sh
if [ -d @out@/etc/profile.d ]; then
  for i in @out@/etc/profile.d/*.sh; do
    if [ -r $i ]; then
      source $i
    fi
  done
fi
   #+END_SRC
** =.gitignore=
   :PROPERTIES:
   :header-args: :tangle gitignore
   :END:

   Some basic gitignore paths.

   #+BEGIN_SRC gitignore :padline no
*~
\#*\#
*.DS_Store
   #+END_SRC
** =.gitconfig=
   :PROPERTIES:
   :header-args: :tangle gitconfig
   :END:

   #+BEGIN_SRC gitconfig :padline no
[core]
	editor = emacsclient
	excludesfile = @gitignore@

[commit]
	gpgSign = true

[gpg]
	program = "@gnupg@/bin/gpg"

[push]
	default = simple

[pull]
	rebase = true

[alias]
	amend = commit --amend

[help]
	autcorrect = 1

[color]
	ui = true
   #+END_SRC
* Bootstrapping
** =site-paths.el.in=
   :PROPERTIES:
   :header-args: :tangle site-paths.el.in
   :END:

   This file provides site-specific paths. However, it must be substituted in
   Nix before we can actually run it in Emacs. To prevent Emacs from trying to
   run this, I’ve set the syntax to =text=.

   #+BEGIN_SRC emacs-lisp
(require 'set-defaults)
(require 'subr-x)
   #+END_SRC

   =output-directory= points to the nix-profile directory created by Nix.
   Ideally, this could point to a Nix store path, but the order of building
   means that we don’t know this until too late.

   #+BEGIN_SRC emacs-lisp
(defvar output-directory (expand-file-name ".nix-profile" (getenv "HOME")))
   #+END_SRC

   Setup =exec-path=.

   #+BEGIN_SRC emacs-lisp
(setq exec-path (append `(,(expand-file-name "bin" output-directory)
                          "/usr/sbin" "/usr/bin" "/sbin" "/bin")
                        exec-path))
   #+END_SRC

   Setup =man-path=.

   #+BEGIN_SRC emacs-lisp
(defvar man-path `("/usr/share/man"
                   "/usr/local/share/man"
                   ,(expand-file-name "share/man" output-directory)))
   #+END_SRC

   This will setup cacert-file var,

   #+BEGIN_SRC emacs-lisp
(defcustom cacert-file "/etc/ssl/certs/ca-bundle.crt"
  "Path for SSL certificates."
  :group 'environment)
   #+END_SRC

   Set env vars provided by Nix,

   #+BEGIN_SRC emacs-lisp
(set-envs
 ;; `("NIX_SSL_CERT_FILE" ,cacert-file)
 `("NIX_PATH" "nixpkgs=/nix/var/nix/profiles/per-user/root/channels/nixpkgs")
 `("NIX_REMOTE" "daemon")
 `("PATH" ,(string-join exec-path ":"))
 `("MANPATH" ,(string-join man-path ":"))
 )
   #+END_SRC

   Set paths provided by Nix,

   #+BEGIN_SRC emacs-lisp
(set-paths
 '(company-cmake-executable "@cmake@/bin/cmake")
 '(doc-view-dvipdf-program "@ghostscript@/bin/dvipdf")
 '(cacert-file "@cacert@/etc/ssl/certs/ca-bundle.crt")
 '(calc-gnuplot-name "@gnuplot@/bin/gnuplot")
 '(gnuplot-program "@gnuplot@/bin/gnuplot")
 '(doc-view-ps2pdf-program "@ghostscript@/bin/ps2pdf")
 '(dired-touch-program "@coreutils@/bin/touch")
 '(dired-chmod-program "@coreutils@/bin/chmod")
 '(dired-chown-program "@coreutils@/bin/chown")
 '(dired-free-space-program "@coreutils@/bin/df")
 '(diff-command "@diffutils@/bin/diff")
 '(find-program "@findutils@/bin/find")
 '(epg-gpg-program "@gpg@/bin/gpg")
 '(epg-gpgconf-program "@gpg@/bin/gpgconf")
 '(epg-gpgsm-program "@gpg@/bin/gpgsm")
;; '(explicit-shell-file-name "@bash@/bin/bash")
 '(flycheck-sh-bash-executable "@bash@/bin/bash")
 '(flycheck-sh-zsh-executable "@zsh@/bin/zsh")
 '(flycheck-perl-executable "@perl@/bin/perl")
 '(flycheck-go-golint-executable "@golint@/bin/golint")
 '(flycheck-haskell-hlint-executable "@hlint@/bin/hlint")
 '(flycheck-python-flake8-executable "@flake8@/bin/flake8")
 '(flycheck-asciidoc-executable "@asciidoc@/bin/asciidoc")
 '(flycheck-less-executable "@lessc@/bin/lessc")
 '(flycheck-c/c++-gcc-executable "@gcc@/bin/gcc")
 '(flycheck-javascript-eslint-executable "@eslint@/bin/eslint")
 '(flycheck-javascript-jshint-executable "@jshint@/bin/jshint")
 '(flycheck-go-build-executable "@go@/bin/go")
 '(flycheck-go-test-executable "@go@/bin/go")
 '(flycheck-lua-executable "@lua@/bin/luac")
 '(flycheck-xml-xmllint-executable "@libxml2@/bin/xmllint")
 '(flycheck-perl-perlcritic-executable "@perlcritic@/bin/perlcritic")
 '(flycheck-html-tidy-executable "@tidy@/bin/tidy")
 '(fortune-dir "@fortune@/share/games/fortunes")
 '(fortune-file "@fortune@/share/games/fortunes/food")
 '(grep-program "@gnugrep@/bin/grep")
 ;; '(flycheck-haskell-stack-ghc-executable "@stack@/bin/stack")
 ;; '(haskell-process-cabal "@ghc@/bin/cabal")
 ;; '(haskell-process-ghci "@ghc@/bin/ghci")
 ;; '(haskell-process-stack "@stack@/bin/stack")
 '(haskell-check-command "@hlint@/bin/hlint")
 '(haskell-hoogle-command "@hoogle@/bin/hoogle")
 '(ispell-program-name "@aspell@/bin/aspell")
 '(ispell-grep-command "@gnugrep@/bin/grep")
 '(irony-cmake-executable "@cmake@/bin/cmake")
 '(jka-compr-info-compress-program "@ncompress@/bin/compress")
 '(jka-compr-info-uncompress-program "@ncompress@/bin/uncompress")
 '(irony-server-install-prefix "@irony@")
 '(jka-compr-dd-program "@coreutils@/bin/dd")
;; '(jdee-server-dir "@jdeeserver@")
 '(magit-git-executable "@git@/bin/git")
 '(markdown-command "@markdown2@/bin/markdown2")
 '(manual-program "@man@/bin/man")
 '(man-awk-command "@gawk@/bin/awk")
 '(man-sed-command "@gnused@/bin/sed")
 '(man-untabify-command "@coreutils@/bin/pr")
 '(nethack-executable "@nethack@/bin/nethack")
 '(org-pandoc-command "@pandoc@/bin/pandoc")
 '(pandoc-binary "@pandoc@/bin/pandoc")
 '(remote-shell-program "@openssh@/bin/ssh")
 '(ripgrep-executable "@ripgrep@/bin/rg")
 '(rtags-path "@rtags@/bin")
 '(sql-ingres-program "@parallel@/bin/sql")
 '(sql-interbase-program "@unixODBC@/bin/isql")
 '(sql-mysql-program "@mariadb@/bin/mysql")
 '(sql-ms-program "@freetds@/bin/osql")
 '(sql-postgres-program "@freetds@/bin/osql")
 '(sql-sqlite-program "@sqliteInteractive@/bin/sqlite3")
 '(tramp-encoding-shell "@bash@/bin/sh")
 '(tex-shell "@bash@/bin/sh")
 '(xargs-program "@findutils@/bin/xargs")
 '(vc-git-program "@git@/bin/git")
 '(gnutls "@gnutls@/bin/gnutls-cli")
 '(pdf2dsc-command "@ghostscript@/bin/pdf2dsc")
 '(preview-gs-command "@texlive@/bin/rungs")
 '(TeX-command "@texlive@/bin/tex")
 '(LaTeX-command "@texlive@/bin/latex")
 '(latex-run-command "@texlive@/bin/latex")
 '(tex-run-command "@texlive@/bin/tex")
 '(luatex-command "@texlive@/bin/luatex")
 '(xetex-command "@texlive@/bin/xetex")
 '(xelatex-command "@texlive@/bin/xelatex")
 '(makeinfo-command "@texinfoInteractive@/bin/makeinfo")
 '(pdftex-command "@texlive@/bin/pdftex")
 '(context-command "@texlive@/bin/context")
 '(bibtex-command "@texlive@/bin/bibtex")
 '(dvipdfmx-command "@texlive@/bin/dvipdfmx")
 '(makeindex-command "@texlive@/bin/makeindex")
 '(chktex-command "@texlive@/bin/chktex")
 '(lacheck-command "@texlive@/bin/lacheck")
 '(dvipdfmx-command "@texlive@/bin/dvipdfmx")
 '(dvips-command "@texlive@/bin/dvips")
 '(dvipng-command "@texlive@/bin/dvipng")
 '(ps2pdf-command "@ghostscript@/bin/ps2pdf")
 '(locate-executable "@findutils@/bin/locate")
 '(ag-executable "@ag@/bin/ag")
 ;; '(intero-stack-executable "@intero@/bin/intero-nix-shim")
 '(notmuch-command "@notmuch@/bin/notmuch")
 '(org-export-async-init-file "@orginit@")
 )
   #+END_SRC

   Set some defaults that depend on the path variables below,

   #+BEGIN_SRC emacs-lisp
(set-defaults
 '(imap-ssl-program `(,(concat gnutls " --tofu -p %p %s")))
 '(tls-program (concat gnutls " --tofu -p %p %h"))
 '(preview-pdf2dsc-command
   (concat pdf2dsc-command " %s.pdf %m/preview.dsc"))
 '(preview-dvips-command
   (concat dvips-command " -Pwww %d -o %m/preview.ps"))
 '(preview-fast-dvips-command
   (concat dvips-command " -Pwww %d -o %m/preview.ps"))
 '(preview-dvipng-command
   (concat dvipng-command
           " -picky -noghostscript %d -o \"%m/prev%%03d.png\""))
 '(TeX-engine-alist `((xetex "XeTeX" xetex-command xelatex-command
                             xetex-command)
                      (luatex "LuaTeX" luatex-command
                              ,(concat luatex-command " --jobname=%s")
                              luatex-command)))
 '(TeX-command-list
   `(("TeX"
      "%(PDF)%(tex) %(file-line-error) %(extraopts) %`%S%(PDFout)%(mode)%' %t"
      TeX-run-TeX nil
      (plain-tex-mode ams-tex-mode texinfo-mode)
      :help "Run plain TeX")
     ("LaTeX" "%`%l%(mode)%' %t" TeX-run-TeX nil
      (latex-mode doctex-mode)
      :help "Run LaTeX")
     ("Makeinfo" ,(concat makeinfo-command " %(extraopts) %t")
      TeX-run-compile nil
      (texinfo-mode)
      :help "Run Makeinfo with Info output")
     ("Makeinfo HTML" ,(concat makeinfo-command " %(extraopts) --html %t")
      TeX-run-compile nil
      (texinfo-mode)
      :help "Run Makeinfo with HTML output")
     ("AmSTeX"
      ,(concat pdftex-command " %(PDFout) %(extraopts) %`%S%(mode)%' %t")
      TeX-run-TeX nil
      (ams-tex-mode)
      :help "Run AMSTeX")
     ("ConTeXt"
      ,(concat context-command " --once --texutil %(extraopts) %(execopts)%t")
      TeX-run-TeX nil
      (context-mode)
      :help "Run ConTeXt once")
     ("ConTeXt Full" ,(concat context-command " %(extraopts) %(execopts)%t")
      TeX-run-TeX nil
      (context-mode)
      :help "Run ConTeXt until completion")
     ("BibTeX" ,(concat bibtex-command " %s")
      TeX-run-BibTeX nil t :help "Run BibTeX")
     ("Biber" "biber %s" TeX-run-Biber nil t :help "Run Biber")
     ("View" "%V" TeX-run-discard-or-function t t :help "Run Viewer")
     ("Print" "%p" TeX-run-command t t :help "Print the file")
     ("Queue" "%q" TeX-run-background nil t
      :help "View the printer queue" :visible TeX-queue-command)
     ("File" ,(concat dvips-command " %d -o %f ")
      TeX-run-dvips t t :help "Generate PostScript file")
     ("Dvips" ,(concat dvips-command " %d -o %f ")
      TeX-run-dvips nil t :help "Convert DVI file to PostScript")
     ("Dvipdfmx" ,(concat dvipdfmx-command " %d")
      TeX-run-dvipdfmx nil t :help "Convert DVI file to PDF with dvipdfmx")
     ("Ps2pdf" ,(concat ps2pdf-command " %f")
      TeX-run-ps2pdf nil t :help "Convert PostScript file to PDF")
     ("Index" ,(concat makeindex-command " %s")
      TeX-run-index nil t :help "Run makeindex to create index file")
     ("upMendex" "upmendex %s"
      TeX-run-index t t :help "Run mendex to create index file")
     ("Xindy" "xindy %s"
      TeX-run-command nil t :help "Run xindy to create index file")
     ("Check" ,(concat lacheck-command " %s") TeX-run-compile nil
      (latex-mode)
      :help "Check LaTeX file for correctness")
     ("ChkTeX" ,(concat chktex-command " -v6 %s") TeX-run-compile nil
      (latex-mode)
      :help "Check LaTeX file for common mistakes")
     ("Spell" "(TeX-ispell-document \"\")"
      TeX-run-function nil t :help "Spell-check the document")
     ("Clean" "TeX-clean"
      TeX-run-function nil t :help "Delete generated intermediate files")
     ("Clean All" "(TeX-clean t)" TeX-run-function nil t
      :help "Delete generated intermediate and output files")
     ("Other" "" TeX-run-command t t :help "Run an arbitrary command")))
 '(counsel-grep-base-command
   (concat ripgrep-executable
           " -i -M 120 --no-heading --line-number --color never '%s' %s"))
 '(counsel-rg-base-command
   (concat ripgrep-executable " -i --no-heading --line-number %s ."))
 '(counsel-ag-base-command (concat ag-executable " --nocolor --nogroup %s"))
 '(org-preview-latex-process-alist
   `((dvipng :programs ("latex" "dvipng")
             :description "dvi > png"
             :message ""
             :image-input-type "dvi"
             :image-output-type "png"
             :image-size-adjust (1.0 . 1.0)
             :latex-compiler
             (,(concat LaTeX-command
                       " -interaction nonstopmode -output-directory %o %f"))
             :image-converter
             (,(concat dvipng-command
                       " -fg %F -bg %B -D %D -T tight -o %O %f")))))
 '(Info-directory-list `(,(expand-file-name "share/info" output-directory)))
 '(tramp-remote-path `(tramp-own-remote-path
                       "/run/current-system/sw/bin"
                       tramp-default-remote-path
                       "/bin"
                       "/usr/bin"
                       "/sbin"
                       "/usr/sbin"
                       "/usr/local/bin"
                       "/usr/local/sbin"
                       "/opt/bin"
                       "/opt/sbin"
                       ,(expand-file-name "bin" output-directory)
                       ))
 '(woman-manpath man-path)
 )
   #+END_SRC

   Provide site-paths,

   #+BEGIN_SRC emacs-lisp
(provide 'site-paths)
   #+END_SRC

** =bootstrap.sh=
   :PROPERTIES:
   :header-args: :tangle bootstrap.sh
   :END:

   #+BEGIN_SRC sh :padline no
#!/bin/sh
   #+END_SRC

   Install Nix.

   #+BEGIN_SRC sh
if ! command -v nix-env >/dev/null 2>&1; then
    nix_installer=$(mktemp)
    curl -s https://nixos.org/nix/install > $nix_installer
    sh $nix_installer
fi
   #+END_SRC

   Pull into Git repo.

   #+BEGIN_SRC sh
if [ -d .git ] && command -v git >/dev/null 2>&1
then
    git pull origin master || true
fi
   #+END_SRC

   Clone if default.nix doesn’t exist.

   #+BEGIN_SRC sh
if ! [ -f default.nix ] && command -v git >/dev/null 2>&1; then
    repo_dir=$(mktemp -d)
    git clone https://github.com/matthewbauer/bauer $repo_dir
    cd $repo_dir
fi
   #+END_SRC

   Install current directory

   #+BEGIN_SRC sh
nix-env -if .
   #+END_SRC

** =runemacs.sh=
   :PROPERTIES:
   :header-args: :tangle runemacs.sh :tangle-mode (identity #o755)
   :END:

   Cross-platform script to execute app.

   #+BEGIN_SRC sh :padline no
#!/usr/bin/env sh

case $(uname) in
    Darwin)
        open @out@/Applications/Emacs.app
    ;;
    *)
        @out@/bin/emacs
    ;;
esac
   #+END_SRC
* Building
** =default.nix=: the tangler
   :PROPERTIES:
   :header-args: :tangle default.nix
   :END:

   #+BEGIN_SRC nix :padline no
{ nixpkgs-url ? "nixos.org/channels/nixpkgs-unstable/nixexprs.tar.xz"
, nixpkgs ? builtins.fetchTarball nixpkgs-url
, nixpkgs' ? import nixpkgs {}
}: with nixpkgs';
   #+END_SRC

   Now let's tangle README.org...

   #+BEGIN_SRC nix
import (runCommand "README" { buildInputs = [ emacs ]; } ''
mkdir -p $out
cd $out
cp -r ${./lisp} $out/lisp
cp ${./README.org} README.org
emacs --batch --quick \
      -l ob-tangle \
      --eval "(org-babel-tangle-file \"README.org\")"
cp bauer.nix default.nix
'') {inherit nixpkgs';}
   #+END_SRC
** =bauer.nix=: the build script
   :PROPERTIES:
   :header-args: :tangle bauer.nix
   :END:

   =nixpkgs= should just be a Nix path to the Nixpkgs package set. =nixpkgs'=
   will be =nixpkgs= instantiated.

   #+BEGIN_SRC nix
{ nixpkgs-url ? "nixos.org/channels/nixpkgs-unstable/nixexprs.tar.xz"
, nixpkgs ? builtins.fetchTarball nixpkgs-url
, nixpkgs' ? import nixpkgs {}
}: with nixpkgs'; let
   #+END_SRC

   We start out by defining the Nix version to use. nixStable corresponds to the
   last released version, 1.11. nixUnstable is currently at Nix 2.0 which should
   soon be released.

   #+BEGIN_SRC nix
nix = nixUnstable;
   #+END_SRC

  Next we start defining some packages. R is one of the simpler ones right now,
  so let's start with that.

  #+BEGIN_SRC nix
  rEnv = pkgs.rWrapper.override {
    packages = with pkgs.rPackages; [
      RCurl
    ];
  };
  #+END_SRC

  Here we define our package set. This will just give us access to all of the
  Emacs packages defined in Nixpkgs.

  We also define our Emacs version to use. Mitsuharo’s Emacs package is much
  better for MacOS so we use that when we’re on Darwin systems. Otherwise, just
  default to ‘emacs’ which should be the latest (Nixpkgs-unstable has version
  25.3 currently).

  #+BEGIN_SRC nix
  customEmacsPackages = emacsPackagesNg.overrideScope (super: self: {
    emacs = if stdenv.isDarwin then emacsMacport
            else emacs;
  });
  #+END_SRC

  Next, we define aspell with the English language. This is used by Emacs
  ispell.

  #+BEGIN_SRC nix
  myAspell = aspellWithDicts (ps : with ps; [ en ]);
  #+END_SRC

  Tex live provides some LaTeX commads for us.

  #+BEGIN_SRC nix
  myTex = texlive.combine {
    inherit (texlive) xetex setspace
      fontspec chktex enumitem xifthen
      ifmtarg filehook wrapfig inconsolata
      upquote minted lastpage collection-basic
      collection-binextra collection-context
      collection-fontsrecommended collection-fontutils
      collection-langenglish collection-latex
      collection-latexrecommended collection-luatex
      collection-metapost collection-texworks
      collection-xetex capt-of;
  };
  #+END_SRC

*** Emacs configuration

   Here, we start building up the site-paths.el file. This does a simple
   substitution of all the attributes set.

   #+BEGIN_SRC nix
  site-paths = runCommand "site-paths.el" {
    inherit rtags ripgrep ag ant nethack fortune gnutls
      coreutils findutils openssh git bash
      zsh perl golint perlcritic
      go asciidoc lessc stack
      lua gcc bashInteractive diffutils
      pandoc clang cmake ghostscript
      gnugrep man gawk gnused
      sqliteInteractive freetds mariadb
      parallel unixODBC ncompress
      texinfoInteractive cacert notmuch gnuplot;
    inherit (customEmacsPackages) emacs;
    inherit (pythonPackages) flake8;
    inherit (nodePackages) jshint eslint;
    inherit (haskellPackages) hoogle hlint;
    # intero = haskellPackages.intero-nix-shim;
    texlive = myTex;
    markdown2 = pythonPackages.markdown2;
    tidy = html-tidy;
    irony = irony-server;
    libxml2 = libxml2.bin;
    gpg = gnupg1compat;
    # jdeeserver = jdee-server;
    aspell = myAspell;
    orginit = ./org-init.el;
  } ''
cp ${./site-paths.el.in} $out
substituteAllInPlace $out
  '';
   #+END_SRC

   Emacs building can be divided into phases. Each phase will run through the
   Elisp once.

**** Phase 1: picking up dependencies

   myPackages gets a listing of all of the packages that are needed by the Emacs
   configuration. use-package-list generates this list automatically.

   #+BEGIN_SRC nix
  package-list = with customEmacsPackages.melpaPackages;
                 with customEmacsPackages.elpaPackages;
    runCommand "package-list" {
      buildInputs = [ customEmacsPackages.emacs ];
    } ''
emacs --batch --quick \
                -L ${bind-key}/share/emacs/site-lisp/elpa/bind-key-* \
                -L ${use-package}/share/emacs/site-lisp/elpa/use-package-* \
                -L ${delight}/share/emacs/site-lisp/elpa/delight-* \
                -L ${./lisp} -l use-package-list \
                --eval "(use-package-list \"${./README.el}\")" > $out
  '';
  myPackages = builtins.fromJSON (builtins.readFile package-list);
   #+END_SRC

**** Phase 2: byte compiling

   #+BEGIN_SRC nix
  default = runCommand "default.el" {
    buildInputs = [customEmacsPackages.emacs];
  } ''
mkdir -p $out/share/emacs/site-lisp

cp ${./README.el} $out/share/emacs/site-lisp/default.el
cp ${site-paths} $out/share/emacs/site-lisp/site-paths.el

cp ${./lisp/em-dired.el} $out/share/emacs/site-lisp/em-dired.el
cp ${./lisp/dired-column.el} \
  $out/share/emacs/site-lisp/dired-column.el
cp ${./lisp/macho-mode.el} $out/share/emacs/site-lisp/macho-mode.el
cp ${./lisp/nethack.el} $out/share/emacs/site-lisp/nethack.el
cp ${./lisp/set-defaults.el} \
  $out/share/emacs/site-lisp/set-defaults.el
cp ${./lisp/installer.el} $out/share/emacs/site-lisp/installer.el
cp ${./lisp/restart-emacs.el} \
  $out/share/emacs/site-lisp/restart-emacs.el
cp ${./lisp/company-eshell-history.el} \
  $out/share/emacs/site-lisp/company-eshell-history.el
cp ${./lisp/use-package-list.el} \
  $out/share/emacs/site-lisp/use-package-list.el
   #+END_SRC

	 This is fairly complicated. What happens is we batch compile all of the .el
	 files. The problem is the .el files all are going to depend on dependencies
	 that we have just found in package-list. The solution is that complex eval
	 below where we add all of the paths (and their requisites) to the load
	 path. This works but is hacky and I am interested in fixing it.

   #+BEGIN_SRC nix
cd $out/share/emacs/site-lisp
export HOME=$PWD
emacs --batch --quick \
      --eval "(let ((default-directory \"${emacsWrapper
                ((requiredPackages customEmacsPackages myPackages) ++
                  (with customEmacsPackages.melpaPackages;
                   with customEmacsPackages.elpaPackages;
                        [use-package delight]))
}/share/emacs/site-lisp\")) (normal-top-level-add-subdirs-to-load-path))" \
      -L . -f batch-byte-compile *.el
   #+END_SRC

   #+BEGIN_SRC nix
  '';
   #+END_SRC

**** Phase 3: wrapping into Emacs

   #+BEGIN_SRC nix
  emacsWrapper = explicitRequires: runCommand "emacs-packages-deps"
   { inherit explicitRequires; 
     inherit (xorg) lndir; 
     inherit (customEmacsPackages) emacs;}
   ''
     findInputsOld() {
         local pkg="$1"; shift
         local var="$1"; shift
         local propagatedBuildInputsFiles=("$@")
         local varSlice="$var[*]"
         # ''${..-} to hack around old bash empty array problem
         case "''${!varSlice-}" in
             *" $pkg "*) return 0 ;;
         esac
         unset -v varSlice
         eval "$var"'+=("$pkg")'
         if ! [ -e "$pkg" ]; then
             echo "build input $pkg does not exist" >&2
             exit 1
         fi
         local file
         for file in "''${propagatedBuildInputsFiles[@]}"; do
             file="$pkg/nix-support/$file"
             [[ -f "$file" ]] || continue
             local pkgNext
             for pkgNext in $(< "$file"); do
                 findInputsOld "$pkgNext" "$var" "''${propagatedBuildInputsFiles[@]}"
             done
         done
     }
     mkdir -p $out/bin
     mkdir -p $out/share/emacs/site-lisp
     local requires
     for pkg in $explicitRequires; do
       findInputsOld $pkg requires propagated-user-env-packages
     done
     linkPath() {
       local pkg=$1
       local origin_path=$2
       local dest_path=$3
       # Add the path to the search path list, but only if it exists
       if [[ -d "$pkg/$origin_path" ]]; then
         $lndir/bin/lndir -silent "$pkg/$origin_path" "$out/$dest_path"
       fi
     }
     linkEmacsPackage() {
       linkPath "$1" "bin" "bin"
       linkPath "$1" "share/emacs/site-lisp" "share/emacs/site-lisp"
     }
     # Iterate over the array of inputs (avoiding nix's own interpolation)
     for pkg in "''${requires[@]}"; do
       linkEmacsPackage $pkg
     done
     # Byte-compiling improves start-up time only slightly, but costs nothing.
     $emacs/bin/emacs --batch -f batch-byte-compile "$siteStart"
  '';
   #+END_SRC

   requiredPackages is a function that takes two arguments. 

   #+BEGIN_SRC nix
requiredPackages = epkgs: map (x:
  if builtins.hasAttr x epkgs.melpaPackages
    then builtins.getAttr x epkgs.melpaPackages
    else if builtins.hasAttr x epkgs then builtins.getAttr x epkgs
    else if builtins.hasAttr x emacsPackages
    then builtins.getAttr x emacsPackages
    else if builtins.hasAttr x epkgs.elpaPackages
    then builtins.getAttr x epkgs.elpaPackages
    else builtins.getAttr x pkgs);
   #+END_SRC

   Now we build our Emacs distribution.

   #+BEGIN_SRC nix
  myEmacs = customEmacsPackages.emacsWithPackages (epkgs:
    (requiredPackages epkgs myPackages)
    ++ [default epkgs.melpaPackages.use-package]
  );
   #+END_SRC

*** The environment

  Finally, we can actually build the environment.

  #+BEGIN_SRC nix
myEnv = buildEnv {
  buildInputs = [ makeWrapper ];
  postBuild = ''
if [ -w $out/share/info ]; then
  shopt -s nullglob
  for i in $out/share/info/*.info $out/share/info/*.info.gz; do # */
    ${texinfoInteractive}/bin/install-info $i $out/share/info/dir
  done
fi

mkdir -p $out/etc

cp ${./gitconfig} $out/etc/gitconfig
substituteInPlace $out/etc/gitconfig \
  --replace @gitignore@ ${./gitignore} \
  --replace @gnupg@ ${gnupg1compat}/bin/gpg \
  --replace @out@ $out

cp ${./bashrc.sh} $out/etc/bashrc
substituteInPlace $out/etc/bashrc \
  --replace @fortune@ ${fortune} \
  --replace @out@ $out

cp ${./zshrc.sh} $out/etc/.zshrc
substituteInPlace $out/etc/.zshrc \
  --replace @zsh-autosuggestions@ ${zsh-autosuggestions} \
  --replace @fortune@ ${fortune} \
  --replace @out@ $out
cp $out/etc/.zshrc $out/etc/zshrc

cp ${./etc-profile.sh} $out/etc/profile
substituteInPlace $out/etc/profile \
  --replace @out@ $out

wrapProgram $out/bin/bash \
  --add-flags "--rcfile $out/etc/bashrc"

wrapProgram $out/bin/zsh \
  --set ZDOTDIR $out/etc

cp ${./runemacs.sh} $out/bin/run
substituteInPlace $out/bin/run \
  --replace @out@ $out
ln -s $out/bin/run $out/bin/bauer
  '';
  meta = {
    priority = -10;
  };
  pathsToLink = [
    "/bin"
    "/etc/profile.d"
    "/etc/bash_completion.d"
    "/etc/ssl"
    "/Applications"
    "/share/doc"
    "/share/man"
    "/share/info"
    "/share/zsh"
    "/share/bash-completion"
    "/share/mime"
  ];

  extraOutputsToInstall = [ "man" "info" "doc" "devdoc" "devman" ];
  name = "bauer";

  paths = [
    myEmacs
    myTex
    rEnv
    (runCommand "my-profile" { buildInputs = [makeWrapper]; } ''
mkdir -p $out/etc/profile.d
cp ${./profile.sh} $out/etc/profile.d/my-profile.sh
substituteInPlace $out/etc/profile.d/my-profile.sh \
  --replace @emacs@ ${myEmacs} \
  --replace @fortune@ ${fortune} \
  --replace @cacert@ ${cacert}
    '')]
   ++ [bashInteractive zsh coreutils git wget
        gawk gnused gzip gnutar gnupg1compat xz cacert gnuplot]
    ++ [nox nix nix-index nix-repl nix-zsh-completions nix-bash-completions]
    ++ [gitAndTools.hub]
    ++ [nodePackages.tern isync notmuch graphviz]
    ++ [stack ghc]
    ++ (with haskellPackages; [cabal-install]); # hindent hoogle ghc-mod
};
   #+END_SRC

  #+BEGIN_SRC nix
in myEnv
  #+END_SRC
  
** Invoking it
   We can build it with =nix-build=.

   #+BEGIN_SRC sh :results none
nix-build
./result/bin/run
   #+END_SRC

* Continuous integration
  :PROPERTIES: 
  :header-args: :tangle .travis.yml
  :END:

  #+BEGIN_HTML
<a href="https://travis-ci.org/matthewbauer/bauer">
  <img src="https://travis-ci.org/matthewbauer/bauer.svg?branch=master"></img>
</a>
  #+END_HTML

  We'll set up Travis support here. We start by configuring =.travis.yml=.

** =.travis.yml=

  #+BEGIN_SRC yaml :padline no
language: nix
  #+END_SRC

  Next we'll set up nix-build and pass the URL of Nixpkgs with the =NIXPKGS=.

  #+BEGIN_SRC yaml
script:
  - nix-build -Q --argstr nixpkgs-url $NIXPKGS
  - sh info.sh result
  #+END_SRC

  Setup the OSs. Sadly no Windows support yet.

  #+BEGIN_SRC yaml
git:
  depth: 1
sudo: false
os:
  - linux
  - osx
  #+END_SRC

  Setup some values for =NIXPKGS= variables.

  #+BEGIN_SRC yaml
env:
  - NIXPKGS=nixos.org/channels/nixos-unstable/nixexprs.tar.xz
  - NIXPKGS=nixos.org/channels/nixpkgs-unstable/nixexprs.tar.xz
  #+END_SRC

  Configure the matrix...

  #+BEGIN_SRC yaml
matrix:
  exclude:
    - os: linux
      env: NIXPKGS=nixos.org/channels/nixpkgs-17.09-darwin/nixexprs.tar.xz
    - os: osx
      env: NIXPKGS=nixos.org/channels/nixos-17.09/nixexprs.tar.xz
    - os: osx
      env: NIXPKGS=nixos.org/channels/nixos-unstable/nixexprs.tar.xz
  #+END_SRC

  Setup the cache.

  #+BEGIN_SRC yaml
cache:
  directories:
    - /nix/store
  #+END_SRC

  Turn off those annoying Travis notifications.

  #+BEGIN_SRC yaml
notifications:
  email: false
  #+END_SRC

* Extra
** =update.sh=
   :PROPERTIES:
   :header-args: :tangle update.sh :tangle-mode (identity #o755)
   :END:      

   This is a simple script that I use to make sure I've updated the generated
   files.

   #+BEGIN_SRC sh :padline no
#!/bin/sh
emacs --batch \
      -l ob-tangle --eval "(org-babel-tangle-file \"README.org\")"
   #+END_SRC
** =info.sh=
   :PROPERTIES:
   :header-args: :tangle info.sh :tangle-mode (identity #o755)
   :END:

   This file gives us some info on the built derivation. Only arg is optional
   and should be a path to a Nix store derivation.

   #+BEGIN_SRC sh :padline no
#!/bin/sh
out=$1

if [ -z "$out" ]; then
  out=$(nix-build)
fi

if [ -L "$out" ]; then
  out=$(readlink -f $out)
fi

if [ -e $out ]; then
  echo Dependencies:
  du -scl $(nix-store -qR $out) | sort -n
fi
   #+END_SRC
** =.gitignore=
   :PROPERTIES:
   :header-args: :tangle .gitignore
   :END:

   These set up some paths for =.gitignore= that we don’t want getting put in
   the repo. Start with Emacs/org-mode/LaTeX stuff.

   #+BEGIN_SRC gitignore :padline no
flycheck_*.el
*.elc
*.pdf
*.html
*.tex
*.log
*.aux
*.out
*.toc
   #+END_SRC

   Nix-related stuff.

   #+BEGIN_SRC gitignore
# nix stuff
result
result-*
   #+END_SRC

   These are all tangled by [[./README.org][README.org]].

   #+BEGIN_SRC gitignore
README.el
bashrc.sh
bauer.nix
zshrc.sh
etc-profile.sh
runemacs.sh
gitconfig
gitignore
default.el
profile.sh
site-paths.el.in
init.el
org-init.el
   #+END_SRC
** =config.nix=
   :PROPERTIES:
   :header-args: :tangle config.nix
   :END:

   This file is just for convenience if you wanted to build with the Nixpkgs in
   your channel. Having this file available means you can place this repo in
   \tilde/.nixpkgs and Nixpkgs will have the package ~userPackages~ available.

   #+BEGIN_SRC nix :padline no
{
  packageOverrides = pkgs: with pkgs; rec {
    bauer = import ./default.nix { nixpkgs' = pkgs; };
    userPackages = bauer;
  };
}
   #+END_SRC
** =org-init.el=
   :PROPERTIES:
   :header-args: :tangle org-init.el
   :END:

   #+BEGIN_SRC emacs-lisp :padline no
(require 'site-paths nil t)
(require 'use-package)
(setq use-package-always-demand t
      use-package-always-ensure nil)
(use-package tex-site)
(use-package emacs-lisp)
(use-package sh-script)
(use-package org
  :config
  (setq org-export-in-background t
        org-src-fontify-natively t
        org-src-preserve-indentation t
        ;; org-html-htmlize-output-type (quote css)
        org-latex-listings (quote minted))
  (use-package ox-latex)
  (use-package ox-beamer)
  (use-package ox-md)
  (use-package ox-rss))
   #+END_SRC
* COMMENT Footer
# Local Variables:
# mode: org
# fill-column: 80
# End:
